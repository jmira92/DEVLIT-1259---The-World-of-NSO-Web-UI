#!/bin/sh

prog=ncs-collect-tech-report

usage()
{
    cat <<EOF

Usage: ${prog} [options]

Collect information about the NCS system localy, collect logs
and additional information that is suitable to send to Tail-F
support for analysis. This assumes that NCS has been installed
with the --system-install option.

Options:

--install-dir InstallDir  Specifies the directory for installation of NCS
                          static files, like the --install-dir option to
                          the installer. Default: /opt/ncs.

--full                    Collects an ncs-backup of the system, posisbly
                          making it possible for Tail-F support to reproduce
                          any errors.


--num-debug-dumps         Default 1, if we are tracking resource leaks, such
                          as memory/file descriptor leaks, set this to e.g
                          3 and the command 'ncs --debug-dump' will be run
                          several times in a row, with a sleep inbetween


EOF
    exit 0
}


error()
{
    echo "ERROR ** $1"
    exit 1
}

usage_error()
{
    echo "ERROR ** $1"
    echo "Try $0 --help to get usage text"
    exit 1
}

abspath()
{
    case "$1" in
        /*) echo "$1" ;;
        *) echo `pwd`/"$1" ;;
    esac
}

# test -e is not portable
exists() # file/dir/symlink
{
    test -f "$1" -o -d "$1" -o -L "$1"
}

system_instdir=""
full=false
interactive="yes"
num_dumps=1
exclude_pattern=

while [ $# -gt 0 ]; do
    case "$1" in
        -h|-help|--help)
            usage
            ;;
        --install-dir)
            case "$2" in
                -*) error "Missing argument to --install-dir" ;;
                *) system_instdir="$2" ;;
            esac
            shift
            ;;
        --num-debug-dumps)
            num_dumps=$2
            shift;;
        --full)
            full=true;;
        *)
            usage_error "Unknown argument $1"
            ;;
    esac
    shift
done

case "$system_instdir" in
    '') system_instdir="/opt/ncs" ;;
    *) system_instdir=`abspath "$system_instdir"` ;;
esac
if [ -f "$system_instdir"/installdirs ]; then
    . "$system_instdir"/installdirs
    for f in "$NCS_CONFIG_DIR" "$NCS_RUN_DIR" "$NCS_LOG_DIR"; do
        case "$f" in
            /?*) # absolute path and not '/'
                ;;
            *)
                error "$system_instdir/installdirs content is corrupt"
                ;;
        esac
    done
else
    error \
        "$system_instdir does not appear to be a NCS installation directory"
fi
if [ -L "$system_instdir"/current ]; then
    current=`ls -l $system_instdir/current | awk '{print $NF}'`
else
    error \
        "$system_instdir does not appear to be a NCS installation directory"
fi


PATH="$system_instdir"/current/bin:"$PATH"
export PATH

pwd=`pwd`
ts=`date "+%Y-%m-%d-%H-%M"`
dir="ncs-tech-report-"${ts}
mkdir ${dir}
cd $dir


echo "Enter text describing the steps up until the problem occured"
echo "Describe the symptoms. "
echo "In short, what did you do, and what did you see"
echo "End by Ctrl-D"

while read line
do
    echo ${line} >> description.txt
done


echo "Copying log files ..."
mkdir log
cp -a ${NCS_LOG_DIR} log
mkdir etc
# Only copy the ncs.conf file and specifically not any crypto keys!
cp -a ${NCS_CONFIG_DIR}/ncs.conf etc
ls -latR ${NCS_RUN_DIR} > rundir.ls



if [ "$full" = true ]; then
    echo "Taking backup .."
    x=`ncs-backup --install-dir ${system_instdir}`
    if [ ! $? = 0 ]; then
        error "Cannot do backup"
    fi
    file=`echo $x | awk '{print $3}'`
    cp $file .
fi


while [ "$num_dumps" -gt 0 ]; do
    echo "Generating debug dump ..."
    ncs --debug-dump debug-dump
    num_dumps=$(($num_dumps - 1))
done

echo "Show package info .."
ncs_cli -noaaa <<EOF > packages.status
show status packages | nomore
exit
EOF

echo "tar result ..."
cd ..
tar czf "${dir}.tar.gz" ${dir}
rm -rf ${dir}
echo "Report resides in  ${dir}.tar.gz"
