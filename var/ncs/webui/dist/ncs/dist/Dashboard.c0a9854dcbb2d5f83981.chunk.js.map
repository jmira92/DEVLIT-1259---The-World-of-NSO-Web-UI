{"version":3,"file":"Dashboard.c0a9854dcbb2d5f83981.chunk.js","mappings":"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","sources":["webpack://webui/./packages/core/utils/list.js","webpack://webui/./src/Common/Components/DataWidget/PercentageItem.jsx","webpack://webui/./src/Dashboard/Dashboard.jsx","webpack://webui/./src/Dashboard/DashboardStyles.js","webpack://webui/./src/Dashboard/DeviceWidgetContainer.jsx","webpack://webui/./src/Dashboard/ServiceDeploymentWidgetContainer.jsx","webpack://webui/./src/Dashboard/ServiceInstancesWidgetContainer.jsx","webpack://webui/./src/Dashboard/SessionWidgetContainer.jsx","webpack://webui/./src/Dashboard/static/Cloud.jsx","webpack://webui/./src/Dashboard/static/Connections.jsx","webpack://webui/./src/Dashboard/static/Terminal.jsx","webpack://webui/./src/Dashboard/static/User.jsx","webpack://webui/./src/modules/devices/actions.js","webpack://webui/./src/modules/globalSettings/actions.js","webpack://webui/./src/modules/sessions/actions.js","webpack://webui/./src/modules/sessions/paths.js","webpack://webui/./src/modules/sessions/selectors.js"],"sourcesContent":["import * as S from '../schema';\nimport { quoteKey } from './key';\n\nexport const sortRows = (rows, sortOrder) => {\n    if (!sortOrder || rows.length < 2) return rows;\n\n    const { columnKey, isDesc } = sortOrder;\n    const ord = isDesc ? -1 : 1;\n    return [...rows].sort((ad, bd) => {\n        let a = ad.data[columnKey];\n        let b = bd.data[columnKey];\n        if (typeof a === 'string' && typeof b === 'string') {\n            return a.localeCompare(b) * ord;\n        }\n\n        if (typeof a !== typeof b) {\n            a = parseInt(a, 10) || -Infinity;\n            b = parseInt(b, 10) || -Infinity;\n        }\n\n        if (a > b) return 1 * ord;\n        if (a < b) return -1 * ord;\n        return 0;\n    });\n};\n\nexport const getColumnChildren = (schema) => {\n    const hasChildren = schema && schema.data && schema.data.children;\n    let keyNames = hasChildren && schema.data.children\n        .filter(c => ['key', 'leaf'].indexOf(S.kind(c)) > -1)\n        .map(c => ({\n            name: S.name(c),\n            kind: S.kind(c),\n            isLeafList: S.isLeafList(c),\n            isEmptyLeaf: S.isEmptyLeaf(c),\n        }));\n    const keys = schema && schema.data && S.keyNames(schema);\n    if (keys && (!keyNames || keyNames.length === 0)) {\n        keyNames = keys.map(name => ({\n            name,\n            kind: 'key',\n            isLeafList: false,\n            isEmptyLeaf: false,\n        }));\n    }\n    return keyNames;\n};\n\nexport const getDataFromValueItems = items =>\n    Object.entries(items).reduce((data, [itemName, itemValue]) => {\n        const isLeaf = itemValue.kind === 'leaf' && itemValue.value;\n        if (isLeaf) {\n            return {\n                ...data,\n                [itemName]: itemValue.value,\n            };\n        }\n        return data;\n    }, null);\n\nexport const getKeyValue = (items, skipQuotesOnKeys) => {\n    const values = Object.keys(items).reduce((acc, cur) => {\n        const curObj = items[cur];\n        if ((curObj.kind === 'key' || curObj.kind === 'leaf-list') && curObj.value !== undefined) {\n            acc.push(skipQuotesOnKeys ? curObj.value : quoteKey(curObj.value));\n        }\n        return acc;\n    }, []);\n    return values.join(' ');\n};\n\nexport const getQuerySelection = ({ isLeafList, columnChildren }) => {\n    if (isLeafList === true) {\n        return undefined;\n    }\n    return columnChildren.map(c => c.name);\n};\n\nexport const isVisibleColumn = (columnsVisibility, c) =>\n    !columnsVisibility ||\n    !(c.key in columnsVisibility) ||\n        columnsVisibility[c.key].includes('VISIBLE');\n\nexport const unzipRow = (selection, rows) => {\n    if (selection.length > 0 && rows.length > 0) {\n        return rows.map(row => (\n            selection.map(prop => (row[prop]))\n        ));\n    }\n    return [];\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { ensureNumber } from '@webui-one/core/utils/number';\n\nimport style from './DataWidgetStyles';\n\nconst PercentageItem = ({ percentage, value }) => (\n    <span data-handle=\"percentage-item\">\n        <span data-handle=\"percentage-item-value\">{value}</span>\n        {ensureNumber(percentage) > 0 && (\n            <span\n                data-handle=\"percentage-item-percentage\"\n                style={style.percentageItem.percentage}\n            >\n                {`(${percentage}%)`}\n            </span>\n        )}\n    </span>\n);\n\nPercentageItem.propTypes = {\n    value: PropTypes.number,\n    percentage: PropTypes.number,\n};\n\n\nexport default PercentageItem;\n","import React from 'react';\n\nimport HeaderContainer from 'Common/Components/Header/HeaderContainer';\nimport FooterContainer from 'Common/Components/Footer/FooterContainer';\nimport * as defaultStyles from '@webui-one/styles/ApplicationDefaultStyles';\nimport DeviceWidgetContainer from './DeviceWidgetContainer';\nimport AlarmWidgetContainer from './AlarmWidgetContainer';\nimport SessionWidgetContainer from './SessionWidgetContainer';\nimport ServiceDeploymentWidgetContainer from './ServiceDeploymentWidgetContainer';\nimport ServiceInstancesWidgetContainer from './ServiceInstancesWidgetContainer';\nimport style from './DashboardStyles';\n\nconst Dashboard = () => (\n    <div style={style.application}>\n        <HeaderContainer>\n            <div style={defaultStyles.shadow} />\n        </HeaderContainer>\n        <div style={style.scrollingContainer}>\n            <div style={style.widgetsContainer}>\n                <DeviceWidgetContainer />\n                <AlarmWidgetContainer />\n                <SessionWidgetContainer />\n                <ServiceInstancesWidgetContainer />\n                <ServiceDeploymentWidgetContainer />\n            </div>\n        </div>\n        <FooterContainer />\n    </div>\n);\n\nexport default Dashboard;\n","import * as defaultStyles from '@webui-one/styles/ApplicationDefaultStyles';\n\nexport default {\n    application: {\n        ...defaultStyles.application,\n        height: '100vh',\n        display: 'flex',\n        flexFlow: 'column',\n        backgroundImage: defaultStyles.pattern2,\n    },\n    scrollingContainer: {\n        overflow: 'auto',\n        flexGrow: '1',\n    },\n    widgetsContainer: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        maxWidth: defaultStyles.maxWidth,\n        margin: '0 auto',\n    },\n};\n\nexport {\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport DataWidget from 'Common/Components/DataWidget/DataWidget';\nimport * as style from '@webui-one/styles/ApplicationDefaultStyles';\nimport { getDevices } from 'modules/devices/actions';\nimport * as nodesActionTypes from 'modules/nodes/actionTypes';\nimport {\n    COLUMNS,\n    QUERY_SELECTION,\n    deviceListPath,\n} from 'modules/devices/paths';\nimport {\n    deviceListIsLoading,\n    filteredDeviceCountSelector,\n    countDevicesByType,\n} from 'modules/devices/selectors';\nimport {\n    ipcSubscribeAction,\n    ipcUnsubscribeAction,\n} from 'modules/ipc/actions';\nimport {\n    subscribeChangesAction,\n    unsubscribeChangesAction,\n} from 'modules/comet/actions';\nimport { debounceFunction } from '@webui-one/core/utils/async';\nimport {\n    isDeviceListItem,\n    isDeviceNedId,\n} from '@webui-one/core/utils/path';\nimport Connections from './static/Connections';\n\nconst isDeviceOperation = (keypath, isDeleteOrCreate) => {\n    if (isDeviceListItem(keypath) && isDeleteOrCreate) {\n        return true;\n    }\n    if (isDeviceNedId(keypath)) {\n        return true;\n    }\n    return false;\n};\n\nclass DeviceWidgetContainer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onCometUpdate = this.onCometUpdate.bind(this);\n        this.onIpcUpdate = this.onIpcUpdate.bind(this);\n        this.callGetDevices = debounceFunction({\n            milliseconds: 500,\n            waitWhileSpammed: true,\n        });\n    }\n\n    componentDidMount() {\n        const {\n            onLoad,\n            onSubscribe,\n            onSubscribeIpc,\n        } = this.props;\n        onSubscribe(this.onCometUpdate);\n        onSubscribeIpc(this.onIpcUpdate);\n        onLoad();\n    }\n\n    componentWillUnmount() {\n        const {\n            onUnsubscribe,\n            onUnsubscribeIpc,\n        } = this.props;\n        onUnsubscribe(this.onCometUpdate);\n        onUnsubscribeIpc(this.onIpcUpdate);\n    }\n\n    onCometUpdate(notification) {\n        const { onLoad } = this.props;\n        const shouldUpdateDevices = notification.changes.some(change => (\n            isDeviceOperation(\n                change.keypath,\n                change.op === 'created' || change.op === 'deleted',\n            )\n        ), false);\n        if (shouldUpdateDevices) {\n            this.callGetDevices(onLoad);\n        }\n    }\n\n    onIpcUpdate(message) {\n        const { onLoad } = this.props;\n        const messageTypes = [\n            nodesActionTypes.CREATE,\n            nodesActionTypes.DELETE,\n        ];\n        const shouldUpdateDevices = isDeviceOperation(\n            message.path,\n            messageTypes.includes(message.type),\n        );\n        if (shouldUpdateDevices) {\n            this.callGetDevices(onLoad);\n        }\n    }\n\n    render() {\n        const { count, items, isLoading } = this.props;\n\n        return (\n            <DataWidget\n                items={items}\n                symbol={<Connections color={style.textColor3} />}\n                name=\"devices-connected\"\n                title={'DEVICES CONNECTED'}\n                isLoading={isLoading}\n            >\n                {count}\n            </DataWidget>\n        );\n    }\n}\n\n\nconst mapDispatchToProps = dispatch => ({\n    onLoad() {\n        const selection = QUERY_SELECTION.filter(c => c !== COLUMNS.SERVICES);\n        return dispatch(getDevices({ selection }));\n    },\n    onSubscribe(handler) {\n        dispatch(subscribeChangesAction(deviceListPath, handler));\n    },\n    onSubscribeIpc(handler) {\n        dispatch(ipcSubscribeAction(handler, []));\n    },\n    onUnsubscribe(handler) {\n        dispatch(unsubscribeChangesAction(deviceListPath, handler));\n    },\n    onUnsubscribeIpc(handler) {\n        dispatch(ipcUnsubscribeAction(handler));\n    },\n});\n\nDeviceWidgetContainer.propTypes = {\n    count: PropTypes.number,\n    items: PropTypes.arrayOf(Object),\n    onLoad: PropTypes.func.isRequired,\n    isLoading: PropTypes.bool,\n    onSubscribe: PropTypes.func.isRequired,\n    onSubscribeIpc: PropTypes.func.isRequired,\n    onUnsubscribe: PropTypes.func.isRequired,\n    onUnsubscribeIpc: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n    count: filteredDeviceCountSelector(state),\n    items: countDevicesByType(state),\n    isLoading: !!deviceListIsLoading(state),\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(DeviceWidgetContainer);\n\nexport {\n    DeviceWidgetContainer as _DeviceWidgetContainer,\n    mapDispatchToProps as _mapDispatchToProps,\n    mapStateToProps as _mapStateToProps,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport DataWidget from 'Common/Components/DataWidget/DataWidget';\nimport PercentageItem from 'Common/Components/DataWidget/PercentageItem';\nimport * as style from '@webui-one/styles/ApplicationDefaultStyles';\nimport { getServiceDeployments } from 'modules/services/actions';\nimport {\n    selectServiceDeployments,\n    selectServiceDeploymentCount,\n    selectServiceDeploymentsIsLoading,\n} from 'modules/services/selectors';\nimport { translate, Messages } from 'modules/intl';\nimport { ensureNumber } from '@webui-one/core/utils/number';\nimport Cloud from './static/Cloud';\n\nconst SERVICEDEPLOYMENT = Messages.DASHBOARD.SERVICEDEPLOYMENT;\n\nconst percentage = (value, total) => Math.round(((value / total) || 0) * 100);\nexport const deploymentPercentage = (count, total) => {\n    const value = ensureNumber(count);\n    return (\n        <PercentageItem\n            value={value}\n            percentage={percentage(value, total)}\n        />\n    );\n};\n\nconst getItems = (runningTotal, completedTotal, deployments, isLoading) => (\n    isLoading\n        ? []\n        : [\n            {\n                name: translate(SERVICEDEPLOYMENT.RUNNING),\n                value: deploymentPercentage(deployments.running),\n            },\n            {\n                name: translate(SERVICEDEPLOYMENT.JEOPARDIZED),\n                value: deploymentPercentage(deployments.jeopardized, runningTotal),\n            },\n            {\n                name: translate(SERVICEDEPLOYMENT.VIOLATED),\n                value: deploymentPercentage(deployments.violated, completedTotal),\n            },\n            {\n                name: translate(SERVICEDEPLOYMENT.SUCCESSFUL),\n                value: deploymentPercentage(deployments.successful, completedTotal),\n            },\n        ]\n);\n\nclass ServiceDeploymentWidgetContainer extends React.Component {\n    componentDidMount() {\n        const { onLoad } = this.props;\n        onLoad();\n    }\n\n    render() {\n        const { count, deployments, isLoading } = this.props;\n        const runningTotal = ensureNumber(deployments.running) +\n                             ensureNumber(deployments.jeopardized);\n        const completedTotal = ensureNumber(deployments.successful) +\n                               ensureNumber(deployments.violated);\n\n        return (\n            <DataWidget\n                items={getItems(runningTotal, completedTotal, deployments, isLoading)}\n                symbol={<Cloud color={style.textColor3} />}\n                name=\"service-deployments\"\n                title={translate(SERVICEDEPLOYMENT.TITLE)}\n                isLoading={isLoading}\n            >\n                {count}\n            </DataWidget>\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onLoad() {\n        return dispatch(getServiceDeployments());\n    },\n});\n\nServiceDeploymentWidgetContainer.propTypes = {\n    count: PropTypes.number,\n    deployments: PropTypes.shape({\n        jeopardized: PropTypes.number,\n        ontime: PropTypes.number,\n        running: PropTypes.number,\n        successful: PropTypes.number,\n        violated: PropTypes.number,\n    }),\n    onLoad: PropTypes.func.isRequired,\n    isLoading: PropTypes.bool,\n};\n\nconst mapStateToProps = state => ({\n    count: selectServiceDeploymentCount(state),\n    deployments: selectServiceDeployments(state),\n    isLoading: selectServiceDeploymentsIsLoading(state),\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(ServiceDeploymentWidgetContainer);\n\nexport {\n    mapDispatchToProps as _mapDispatchToProps,\n    mapStateToProps as _mapStateToProps,\n    ServiceDeploymentWidgetContainer as _ServiceDeploymentWidgetContainer,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport * as style from '@webui-one/styles/ApplicationDefaultStyles';\nimport DataWidget from 'Common/Components/DataWidget/DataWidget';\nimport { getLinkWithPath } from 'ServiceManager';\nimport { getServiceInstanceCount } from 'modules/services/actions';\nimport {\n    selectServiceInstanceCountIsLoading,\n    selectServiceCountTotal,\n    selectServiceCountByType,\n    selectServicePointsKeypaths,\n} from 'modules/services/selectors';\nimport {\n    subscribeChangesAction,\n    unsubscribeChangesAction,\n} from 'modules/comet/actions';\nimport * as nodesActionTypes from 'modules/nodes/actionTypes';\nimport {\n    ipcSubscribeAction,\n    ipcUnsubscribeAction,\n} from 'modules/ipc/actions';\nimport { stripListKeys } from '@webui-one/core/utils/path';\nimport { debounceFunction } from '@webui-one/core/utils/async';\nimport Terminal from './static/Terminal';\n\nclass ServiceInstancesWidgetContainer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onCometUpdate = this.onCometUpdate.bind(this);\n        this.onIpcUpdate = this.onIpcUpdate.bind(this);\n        this.callGetServices = debounceFunction({\n            milliseconds: 500,\n            waitWhileSpammed: true,\n        });\n    }\n\n    componentDidMount() {\n        const {\n            onLoad,\n            onSubscribe,\n            onSubscribeIpc,\n            servicePoints,\n        } = this.props;\n        if (servicePoints.length > 0) {\n            onSubscribe(servicePoints, this.onCometUpdate);\n        }\n        onLoad();\n        onSubscribeIpc(this.onIpcUpdate);\n    }\n\n    componentDidUpdate(prevProps) {\n        const {\n            servicePoints: prevPoints,\n        } = prevProps;\n        const {\n            onSubscribe,\n            onUnsubscribe,\n            servicePoints,\n        } = this.props;\n        const toRemove = prevPoints\n            .filter(point => !servicePoints.includes(point));\n        const toAdd = servicePoints\n            .filter(point => !prevPoints.includes(point));\n        if (toAdd.length > 0) {\n            onSubscribe(toAdd, this.onCometUpdate);\n        }\n        if (toRemove.length > 0) {\n            onUnsubscribe(toRemove, this.onCometUpdate);\n        }\n    }\n\n    componentWillUnmount() {\n        const {\n            onUnsubscribe,\n            onUnsubscribeIpc,\n            servicePoints,\n        } = this.props;\n        if (servicePoints.length > 0) {\n            onUnsubscribe(servicePoints, this.onCometUpdate);\n        }\n        onUnsubscribeIpc(this.onIpcUpdate);\n    }\n\n    onCometUpdate(notification) {\n        const { onLoad, servicePoints } = this.props;\n        const points = servicePoints;\n        const operations = ['created', 'deleted'];\n        const shouldUpdateServices = notification.changes\n            .some(({ op, keypath }) => (\n                operations.includes(op) &&\n                    points.find(point => keypath.startsWith(point))\n            ), false);\n        if (shouldUpdateServices) {\n            this.callGetServices(onLoad);\n        }\n    }\n\n    onIpcUpdate(message) {\n        const { onLoad, servicePoints } = this.props;\n        const messagePath = stripListKeys(message.path);\n        const servicePaths = Object.values(servicePoints);\n        if (servicePaths.includes(messagePath)) {\n            this.callGetServices(onLoad);\n        }\n    }\n\n    render() {\n        const { count, items, isLoading } = this.props;\n\n        const instances = items.map(item => ({\n            ...item,\n            path: getLinkWithPath(item.servicePoint),\n        }));\n\n        return (\n            <DataWidget\n                items={instances}\n                symbol={<Terminal color={style.textColor3} />}\n                name=\"service-instances\"\n                title={'SERVICE INSTANCES'}\n                isLoading={isLoading}\n            >\n                {count}\n            </DataWidget>\n        );\n    }\n}\n\nconst actionTypes = [\n    nodesActionTypes.CREATE,\n    nodesActionTypes.DELETE,\n];\n\nconst mapDispatchToProps = dispatch => ({\n    onLoad() {\n        return dispatch(getServiceInstanceCount());\n    },\n    onSubscribe(paths, handler) {\n        dispatch(subscribeChangesAction(paths, handler));\n    },\n    onSubscribeIpc(handler) {\n        dispatch(ipcSubscribeAction(handler, actionTypes));\n    },\n    onUnsubscribe(paths, handler) {\n        dispatch(unsubscribeChangesAction(paths, handler));\n    },\n    onUnsubscribeIpc(handler) {\n        dispatch(ipcUnsubscribeAction(handler));\n    },\n});\n\nServiceInstancesWidgetContainer.propTypes = {\n    count: PropTypes.number,\n    items: PropTypes.arrayOf(Object),\n    onLoad: PropTypes.func.isRequired,\n    onSubscribe: PropTypes.func.isRequired,\n    onSubscribeIpc: PropTypes.func.isRequired,\n    onUnsubscribe: PropTypes.func.isRequired,\n    onUnsubscribeIpc: PropTypes.func.isRequired,\n    isLoading: PropTypes.bool,\n    router: PropTypes.shape({}),\n    servicePoints: PropTypes.arrayOf(PropTypes.string),\n};\n\nconst mapStateToProps = state => ({\n    count: selectServiceCountTotal(state),\n    items: selectServiceCountByType(state),\n    isLoading: selectServiceInstanceCountIsLoading(state),\n    servicePoints: selectServicePointsKeypaths(state),\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(ServiceInstancesWidgetContainer);\n\nexport {\n    ServiceInstancesWidgetContainer as _ServiceInstancesWidgetContainer,\n    mapDispatchToProps as _mapDispatchToProps,\n    mapStateToProps as _mapStateToProps,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport * as style from '@webui-one/styles/ApplicationDefaultStyles';\nimport DataWidget from 'Common/Components/DataWidget/DataWidget';\nimport { isObject } from '@webui-one/core/utils/object';\nimport { getUserSessionsThunk } from 'modules/sessions/actions';\nimport {\n    selectIsLoading,\n    selectUserSessionCount,\n} from 'modules/sessions/selectors';\nimport {\n    subscribeMessageHandlerAction,\n    unsubscribeMessageHandlerAction,\n} from 'modules/comet/actions';\nimport { debounceFunction } from '@webui-one/core/utils/async';\nimport User from './static/User';\n\nclass SessionWidgetContainer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onCometUpdate = this.onCometUpdate.bind(this);\n        this.callUpdate = debounceFunction({\n            milliseconds: 500,\n            waitWhileSpammed: true,\n        });\n    }\n\n    componentDidMount() {\n        const { onLoad, onSubscribe } = this.props;\n        onSubscribe(this.onCometUpdate);\n        onLoad();\n    }\n\n    componentWillUnmount() {\n        const { onUnsubscribe } = this.props;\n        onUnsubscribe(this.onCometUpdate);\n    }\n\n    onCometUpdate(message) {\n        const { onLoad } = this.props;\n        if (isObject(message) && (\n            message.new_user !== undefined ||\n            message.del_user !== undefined\n        )) {\n            this.callUpdate(onLoad);\n        }\n    }\n\n    render() {\n        const { items, isLoading } = this.props;\n        const value = items.reduce((acc, item) => acc + item.value, 0);\n\n        return (\n            <DataWidget\n                items={items}\n                symbol={<User color={style.textColor3} />}\n                name=\"user-sessions\"\n                title={'USER SESSIONS'}\n                isLoading={isLoading}\n            >\n                {value}\n            </DataWidget>\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onLoad() {\n        return dispatch(getUserSessionsThunk());\n    },\n    onSubscribe(handler) {\n        dispatch(subscribeMessageHandlerAction(handler));\n    },\n    onUnsubscribe(handler) {\n        dispatch(unsubscribeMessageHandlerAction(handler));\n    },\n});\n\nSessionWidgetContainer.propTypes = {\n    items: PropTypes.arrayOf(Object),\n    onLoad: PropTypes.func.isRequired,\n    onSubscribe: PropTypes.func.isRequired,\n    onUnsubscribe: PropTypes.func.isRequired,\n    isLoading: PropTypes.bool,\n};\n\nconst mapStateToProps = state => ({\n    items: selectUserSessionCount(state),\n    isLoading: selectIsLoading(state),\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(SessionWidgetContainer);\n\nexport {\n    SessionWidgetContainer as _SessionWidgetContainer,\n    mapDispatchToProps as _mapDispatchToProps,\n    mapStateToProps as _mapStateToProps,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Cloud = ({ color }) => (\n    <svg\n        version=\"1.2\"\n        baseProfile=\"tiny\"\n        x=\"0px\"\n        y=\"0px\"\n        viewBox=\"0 0 23 23\"\n        xmlSpace=\"preserve\"\n    >\n        <path\n            id=\"icon_x2F_Deploy\"\n            fill={color}\n            d=\"M14,19.5V16h2c0.1,0,0.2,0,0.3-0.1c0.2-0.2,0.3-0.5,0.1-0.7l-3.6-4.7c-0.1-0.1-0.1-0.1-0.2-0.2c-0.4-0.3-1.1-0.3-1.4,0.2l-3.6,4.7c-0.1,0.1-0.1,0.2-0.1,0.3C7.5,15.8,7.7,16,8,16h2v3.5H3.5c-2.2-0.1-4-2-4-4.2s1.8-4.1,4.1-4.2c-0.1-0.1-0.1-0.4-0.1-0.5c0-2.2,1.8-4,4-4c0.7,0,1.3,0.2,1.9,0.4c0.7-2,2.6-3.4,4.9-3.4c2.9,0,5.2,2.3,5.2,5.2v0.4c2.3,0.6,4,2.6,4,5.1c0,2.9-2.2,5.1-5,5.2H14z\"\n        />\n    </svg>\n);\n\nCloud.propTypes = {\n    color: PropTypes.string,\n};\n\nCloud.defaultProps = {\n    color: 'red',\n};\n\nexport default Cloud;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Connections = ({ color }) => (\n    <svg\n        version=\"1.2\"\n        baseProfile=\"tiny\"\n        id=\"Layer_1\"\n        x=\"0px\"\n        y=\"0px\"\n        viewBox=\"0 0 23 23\"\n        xmlSpace=\"preserve\"\n    >\n        <path\n            fill={color}\n            d=\"M8.6,7.7C8.3,7.9,8.1,8.2,7.9,8.4L6.5,7.1C6.2,7.3,5.8,7.4,5.4,7.4c-1.1,0-2.1-1-2.1-2.2s0.9-2.2,2.1-2.2s2.1,1,2.1,2.2c0,0.4-0.1,0.7-0.3,1L8.6,7.7z\"\n        />\n        <path\n            fill={color}\n            d=\"M14.5,7.5c-0.3-0.2-0.6-0.4-0.9-0.6l1.9-3.2c-0.4-0.4-0.6-0.9-0.6-1.5C14.9,1,15.8,0,16.9,0C18.1,0,19,1,19,2.2c0,1.2-0.9,2.2-2.1,2.2c-0.2,0-0.4,0-0.6-0.1L14.5,7.5z\"\n        />\n        <path\n            fill={color}\n            d=\"M20.9,10.2c1.1,0,2.1,1,2.1,2.2c0,1.2-0.9,2.2-2.1,2.2c-1,0-1.9-0.8-2-1.8l-2.6-0.3c0.1-0.3,0.1-0.7,0.1-1c0,0,0,0,0-0.1l2.6,0.3C19.3,10.8,20,10.2,20.9,10.2z\"\n        />\n        <path\n            fill={color}\n            d=\"M13.8,18.7c1.1,0,2,1,2,2.2c0,1.2-0.9,2.2-2.1,2.2c-1.1,0-2.1-1-2.1-2.2c0-0.8,0.5-1.5,1.1-1.9l-0.6-2.6c0.4,0,0.7-0.1,1-0.2L13.8,18.7z\"\n        />\n        <path\n            fill={color}\n            d=\"M7,12.5c0.1,0.4,0.2,0.7,0.3,1l-3.2,1.1c0,0,0,0.1,0,0.1c0,1.2-0.9,2.2-2.1,2.2c-1.1,0-2.1-1-2.1-2.2c0-1.2,0.9-2.2,2.1-2.2c0.7,0,1.4,0.4,1.7,1L7,12.5z\"\n        />\n        <ellipse fill={color} cx=\"11.7\" cy=\"11.4\" rx=\"3.6\" ry=\"3.7\" />\n    </svg>\n);\n\nConnections.propTypes = {\n    color: PropTypes.string,\n};\n\nConnections.defaultProps = {\n    color: 'red',\n};\n\nexport default Connections;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Terminal = ({ color }) => (\n    <svg\n        version=\"1.2\"\n        baseProfile=\"tiny\"\n        id=\"Layer_1\"\n        x=\"0px\"\n        y=\"0px\"\n        viewBox=\"0 0 23 23\"\n        xmlSpace=\"preserve\"\n    >\n        <path\n            id=\"Combined-Shape\"\n            fill={color}\n            d=\"M19.4,3H3.6C3,3,2.5,3.5,2.5,4.1v10.6c0,0.6,0.5,1.1,1.1,1.1h15.9c0.6,0,1.1-0.5,1.1-1.1V4.1C20.5,3.5,20,3,19.4,3L19.4,3z M18.4,13.6H4.6V5.1h13.8V13.6z M15.5,18.4c0.4,0,0.8,0.4,0.8,0.8S15.9,20,15.5,20H7.5c-0.4,0-0.8-0.4-0.8-0.8s0.4-0.8,0.8-0.8l4-0.5L15.5,18.4z\"\n        />\n    </svg>\n);\n\nTerminal.propTypes = {\n    color: PropTypes.string,\n};\n\nTerminal.defaultProps = {\n    color: 'red',\n};\n\nexport default Terminal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst User = ({ color }) => (\n    <svg\n        version=\"1.2\"\n        baseProfile=\"tiny\"\n        x=\"0px\"\n        y=\"0px\"\n        viewBox=\"0 0 23 23\"\n        xmlSpace=\"preserve\"\n    >\n        <path\n            fill={color}\n            d=\"M19.2,16.4l-4.9-2.9c-0.1-0.1-0.3-0.3-0.3-0.4l-0.6-1.3c0.8-0.6,1.2-2.5,1.2-3.5V6.2c0-1.7-1.3-3.2-3.1-3.2C9.8,3,8.4,4.4,8.4,6.2v2.1c0,1.1,0.4,2.9,1.2,3.5l-0.6,1.3c0,0.2-0.2,0.3-0.3,0.4l-4.9,2.9c-0.1,0.1-0.3,0.3-0.3,0.4l-0.4,2.7C3,19.7,3.2,20,3.5,20c0,0,0,0,0.1,0h15.9c0.3,0,0.5-0.2,0.5-0.5c0,0,0,0,0-0.1l-0.4-2.7C19.5,16.6,19.3,16.4,19.2,16.4z\"\n        />\n    </svg>\n);\n\nUser.propTypes = {\n    color: PropTypes.string,\n};\n\nUser.defaultProps = {\n    color: 'red',\n};\n\nexport default User;\n","import {\n    createAllowExists as _createAllowExists,\n    query as jsonrpcQuery,\n    jsonrpcBatch as _jsonrpcBatch,\n} from '@webui-one/core/jsonrpc';\nimport {\n    difference,\n    flatten,\n    intersect,\n    isEmpty,\n    isNonEmptyArray,\n    uniq,\n} from '@webui-one/core/utils/array';\nimport {\n    getSchema as _getSchema,\n} from 'modules/schemas/actions';\nimport {\n    query as _query,\n} from 'modules/nodes/actions';\nimport {\n    createDisallowExistsThunk as _createDisallowExistsThunk,\n} from 'modules/nodes/thunks';\nimport { read, write } from 'modules/transactions/actions';\nimport * as actionTypes from './actionTypes';\nimport {\n    QUERY_SELECTION,\n    deviceListPath,\n    devicesRootPath,\n    getDeviceGroupDeviceListDevicePath,\n    getDeviceGroupDeviceListPath,\n} from './paths';\nimport {\n    selectedDeviceRowsSelector,\n} from './selectors';\n\nexport const selectDeviceAction = (isSelected, deviceNames) => ({\n    type: actionTypes.DEVICES_SELECT,\n    deviceNames,\n    isSelected,\n});\n\nexport const addDevicesToGroupStartAction = group => ({\n    type: actionTypes.ADD_DEVICES_TO_GROUP_START,\n    group,\n});\n\nexport const addDevicesToGroupCompleteAction = (group, value) => ({\n    type: actionTypes.ADD_DEVICES_TO_GROUP_COMPLETE,\n    group,\n    value,\n});\n\nexport const addDevicesToGroupErrorAction = (group, error) => ({\n    type: actionTypes.ADD_DEVICES_TO_GROUP_ERROR,\n    group,\n    error,\n});\n\nexport const labelAddAction = label => ({\n    type: actionTypes.LABEL_ADD,\n    label,\n});\n\nexport const labelRemoveAction = label => ({\n    type: actionTypes.LABEL_REMOVE,\n    label,\n});\n\nexport const loadDeviceGroupsStartAction = () => ({\n    type: actionTypes.LOAD_DEVICE_GROUPS_START,\n});\n\nexport const loadDeviceGroupsCompleteAction = groups => ({\n    type: actionTypes.LOAD_DEVICE_GROUPS_COMPLETE,\n    groups,\n});\n\nexport const loadDeviceGroupsErrorAction = error => ({\n    type: actionTypes.LOAD_DEVICE_GROUPS_ERROR,\n    error,\n});\n\nexport const loadModulesStartAction = path => ({\n    type: actionTypes.LOAD_MODULES_START,\n    path,\n});\n\nexport const loadModulesCompleteAction = (path, result) => ({\n    type: actionTypes.LOAD_MODULES_COMPLETE,\n    path,\n    result,\n});\n\nexport const loadModulesErrorAction = (path, error) => ({\n    type: actionTypes.LOAD_MODULES_ERROR,\n    path,\n    error,\n});\n\nexport const removeDevicesFromGroupCompleteAction = (group, devices) => ({\n    type: actionTypes.REMOVE_DEVICES_FROM_GROUP_COMPLETE,\n    devices,\n    group,\n});\n\nexport const removeDevicesFromGroupErrorAction = (group, error) => ({\n    type: actionTypes.REMOVE_DEVICES_FROM_GROUP_ERROR,\n    group,\n    error,\n});\n\nexport const removeDevicesFromGroupStartAction = (group, error) => ({\n    type: actionTypes.REMOVE_DEVICES_FROM_GROUP_START,\n    group,\n    error,\n});\n\nexport const gettingDevicesStart = () => ({\n    type: actionTypes.GETTING_DEVICES_START,\n});\nexport const gettingDevicesComplete = () => ({\n    type: actionTypes.GETTING_DEVICES_COMPLETE,\n});\n\nexport const loadDeviceGroupsForDevicesCompleteAction = groups => ({\n    type: actionTypes.LOAD_DEVICE_GROUPS_FOR_DEVICES_COMPLETE,\n    groups,\n});\nexport const loadDeviceGroupsForDevicesErrorAction = error => ({\n    type: actionTypes.LOAD_DEVICE_GROUPS_FOR_DEVICES_ERROR,\n    error,\n});\nexport const loadDeviceGroupsForDevicesStartAction = () => ({\n    type: actionTypes.LOAD_DEVICE_GROUPS_FOR_DEVICES_START,\n});\nexport const setDeviceExpandedAction = (path, column, isExpanded) => ({\n    type: actionTypes.SET_EXPANDED_ROW,\n    path,\n    column,\n    isExpanded,\n});\n\nexport const getDevices = ({\n    chunkSize,\n    offset,\n    columnKey,\n    sortorder,\n    xpathExpression,\n    selection = QUERY_SELECTION,\n    funcs: {\n        getSchema = _getSchema,\n        query = _query,\n    } = {},\n} = {}) => async (dispatch) => {\n    await dispatch(gettingDevicesStart());\n    await dispatch(getSchema({\n        path: devicesRootPath,\n        params: {\n            levels: -1,\n            stop_on_list: true,\n        },\n        reload: true,\n    }));\n\n    const querySelection = uniq([\n        'name',\n        ...selection,\n    ]);\n    const queryResult = await dispatch(query({\n        selection: querySelection,\n        path: deviceListPath,\n        sort: columnKey,\n        sortOrder: sortorder,\n        initialOffset: offset,\n        chunkSize,\n        result_as: 'string',\n        xpathExpr: xpathExpression,\n        contextNode: devicesRootPath,\n    }));\n\n    await dispatch(gettingDevicesComplete());\n    return queryResult;\n};\n\nexport const loadDeviceGroups = ({\n    funcs: {\n        query = jsonrpcQuery,\n        readThunk = read,\n    } = {},\n} = {}) => (\n    async (dispatch) => {\n        dispatch(loadDeviceGroupsStartAction());\n        try {\n            const { th } = await dispatch(readThunk());\n            const xpathExpr = 'device-group[count(device-name) > 0]';\n            const result = await query({\n                th,\n                selection: ['name'],\n                contextNode: '/ncs:devices',\n                xpathExpr,\n            });\n            const groups = flatten(result.results);\n            return dispatch(loadDeviceGroupsCompleteAction(groups));\n        } catch (error) {\n            return dispatch(loadDeviceGroupsErrorAction(error));\n        }\n    }\n);\n\nconst groupsForDevicesRequestMapper = th => xpathExpr => ({\n    method: 'query',\n    params: {\n        th,\n        selection: ['name'],\n        context_node: '/ncs:devices',\n        xpath_expr: xpathExpr,\n    },\n});\nexport const loadDeviceGroupsForDevices = ({\n    funcs: {\n        jsonrpcBatch = _jsonrpcBatch,\n        readThunk = read,\n        selectedDeviceRows = selectedDeviceRowsSelector,\n    } = {},\n} = {}) => (\n    async (dispatch, getState) => {\n        dispatch(loadDeviceGroupsForDevicesStartAction());\n        try {\n            const selectedDevices = selectedDeviceRows(getState())\n                .reduce((deviceNames, device) => {\n                    if (device.data.isSelected) {\n                        deviceNames.push(device.data.name);\n                    }\n                    return deviceNames;\n                }, []);\n            if (!isNonEmptyArray(selectedDevices)) {\n                return dispatch(loadDeviceGroupsForDevicesCompleteAction([]));\n            }\n            const { th } = await dispatch(readThunk());\n            const xpathExprList = selectedDevices.map(deviceName => (\n                `device-group[device-name=\"${deviceName}\"]`\n            ));\n            const requests = xpathExprList.map(groupsForDevicesRequestMapper(th));\n            const responses = await jsonrpcBatch({ requests });\n            const groups = uniq(flatten(responses.map(r => r.result.results)));\n            return dispatch(loadDeviceGroupsForDevicesCompleteAction(groups));\n        } catch (error) {\n            return dispatch(loadDeviceGroupsForDevicesErrorAction(error));\n        }\n    }\n);\n\nexport const getValueFromResult = (result) => {\n    if (!result || !result.results) return [];\n    return result.results.reduce((acc, obj) => [...acc, ...Object.values(obj)], []);\n};\n\nconst addValuesRequestMapper = (group, th) => deviceName => ({\n    method: 'create',\n    params: {\n        path: getDeviceGroupDeviceListDevicePath(group, deviceName),\n        th,\n    },\n});\n\nconst addValues = async (group, valuesToAdd, th, {\n    funcs: {\n        jsonrpcBatch = _jsonrpcBatch,\n        query = jsonrpcQuery,\n    } = {},\n} = {}) => {\n    const path = getDeviceGroupDeviceListPath(group);\n    const result = await query({ selection: undefined, path, th });\n    const value = getValueFromResult(result);\n    const minValuesToAdd = difference(valuesToAdd, value);\n    if (isEmpty(minValuesToAdd)) return value;\n    const requests = minValuesToAdd.map(addValuesRequestMapper(group, th));\n    return jsonrpcBatch({ requests });\n};\n\nexport const addDevicesToGroup = (devices, group, {\n    funcs: {\n        addValuesFunc = addValues,\n        createAllowExists = _createAllowExists,\n        loadDeviceGroupsFunc = loadDeviceGroupsForDevices,\n        writeThunk = write,\n    } = {},\n} = {}) => (\n    async (dispatch) => {\n        dispatch(addDevicesToGroupStartAction(group));\n        const groupPath = getDeviceGroupDeviceListPath(group);\n\n        try {\n            const { th } = await dispatch(writeThunk());\n            await createAllowExists({ path: groupPath, th });\n            const createResult = await addValuesFunc(group, devices, th);\n            if (isNonEmptyArray(createResult) && createResult[0].error) {\n                throw createResult[0].error;\n            }\n            await dispatch(loadDeviceGroupsFunc());\n            return dispatch(addDevicesToGroupCompleteAction(group));\n        } catch (error) {\n            return dispatch(addDevicesToGroupErrorAction(group, error));\n        }\n    }\n);\n\nconst deleteRequestMapper = (path, th) => deviceName => ({\n    method: 'delete',\n    params: {\n        th,\n        path: `${path}{${deviceName}}`,\n    },\n});\nexport const removeDevicesFromGroup = (devices, group, {\n    funcs: {\n        loadDeviceGroupsFunc = loadDeviceGroupsForDevices,\n        query = jsonrpcQuery,\n        jsonrpcBatch = _jsonrpcBatch,\n        writeThunk = write,\n    } = {},\n} = {}) => (\n    async (dispatch) => {\n        dispatch(removeDevicesFromGroupStartAction(group));\n        try {\n            const { th } = await dispatch(writeThunk());\n            const path = getDeviceGroupDeviceListPath(group);\n            const result = await query({\n                path,\n                th,\n            });\n            const queryValue = getValueFromResult(result);\n            const valuesToRm = intersect(queryValue, devices);\n            if (!isNonEmptyArray(valuesToRm)) {\n                // Skip deleting if the devices do not belong\n                // to the device-group\n                return dispatch(\n                    removeDevicesFromGroupCompleteAction(group, []),\n                );\n            }\n            const requests = valuesToRm.map(deleteRequestMapper(path, th));\n            const deleteResult = await jsonrpcBatch({ requests });\n            if (isNonEmptyArray(deleteResult) && deleteResult[0].error) {\n                throw deleteResult[0].error;\n            }\n            await dispatch(loadDeviceGroupsFunc());\n            return dispatch(removeDevicesFromGroupCompleteAction(group, valuesToRm));\n        } catch (error) {\n            return dispatch(removeDevicesFromGroupErrorAction(group, error));\n        }\n    }\n);\n\nconst deviceRE = /^(\\/ncs:devices\\/device\\{([^}]+)\\}).*/;\n\nexport const loadModules = (configPath, {\n    funcs: {\n        readThunk = read,\n        query = jsonrpcQuery,\n    } = {},\n} = {}) => (\n    (dispatch) => {\n        const match = deviceRE.exec(configPath);\n        if (!match) return Promise.resolve();\n        const path = `${match[1]}/module`;\n        dispatch(loadModulesStartAction(path));\n\n        return dispatch(readThunk()).then(({ th }) => (\n            query({ th, selection: ['name'], path })\n        )).then(result => (\n            dispatch(loadModulesCompleteAction(\n                path,\n                // NOTE(dbildstr): return array of strings instead of array of array of strings\n                result.results.map(module => module[0]),\n            ))\n        )).catch(error => (\n            dispatch(loadModulesErrorAction(path, error))\n        ));\n    }\n);\n\nexport const addDevice = ({\n    createPath,\n    chunkSize,\n    offset,\n    columnKey,\n    sortorder,\n    xpathExpression,\n    funcs: {\n        createDisallowExistsThunk = _createDisallowExistsThunk,\n        getDevicesThunk = getDevices,\n    } = {},\n}) => (\n    dispatch => dispatch(createDisallowExistsThunk({ path: createPath })).then((result) => {\n        if (result.error) return result;\n        return dispatch(\n            getDevicesThunk({\n                chunkSize,\n                offset,\n                columnKey,\n                sortorder,\n                xpathExpression,\n            }),\n        );\n    })\n);\n\nexport {\n    addValues as _addValues,\n};\n","import {\n    getValue as _getValue,\n} from '@webui-one/core/jsonrpc';\nimport { isNonEmptyString } from '@webui-one/core/utils/string';\nimport { hasProp } from '@webui-one/core/utils/object';\nimport { read as _readThunk } from 'modules/transactions/actions';\nimport * as actionTypes from './actionTypes';\n\nexport const ACTION_STATUS_INDICATOR_TIMEOUT = 'action-status-indicator-timeout';\n\nexport const getGlobalApplicationSettingsStartAction = () => ({\n    type: actionTypes.GET_GLOBAL_APPLICATION_SETTINGS_START,\n});\n\nexport const getGlobalApplicationSettingsErrorAction = ({ error }) => ({\n    type: actionTypes.GET_GLOBAL_APPLICATION_SETTINGS_ERROR,\n    error,\n});\n\nexport const getGlobalApplicationSettingsCompleteAction = ({ setting, value }) => ({\n    type: actionTypes.GET_GLOBAL_APPLICATION_SETTINGS_COMPLETE,\n    setting,\n    value,\n});\n\nexport const getGlobalApplicationSetting = ({\n    setting,\n    funcs: {\n        getValue = _getValue,\n        readThunk = _readThunk,\n    } = {},\n} = {}) => (\n    async (dispatch) => {\n        try {\n            dispatch(getGlobalApplicationSettingsStartAction());\n\n            if (!isNonEmptyString(setting)) {\n                throw new Error(`Invalid input parameter '${setting}'. Must be string`);\n            }\n\n            const { th } = await dispatch(readThunk());\n            const path = `/webui/applications/${setting}`;\n            const response = await getValue({\n                th,\n                path,\n            });\n\n            if (!hasProp(response, 'value')) {\n                return dispatch(getGlobalApplicationSettingsCompleteAction({\n                    setting,\n                    value: undefined,\n                }));\n            }\n\n            return dispatch(getGlobalApplicationSettingsCompleteAction({\n                setting,\n                value: response.value,\n            }));\n        } catch (error) {\n            return dispatch(getGlobalApplicationSettingsErrorAction({ error }));\n        }\n    }\n);\n","import jsonrpcSimple from '@webui-one/core/jsonrpc';\nimport { query as nodesQuery } from 'modules/nodes/actions';\nimport { delay } from '@webui-one/core/utils/async';\nimport * as actionTypes from './actionTypes';\nimport { USER_SESSIONS_PATH } from './paths';\n\n/*\n    Action creators.\n*/\nexport const setSessionSortOrderAction = (columnKey, isDesc) => ({\n    type: actionTypes.SESSION_SET_SORT_ORDER,\n    sortOrder: {\n        columnKey,\n        isDesc,\n    },\n});\n\nexport const getUserSessionsStartAction = () => ({\n    type: actionTypes.GET_USER_SESSIONS_START,\n});\n\nexport const getUserSessionsCompleteAction = result => ({\n    type: actionTypes.GET_USER_SESSIONS_COMPLETE,\n    result,\n});\n\nexport const getUserSessionsErrorAction = error => ({\n    type: actionTypes.GET_USER_SESSIONS_ERROR,\n    error,\n});\n\nexport const kickUserStartAction = sessionId => ({\n    type: actionTypes.KICK_USER_START,\n    sessionId,\n});\n\nexport const kickUserCompleteAction = sessionId => ({\n    type: actionTypes.KICK_USER_COMPLETE,\n    sessionId,\n});\n\nexport const kickUserErrorAction = (sessionId, error) => ({\n    type: actionTypes.KICK_USER_ERROR,\n    sessionId,\n    error,\n});\n\n/* Thunks */\nexport const getUserSessionsThunk = ({\n    funcs: {\n        query = nodesQuery,\n    } = {},\n} = {}) => (\n    (dispatch) => {\n        const selection = ['session-id', 'transport', 'username', 'source-host', 'login-time'];\n        dispatch(getUserSessionsStartAction());\n        return dispatch(query({ selection, path: USER_SESSIONS_PATH })).then(res => (\n            dispatch(getUserSessionsCompleteAction(res.result))\n        )).catch(err => (\n            dispatch(getUserSessionsErrorAction(err))\n        ));\n    }\n);\n\nexport const kickUserThunk = (\n    sessionId,\n    {\n        funcs: {\n            delayFunc = delay,\n            getUserSessions = getUserSessionsThunk,\n            jsonrpc = jsonrpcSimple,\n        } = {},\n    } = {},\n) => (\n    (dispatch) => {\n        dispatch(kickUserStartAction(sessionId));\n        return jsonrpc('kick_user', { user: Number.parseInt(sessionId, 10) })\n            .then(() =>\n                dispatch(kickUserCompleteAction(sessionId)),\n            )\n            .then(delayFunc(300))\n            .then(() =>\n                dispatch(getUserSessions()),\n            )\n            .catch(err =>\n                dispatch(kickUserErrorAction(sessionId, err)),\n            );\n    }\n);\n","// eslint-disable-next-line import/prefer-default-export\nexport const USER_SESSIONS_PATH = '/ncm:netconf-state/sessions/session';\n","import {\n    createSelector,\n    createSelectorCreator,\n    defaultMemoize,\n} from 'reselect';\nimport { isDeepEqual } from '@webui-one/core/utils/object';\nimport {\n    selectNode,\n    selectLoading,\n} from 'modules/nodes/selectors';\nimport {\n    sortRows,\n} from '@webui-one/core/utils/list';\nimport { USER_SESSIONS_PATH } from './paths';\n\nexport const selectUserSessionsNode = (state) => {\n    const node = selectNode(state, USER_SESSIONS_PATH);\n    if (!node) return undefined;\n    if (!node.rows) return undefined;\n    return node;\n};\n\nexport const selectUserSessions = createSelector(\n    selectUserSessionsNode,\n    (node) => {\n        if (!node) return undefined;\n        return node.rows.map(r => ({\n            'login-time': r['login-time'],\n            'session-id': r['session-id'],\n            'source-host': r['source-host'],\n            transport: r.transport,\n            username: r.username,\n        }));\n    },\n);\n\nexport const selectSessions = state => state.sessions;\nexport const selectSortOrder = state => (selectSessions(state) || {}).sortOrder;\nexport const selectKicked = state => (selectSessions(state) || {}).kicked;\n\nexport const selectIsLoading = state =>\n    selectLoading(state, USER_SESSIONS_PATH);\n\n// See Transport Identities in tailf-netconf-monitoring.yang\nexport const getTransportDescription = (transport) => {\n    switch (transport) {\n    case 'tncm:cli-console': return 'CLI on the console';\n    case 'tncm:cli-ssh': return 'CLI over SSH';\n    case 'tncm:cli-tcp': return 'CLI over TCP';\n    case 'tncm:webui-http': return 'WebUI over HTTP';\n    case 'tncm:webui-https': return 'WebUI over HTTPS';\n    case 'tncm:netconf-tcp': return 'NETCONF over TCP';\n    case 'tncm:snmp-udp': return 'SNMP over UDP';\n    case 'tncm:rest-http': return 'REST over HTTP';\n    case 'tncm:rest-https': return 'REST over HTTPS';\n    default: return transport;\n    }\n};\n\nexport const sessionsRowSelector = createSelectorCreator(defaultMemoize, isDeepEqual)(\n    selectUserSessions,\n    selectKicked,\n    (sessions, kicked) => {\n        if (!sessions || !kicked) return undefined;\n        return sessions.filter(s => !(s['session-id'] in kicked)).map((session) => {\n            const sessionId = session['session-id'];\n            const rowKey = sessionId;\n            return {\n                data: {\n                    ...session,\n                    kick: sessionId,\n                    transport: getTransportDescription(session.transport),\n                },\n                rowKey,\n            };\n        });\n    },\n);\n\nexport const orderedRowsSelector = createSelector(\n    sessionsRowSelector,\n    selectSortOrder,\n    (rows, sortOrder) => {\n        if (!rows) return undefined;\n        return sortRows(rows, sortOrder);\n    },\n);\n\nexport const selectUserSessionCount = createSelector(\n    selectUserSessions,\n    (sessions) => {\n        const userSessions = (sessions || []).reduce((acc, session) => {\n            const { username } = session;\n            const sum = username in acc ? acc[username] + 1 : 1;\n            return { ...acc, [username]: sum };\n        }, {});\n\n        return Object.keys(userSessions)\n            .map(name => ({ name, value: userSessions[name] }))\n            .sort((a, b) => b.value - a.value);\n    },\n);\n\n"],"names":["rows","sortOrder","length","columnKey","ord","isDesc","sort","ad","bd","a","data","b","localeCompare","parseInt","schema","keyNames","children","filter","c","indexOf","S","kind","map","name","isLeafList","isEmptyLeaf","keys","items","Object","entries","reduce","itemName","itemValue","value","skipQuotesOnKeys","acc","cur","curObj","undefined","push","quoteKey","join","columnChildren","columnsVisibility","key","includes","selection","row","prop","PercentageItem","percentage","ensureNumber","style","percentageItem","propTypes","PropTypes","number","application","defaultStyles","shadow","scrollingContainer","widgetsContainer","height","display","flexFlow","backgroundImage","pattern2","overflow","flexGrow","flexWrap","maxWidth","margin","isDeviceOperation","keypath","isDeleteOrCreate","isDeviceListItem","isDeviceNedId","DeviceWidgetContainer","React","Component","constructor","props","super","this","onCometUpdate","bind","onIpcUpdate","callGetDevices","debounceFunction","milliseconds","waitWhileSpammed","componentDidMount","onLoad","onSubscribe","onSubscribeIpc","componentWillUnmount","onUnsubscribe","onUnsubscribeIpc","notification","changes","some","change","op","message","messageTypes","nodesActionTypes","CREATE","DELETE","path","type","render","count","isLoading","symbol","color","textColor3","title","mapDispatchToProps","dispatch","QUERY_SELECTION","COLUMNS","SERVICES","getDevices","handler","subscribeChangesAction","deviceListPath","ipcSubscribeAction","unsubscribeChangesAction","ipcUnsubscribeAction","arrayOf","func","isRequired","bool","mapStateToProps","state","filteredDeviceCountSelector","countDevicesByType","deviceListIsLoading","connect","SERVICEDEPLOYMENT","Messages","DASHBOARD","total","Math","round","deploymentPercentage","getItems","runningTotal","completedTotal","deployments","translate","RUNNING","running","JEOPARDIZED","jeopardized","VIOLATED","violated","SUCCESSFUL","successful","ServiceDeploymentWidgetContainer","TITLE","getServiceDeployments","shape","ontime","selectServiceDeploymentCount","selectServiceDeployments","selectServiceDeploymentsIsLoading","ServiceInstancesWidgetContainer","callGetServices","servicePoints","componentDidUpdate","prevProps","prevPoints","toRemove","point","toAdd","points","operations","find","startsWith","messagePath","stripListKeys","values","instances","item","getLinkWithPath","servicePoint","actionTypes","getServiceInstanceCount","paths","router","string","selectServiceCountTotal","selectServiceCountByType","selectServiceInstanceCountIsLoading","selectServicePointsKeypaths","SessionWidgetContainer","callUpdate","isObject","new_user","del_user","getUserSessionsThunk","subscribeMessageHandlerAction","unsubscribeMessageHandlerAction","selectUserSessionCount","selectIsLoading","Cloud","version","baseProfile","x","y","viewBox","xmlSpace","id","fill","d","defaultProps","Connections","cx","cy","rx","ry","Terminal","User","isSelected","deviceNames","DEVICES_SELECT","addDevicesToGroupStartAction","group","ADD_DEVICES_TO_GROUP_START","addDevicesToGroupCompleteAction","ADD_DEVICES_TO_GROUP_COMPLETE","addDevicesToGroupErrorAction","error","ADD_DEVICES_TO_GROUP_ERROR","label","LABEL_ADD","LABEL_REMOVE","loadDeviceGroupsStartAction","LOAD_DEVICE_GROUPS_START","loadDeviceGroupsCompleteAction","groups","LOAD_DEVICE_GROUPS_COMPLETE","loadDeviceGroupsErrorAction","LOAD_DEVICE_GROUPS_ERROR","loadModulesStartAction","LOAD_MODULES_START","loadModulesCompleteAction","result","LOAD_MODULES_COMPLETE","loadModulesErrorAction","LOAD_MODULES_ERROR","removeDevicesFromGroupCompleteAction","devices","REMOVE_DEVICES_FROM_GROUP_COMPLETE","removeDevicesFromGroupErrorAction","REMOVE_DEVICES_FROM_GROUP_ERROR","removeDevicesFromGroupStartAction","REMOVE_DEVICES_FROM_GROUP_START","gettingDevicesStart","GETTING_DEVICES_START","gettingDevicesComplete","GETTING_DEVICES_COMPLETE","loadDeviceGroupsForDevicesCompleteAction","LOAD_DEVICE_GROUPS_FOR_DEVICES_COMPLETE","loadDeviceGroupsForDevicesErrorAction","LOAD_DEVICE_GROUPS_FOR_DEVICES_ERROR","loadDeviceGroupsForDevicesStartAction","LOAD_DEVICE_GROUPS_FOR_DEVICES_START","column","isExpanded","SET_EXPANDED_ROW","chunkSize","offset","sortorder","xpathExpression","funcs","getSchema","_getSchema","query","_query","async","devicesRootPath","params","levels","stop_on_list","reload","querySelection","uniq","queryResult","initialOffset","result_as","xpathExpr","contextNode","jsonrpcQuery","readThunk","read","th","flatten","results","groupsForDevicesRequestMapper","method","context_node","xpath_expr","loadDeviceGroupsForDevices","jsonrpcBatch","_jsonrpcBatch","selectedDeviceRows","selectedDeviceRowsSelector","getState","selectedDevices","device","isNonEmptyArray","requests","deviceName","responses","r","getValueFromResult","obj","addValuesRequestMapper","getDeviceGroupDeviceListDevicePath","addValues","valuesToAdd","getDeviceGroupDeviceListPath","minValuesToAdd","difference","isEmpty","addValuesFunc","createAllowExists","_createAllowExists","loadDeviceGroupsFunc","writeThunk","write","groupPath","createResult","deleteRequestMapper","queryValue","valuesToRm","intersect","deleteResult","deviceRE","configPath","match","exec","Promise","resolve","then","module","catch","createPath","createDisallowExistsThunk","_createDisallowExistsThunk","getDevicesThunk","getGlobalApplicationSettingsStartAction","GET_GLOBAL_APPLICATION_SETTINGS_START","getGlobalApplicationSettingsErrorAction","GET_GLOBAL_APPLICATION_SETTINGS_ERROR","getGlobalApplicationSettingsCompleteAction","setting","GET_GLOBAL_APPLICATION_SETTINGS_COMPLETE","getValue","_getValue","_readThunk","isNonEmptyString","Error","response","hasProp","SESSION_SET_SORT_ORDER","getUserSessionsStartAction","GET_USER_SESSIONS_START","getUserSessionsCompleteAction","GET_USER_SESSIONS_COMPLETE","getUserSessionsErrorAction","GET_USER_SESSIONS_ERROR","kickUserStartAction","sessionId","KICK_USER_START","kickUserCompleteAction","KICK_USER_COMPLETE","kickUserErrorAction","KICK_USER_ERROR","nodesQuery","USER_SESSIONS_PATH","res","err","delayFunc","delay","getUserSessions","jsonrpc","jsonrpcSimple","user","Number","selectUserSessionsNode","node","selectNode","selectUserSessions","createSelector","transport","username","selectSessions","sessions","selectSortOrder","selectKicked","kicked","selectLoading","getTransportDescription","sessionsRowSelector","createSelectorCreator","defaultMemoize","isDeepEqual","s","session","rowKey","kick","orderedRowsSelector","sortRows","userSessions","sum"],"sourceRoot":""}