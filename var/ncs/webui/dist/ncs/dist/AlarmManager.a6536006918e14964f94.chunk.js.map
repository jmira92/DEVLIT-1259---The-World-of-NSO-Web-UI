{"version":3,"file":"AlarmManager.a6536006918e14964f94.chunk.js","mappings":"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","sources":["webpack://webui/./src/AlarmManager/AlarmActionBtnContainer.jsx","webpack://webui/./src/AlarmManager/AlarmBatchActionsContainer.jsx","webpack://webui/./src/AlarmManager/AlarmColumnsContainer.jsx","webpack://webui/./src/AlarmManager/AlarmListContainer.jsx","webpack://webui/./src/AlarmManager/AlarmManager.jsx","webpack://webui/./src/AlarmManager/AlarmManagerStyles.js","webpack://webui/./src/AlarmManager/AlarmSummaryContainer.jsx","webpack://webui/./src/AlarmManager/AlarmSummaryStyles.js","webpack://webui/./src/AlarmManager/CheckboxFilterContainer.jsx","webpack://webui/./src/AlarmManager/ComboBoxFilterContainer.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { runAlarmActionThunk } from 'modules/alarms/actions';\nimport * as defaultStyles from '@webui-one/styles/ApplicationDefaultStyles';\n\nconst buttonStyle = {\n    backgroundColor: defaultStyles.color1,\n    color: defaultStyles.textColor4,\n    fontWeight: '300',\n    lineHeight: '1.875rem',\n    border: 'none',\n    borderRadius: '1rem',\n    cursor: 'pointer',\n    margin: '0 0.625rem',\n    padding: '0rem 1.4rem',\n    fontSize: defaultStyles.medium2,\n};\n\nconst AlarmActionBtnContainer = ({\n    action,\n    onAction,\n}) => (\n    <button\n        type=\"button\"\n        data-handle={action}\n        style={buttonStyle}\n        onClick={() => onAction(action, '/al:alarms')}\n    >\n        {action}\n    </button>\n);\n\nAlarmActionBtnContainer.propTypes = {\n    action: PropTypes.string.isRequired,\n    onAction: PropTypes.func,\n};\n\nconst mapDispatchToProps = dispatch => ({\n    onAction(action, alarmPath) {\n        dispatch(runAlarmActionThunk({ action, alarmPath }));\n    },\n});\n\nexport default connect(\n    null,\n    mapDispatchToProps,\n)(AlarmActionBtnContainer);\n\nexport {\n    AlarmActionBtnContainer as _AlarmActionBtnContainer,\n};\n","import { connect } from 'react-redux';\nimport {\n    selectSelectedAlarmRows,\n} from 'modules/alarms/selectors';\nimport { runAlarmActionThunk } from 'modules/alarms/actions';\nimport BatchActions from 'Common/Components/BatchActions/BatchActions';\n\nconst mapStateToProps = state => ({\n    rows: selectSelectedAlarmRows(state),\n    actions: ['acknowledge'],\n});\n\nconst mapDispatchToProps = dispatch => ({\n    onAction: (action, alarmPath) => dispatch(runAlarmActionThunk({ action, alarmPath })),\n});\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(BatchActions);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport SelectMenu from '@webui-one/components/ConfigRender/List/SelectMenu';\nimport * as nodesActions from 'modules/nodes/actions';\nimport {\n    ALARM_MANAGER_USER_STORAGE_PATH,\n    ALARM_COLUMNS_SELECTION,\n} from 'modules/alarms/paths';\nimport { isVisibleColumn } from '@webui-one/core/utils/list';\nimport { selectAlarmColumns } from 'modules/alarms/selectors';\n\nconst AlarmColumnsContainer = ({\n    onSetColumnVisible,\n    columnsVisibility,\n}) => {\n    const columns = [...ALARM_COLUMNS_SELECTION];\n    columns.forEach((c, index) => {\n        columns[index].isVisible = isVisibleColumn(columnsVisibility, c);\n    });\n\n    return (\n        <div data-handle=\"alarm-column-select\">\n            <SelectMenu\n                onChange={(key, value) =>\n                    onSetColumnVisible(ALARM_MANAGER_USER_STORAGE_PATH, key, value)\n                }\n                columns={columns}\n                styleName=\"leftSelectMenu\"\n                enabled\n            />\n        </div>\n    );\n};\n\nAlarmColumnsContainer.propTypes = {\n    onSetColumnVisible: PropTypes.func.isRequired,\n    columnsVisibility: PropTypes.shape(Object),\n};\n\nconst mapStateToProps = state => ({\n    columnsVisibility: selectAlarmColumns(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n    onSetColumnVisible(path, columnKey, value) {\n        return dispatch(nodesActions.setColumnVisibilityAction(path, columnKey, value));\n    },\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(AlarmColumnsContainer);\n\nexport {\n    AlarmColumnsContainer as _AlarmColumnsContainer,\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport List from '@webui-one/components/ConfigRender/List/List';\nimport Pagination from '@webui-one/components/ConfigRender/List/Pagination';\nimport styles from '@webui-one/components/ConfigRender/List/ListStyles';\nimport {\n    createCheckBoxCellFactory,\n    createCheckboxHeaderFactory,\n    createDataCellFactory,\n    createSortableHeaderFactory,\n    getDefaultColumn,\n} from '@webui-one/components/ConfigRender/List/ListCells';\nimport { CONFIGURATION_EDITOR_NAME } from 'ConfigurationEditor/defines';\nimport { Link } from '@webui-one/router';\nimport {\n    getAlarms,\n    runAlarmActionThunk,\n    setAlarmExpandedAction,\n    selectAlarmRowsAction,\n} from 'modules/alarms/actions';\nimport {\n    selectAlarmListIsLoading,\n    selectAlarmOffset,\n    selectAlarmRows,\n    selectAlarmSortColumn,\n    selectAlarmSortOrder,\n    selectTotalNumberOfAlarms,\n    selectAlarmColumns,\n    selectSelectedAlarm,\n    selectShowClearedAlarms,\n} from 'modules/alarms/selectors';\nimport { alarmsPath as alarmsRootPath } from 'modules/devices/paths';\nimport { ALARM_COLUMNS, ALARM_ACTION_COLUMNS, ALARM_COLUMNS_SELECTION } from 'modules/alarms/paths';\nimport {\n    subscribeCdbOperAction,\n    unsubscribeCdbOperAction,\n} from 'modules/comet/actions';\nimport ActionButton from 'modules/yangActions/ActionButton';\nimport { pathOr } from '@webui-one/core/utils/object';\nimport {\n    getGlobalApplicationSetting,\n    ACTION_STATUS_INDICATOR_TIMEOUT,\n} from 'modules/globalSettings/actions';\nimport {\n    selectGlobalSetting,\n    selectGlobalSettingsIsLoading,\n} from 'modules/globalSettings/selectors';\nimport { createResultCellFactory } from 'modules/yangActions/ActionResult';\nimport { selectResultPending } from 'modules/yangActions/selectors';\nimport {\n    isVisibleColumn,\n} from '@webui-one/core/utils/list';\nimport {\n    truncateLongString,\n} from '@webui-one/core/utils/string';\n\nconst ALARM_CHUNK_SIZE = 50;\nconst STYLE_NAME = 'alarmList';\n\nconst createButtonCellFactory = (action, onAction, onExpand, btnStyle, actionIndicatorTimeout) => (\n    (result, key, rowKey) => {\n        const status = pathOr(undefined, ['yangAction', 'status'], result);\n        const completedAt = pathOr(\n            0,\n            ['yangAction', 'completedAt'],\n            result,\n        );\n        return (\n            <ActionButton\n                style={btnStyle}\n                result={(result || {}).status}\n                status={status}\n                path={rowKey}\n                action={action}\n                onAction={onAction}\n                onExpand={onExpand}\n                isExpanded={(result || {}).isExpanded}\n                actionIndicatorTimeout={actionIndicatorTimeout}\n                completedAt={completedAt}\n            />\n        );\n    }\n);\n\nconst style = styles(STYLE_NAME).list;\n\nclass AlarmListContainer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onSelectAllRows = this.onSelectAllRows.bind(this);\n        this.onSelectRow = this.onSelectRow.bind(this);\n        this.onChangeSortOrder = this.onChangeSortOrder.bind(this);\n        this.onCometUpdate = this.onCometUpdate.bind(this);\n        this.handleExpand = this.handleExpand.bind(this);\n        this.onGoToPage = this.onGoToPage.bind(this);\n        this.onRunAction = this.onRunAction.bind(this);\n        this.timeout = undefined;\n        this.shouldShowLoading = true;\n        this.state = { hasSelectedAll: false };\n    }\n\n    componentDidMount() {\n        const {\n            onSubscribe,\n            onLoadActionStatusIndicatorTimeout,\n        } = this.props;\n        this.handleLoad({ offset: 1 });\n        onSubscribe(this.onCometUpdate);\n        onLoadActionStatusIndicatorTimeout();\n    }\n\n    componentDidUpdate(prevProps) {\n        const {\n            offset,\n            rows,\n            totalNumberOfResults,\n            isLoading,\n            showClearedAlarms,\n            selectedAlarm,\n            selectedDevice,\n        } = this.props;\n        const {\n            isLoading: wasLoading,\n            showClearedAlarms: prevShowClearedAlarms,\n            selectedAlarm: prevSelectedAlarm,\n            selectedDevice: prevSelectedDevice,\n        } = prevProps;\n\n        if (rows && rows.length === 0 && totalNumberOfResults > 0) {\n            this.onGoToPage(Math.max(1, offset - ALARM_CHUNK_SIZE));\n        }\n        if (!isLoading && wasLoading) {\n            this.shouldShowLoading = true;\n        }\n        if (showClearedAlarms !== prevShowClearedAlarms ||\n            selectedAlarm !== prevSelectedAlarm ||\n            selectedDevice !== prevSelectedDevice) {\n            this.handleLoad({ offset: 1 });\n        }\n    }\n\n    componentWillUnmount() {\n        const { onUnsubscribe } = this.props;\n        onUnsubscribe(this.onCometUpdate);\n    }\n\n    handleExpand(rowKey) {\n        const { onExpand, rows } = this.props;\n        const row = rows.find(r => r.rowKey === rowKey);\n        const shouldExpand = !row.data.expandable.isExpanded;\n        onExpand(rowKey, shouldExpand);\n    }\n\n    handleLoad(args) {\n        const {\n            onLoad,\n            offset,\n            sortOrder,\n            sortColumn,\n            showClearedAlarms,\n            selectedAlarm,\n            selectedDevice,\n        } = this.props;\n        const newArgs = {\n            offset,\n            columnKey: sortColumn,\n            sortOrder,\n            showClearedAlarms,\n            severity: selectedAlarm && selectedAlarm.slice(0, -1),\n            selectedDevice,\n            ...args,\n        };\n        onLoad(newArgs);\n    }\n\n    onSelectAllRows(hasSelectedAll) {\n        const { rows, onSelectRows } = this.props;\n        this.setState({ hasSelectedAll });\n        const rowKeys = rows.map(row => row.rowKey);\n        onSelectRows(hasSelectedAll, rowKeys);\n    }\n\n    onSelectRow(isSelected, rowKey) {\n        const { onSelectRows } = this.props;\n        onSelectRows(isSelected, [rowKey]);\n    }\n\n    onRunAction(action, path) {\n        const { onAction } = this.props;\n        onAction(action, path);\n    }\n\n    onChangeSortOrder(columnKey) {\n        const {\n            sortOrder,\n            sortColumn,\n            isLoading,\n        } = this.props;\n\n        if (!isLoading) {\n            const isDesc = columnKey === sortColumn && sortOrder !== 'descending';\n            const isNone = columnKey === sortColumn && sortOrder === 'descending';\n            let newSortorder = 'ascending';\n            let newColumnKey = columnKey;\n            if (isDesc) newSortorder = 'descending';\n            if (isNone) {\n                newSortorder = undefined;\n                newColumnKey = undefined;\n            }\n            this.handleLoad({ offset: 1, columnKey: newColumnKey, sortOrder: newSortorder });\n        }\n    }\n\n    onCometUpdate() {\n        clearTimeout(this.timeout);\n        this.timeout = setTimeout(() => {\n            this.shouldShowLoading = false;\n            this.handleLoad({ offset: 1 });\n        }, 500);\n    }\n\n    onGoToPage(offset) {\n        const { isLoading } = this.props;\n\n        if (!isLoading) {\n            this.handleLoad({ offset });\n        }\n    }\n\n    render() {\n        const {\n            isLoading,\n            offset,\n            rows,\n            sortColumn,\n            sortOrder: sortOrdering,\n            totalNumberOfResults,\n            actionIndicatorTimeout,\n            columnsVisibility,\n        } = this.props;\n        const { hasSelectedAll } = this.state;\n        const sortOrder = { columnKey: sortColumn, isDesc: sortOrdering === 'descending' };\n        const nrOfVisibleColumns = ALARM_COLUMNS_SELECTION\n            .filter(c => isVisibleColumn(columnsVisibility, c)).length;\n        const formatter = value => truncateLongString(value, 180, 40, nrOfVisibleColumns);\n\n        let columns = ALARM_COLUMNS.map(({ key, title }) => ({\n            ...getDefaultColumn(),\n            title,\n            key,\n            createCell: createDataCellFactory(\n                CONFIGURATION_EDITOR_NAME,\n                Link,\n                formatter,\n            ),\n            createHeader: createSortableHeaderFactory(this.onChangeSortOrder, sortOrder),\n        }));\n\n        columns.unshift({\n            ...getDefaultColumn(),\n            key: 'isSelected',\n            canBeHidden: false,\n            isSticky: true,\n            title: 'is selected',\n            createHeader: createCheckboxHeaderFactory(\n                hasSelectedAll,\n                this.onSelectAllRows,\n                STYLE_NAME,\n            ),\n            createCell: createCheckBoxCellFactory(this.onSelectRow, STYLE_NAME),\n        });\n\n        columns.push(\n            {\n                ...getDefaultColumn(),\n                ...ALARM_ACTION_COLUMNS,\n                createCell: createButtonCellFactory(\n                    'acknowledge',\n                    this.onRunAction,\n                    this.handleExpand,\n                    style.cell.actionButton,\n                    actionIndicatorTimeout),\n            },\n            {\n                ...getDefaultColumn(),\n                title: 'expandable',\n                key: 'expandable',\n                isExpandable: true,\n                createCell: createResultCellFactory(),\n            },\n        );\n\n        columns = columns.filter(c => isVisibleColumn(columnsVisibility, c));\n\n        const additionalElements = [\n            totalNumberOfResults === 0 && (\n                <div\n                    key=\"empty\"\n                    style={style.empty}\n                    data-handle=\"empty-alarm-list\"\n                >\n                    No alarms in list\n                </div>\n            ),\n            <Pagination\n                chunkSize={ALARM_CHUNK_SIZE}\n                key=\"pagination\"\n                offset={offset}\n                onGoToPage={this.onGoToPage}\n                totalNumberOfResults={totalNumberOfResults}\n            />,\n        ];\n\n        return (\n            <div style={{ margin: '0.75rem auto 0' }}>\n                <List\n                    isLoading={isLoading && this.shouldShowLoading}\n                    columns={columns}\n                    rows={rows}\n                    styleName={STYLE_NAME}\n                    chunkSize={ALARM_CHUNK_SIZE}\n                    additionalElements={additionalElements}\n                    offset={offset}\n                    nrOfStaticColumns={1}\n                    shouldRetainColumnsSize={false}\n                />\n            </div>\n        );\n    }\n}\n\nAlarmListContainer.propTypes = {\n    actionIndicatorTimeout: PropTypes.string,\n    columnsVisibility: PropTypes.shape(Object),\n    isLoading: PropTypes.bool,\n    offset: PropTypes.number,\n    onAction: PropTypes.func.isRequired,\n    onExpand: PropTypes.func,\n    onLoad: PropTypes.func.isRequired,\n    onLoadActionStatusIndicatorTimeout: PropTypes.func,\n    onSelectRows: PropTypes.func.isRequired,\n    onSubscribe: PropTypes.func.isRequired,\n    onUnsubscribe: PropTypes.func.isRequired,\n    rows: PropTypes.arrayOf(Object),\n    selectedAlarm: PropTypes.string,\n    selectedDevice: PropTypes.string,\n    showClearedAlarms: PropTypes.bool,\n    sortColumn: PropTypes.string,\n    sortOrder: PropTypes.string,\n    totalNumberOfResults: PropTypes.number,\n};\n\nconst mapStateToProps = state => ({\n    actionIndicatorTimeout: selectGlobalSetting(\n        state,\n        ACTION_STATUS_INDICATOR_TIMEOUT,\n    ),\n    columnsVisibility: selectAlarmColumns(state),\n    isLoading: selectAlarmListIsLoading(state) || selectGlobalSettingsIsLoading(state)\n    || selectResultPending(state, '/al:alarms/purge cleared'),\n    offset: selectAlarmOffset(state),\n    rows: selectAlarmRows(state),\n    selectedAlarm: selectSelectedAlarm(state),\n    showClearedAlarms: selectShowClearedAlarms(state),\n    sortColumn: selectAlarmSortColumn(state),\n    sortOrder: selectAlarmSortOrder(state),\n    totalNumberOfResults: selectTotalNumberOfAlarms(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n    onAction(action, alarmPath) {\n        dispatch(runAlarmActionThunk({ action, alarmPath }));\n    },\n    onExpand(path, isExpanded) {\n        return dispatch(setAlarmExpandedAction(path, isExpanded));\n    },\n    onLoad({ offset, columnKey, sortOrder, showClearedAlarms, severity, selectedDevice }) {\n        return dispatch(getAlarms({\n            chunkSize: ALARM_CHUNK_SIZE,\n            offset,\n            columnKey,\n            sortOrder,\n            showClearedAlarms,\n            severity,\n            selectedDevice,\n        }));\n    },\n    onLoadActionStatusIndicatorTimeout() {\n        dispatch(getGlobalApplicationSetting({\n            setting: ACTION_STATUS_INDICATOR_TIMEOUT,\n        }));\n    },\n    onSelectRows(isSelected, rowKeys) {\n        dispatch(selectAlarmRowsAction(isSelected, rowKeys));\n    },\n    onSubscribe(handler) {\n        dispatch(subscribeCdbOperAction([alarmsRootPath], handler));\n    },\n    onUnsubscribe(handler) {\n        dispatch(unsubscribeCdbOperAction([alarmsRootPath], handler));\n    },\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(AlarmListContainer);\n\nexport {\n    AlarmListContainer as _AlarmListContainer,\n};\n","import PropTypes from 'prop-types';\nimport HeaderContainer from 'Common/Components/Header/HeaderContainer';\nimport FooterContainer from 'Common/Components/Footer/FooterContainer';\nimport AlarmListContainer from './AlarmListContainer';\nimport AlarmColumnsContainer from './AlarmColumnsContainer';\nimport AlarmActionBtnContainer from './AlarmActionBtnContainer';\nimport CheckboxFilterContainer from './CheckboxFilterContainer';\nimport React from 'react';\nimport style from './AlarmManagerStyles';\nimport * as defaultStyles from '@webui-one/styles/ApplicationDefaultStyles';\nimport AlarmSummaryContainer from './AlarmSummaryContainer';\nimport AlarmBatchActionsContainer from './AlarmBatchActionsContainer';\nimport ComboBoxFilterContainer from './ComboBoxFilterContainer';\nimport { getDeviceFromUrl } from './utils';\n\nconst AlarmManager = ({ routeParams }) => {\n    const selectedDevice = getDeviceFromUrl(routeParams.splat);\n\n    return (\n        <div style={style.application}>\n            <HeaderContainer\n                additionalComponentsRight={[\n                    <AlarmBatchActionsContainer />,\n                ]}\n            >\n                <AlarmSummaryContainer />\n                <div style={style.secondHeader}>\n                    <div style={style.contentWrapper}>\n                        <div style={style.leftContainer}>\n                            <AlarmColumnsContainer />\n                        </div>\n                        <div style={style.rightContainer}>\n                            <CheckboxFilterContainer />\n                            <AlarmActionBtnContainer\n                                action=\"purge cleared\"\n                            />\n                            <ComboBoxFilterContainer selectedDevice={selectedDevice} />\n                        </div>\n                    </div>\n                </div>\n                <div style={defaultStyles.shadow} />\n            </HeaderContainer>\n            <div style={style.scrollingContainer}>\n                <AlarmListContainer selectedDevice={selectedDevice} />\n            </div>\n            <FooterContainer />\n        </div>\n    );\n};\n\nAlarmManager.propTypes = {\n    routeParams: PropTypes.shape(Object).isRequired,\n};\n\nexport default AlarmManager;\n","import * as defaultStyles from '@webui-one/styles/ApplicationDefaultStyles';\n\nexport default {\n    application: {\n        ...defaultStyles.application,\n        height: '100vh',\n        display: 'flex',\n        flexFlow: 'column',\n        backgroundImage: defaultStyles.pattern1,\n    },\n    scrollingContainer: {\n        overflow: 'auto',\n        flexGrow: '1',\n    },\n    secondHeader: {\n        backgroundColor: defaultStyles.color11,\n        borderTop: '1px solid #cccccc',\n        height: '50px',\n        justifyContent: 'flex-end',\n    },\n    contentWrapper: {\n        display: 'flex',\n        maxWidth: defaultStyles.maxWidth,\n        margin: '0 auto',\n        height: '100%',\n        padding: '0 1rem',\n    },\n    leftContainer: {\n        alignSelf: 'center',\n        marginLeft: '0.6rem',\n    },\n    rightContainer: {\n        display: 'flex',\n        alignItems: 'center',\n        flexGrow: 1,\n        justifyContent: 'flex-end',\n        margin: '0 0.5rem',\n    },\n};\n\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { alarmsPath as alarmsRootPath } from 'modules/devices/paths';\nimport { buildSummary } from '../Dashboard/AlarmWidgetContainer';\nimport style from './AlarmSummaryStyles';\nimport {\n    getAlarmSummary,\n    setSelectedAlarmAction,\n} from 'modules/alarms/actions';\nimport {\n    selectAlarmSummaryIsLoading,\n    selectAlarmSummaryResults,\n    selectSelectedAlarm,\n} from 'modules/alarms/selectors';\nimport {\n    subscribeCdbOperAction,\n    unsubscribeCdbOperAction,\n} from 'modules/comet/actions';\nimport Loader from '@webui-one/components/Loading/Loader';\nimport * as defaultStyles from '@webui-one/styles/ApplicationDefaultStyles';\n\nclass AlarmSummaryContainer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleSelectAlarm = this.handleSelectAlarm.bind(this);\n        this.onCometUpdate = this.onCometUpdate.bind(this);\n        this.timeout = undefined;\n    }\n\n    componentDidMount() {\n        const { onLoad, onSubscribe } = this.props;\n        onSubscribe(this.onCometUpdate);\n        onLoad();\n    }\n\n    componentWillUnmount() {\n        const { onUnsubscribe } = this.props;\n        onUnsubscribe(this.onCometUpdate);\n        clearTimeout(this.timeout);\n    }\n\n    handleSelectAlarm(alarm) {\n        const { selectedAlarm, onSelectAlarm } = this.props;\n        const value = (selectedAlarm === alarm) ? '' : alarm;\n        onSelectAlarm(value);\n    }\n\n    onCometUpdate() {\n        const { onLoad } = this.props;\n        clearTimeout(this.timeout);\n        this.timeout = setTimeout(() => {\n            onLoad();\n        }, 500);\n    }\n\n    render() {\n        const { alarmSummary, selectedAlarm, isLoading } = this.props;\n        return (\n            <div\n                style={style.wrapper}\n                data-handle=\"alarmSummary\"\n            >\n                {isLoading && (\n                    <div style={style.loader}>\n                        <Loader color={defaultStyles.color9} />\n                    </div>\n                )}\n                <div style={{ visibility: isLoading ? 'hidden' : 'visible' }}>\n                    {buildSummary(\n                        alarmSummary,\n                        selectedAlarm,\n                        this.handleSelectAlarm,\n                        style,\n                        true,\n                    )}\n                </div>\n            </div>\n        );\n    }\n}\n\nAlarmSummaryContainer.propTypes = {\n    alarmSummary: PropTypes.shape(Object),\n    isLoading: PropTypes.bool,\n    onLoad: PropTypes.func.isRequired,\n    onSelectAlarm: PropTypes.func,\n    onSubscribe: PropTypes.func.isRequired,\n    onUnsubscribe: PropTypes.func.isRequired,\n    selectedAlarm: PropTypes.string,\n};\n\nconst mapStateToProps = state => ({\n    alarmSummary: selectAlarmSummaryResults(state),\n    isLoading: selectAlarmSummaryIsLoading(state),\n    selectedAlarm: selectSelectedAlarm(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n    onLoad() {\n        return dispatch(getAlarmSummary());\n    },\n    onSelectAlarm(severity) {\n        dispatch(setSelectedAlarmAction(severity));\n    },\n    onSubscribe(handler) {\n        dispatch(subscribeCdbOperAction([alarmsRootPath], handler));\n    },\n    onUnsubscribe(handler) {\n        dispatch(unsubscribeCdbOperAction([alarmsRootPath], handler));\n    },\n});\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(AlarmSummaryContainer);\n\nexport {\n    AlarmSummaryContainer as _AlarmSummaryContainer,\n};\n","import * as style from '@webui-one/styles/ApplicationDefaultStyles';\n\nexport default {\n    wrapper: {\n        width: '15rem',\n        margin: '-4rem auto 0',\n    },\n    loader: {\n        position: 'absolute',\n        margin: '1.5rem 6.5rem',\n    },\n    customContent: {\n        fontSize: '2.2rem',\n        display: 'flex',\n        justifyContent: 'space-around',\n        margin: '0 auto 0.4rem',\n    },\n    alarmButton: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        color: style.color3,\n        borderRadius: '0.5rem',\n        padding: '0.5rem',\n        cursor: 'pointer',\n        height: '3rem',\n        width: '3rem',\n    },\n    alarmSeverity: {\n        fontSize: '0.9rem',\n    },\n    criticals: style.color5,\n    majors: style.color15,\n    minors: style.color1,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Checkbox from '@webui-one/components/ConfigRender/CheckBox/CheckBox';\nimport { showClearedAlarmsAction } from 'modules/alarms/actions';\nimport { selectShowClearedAlarms } from 'modules/alarms/selectors';\nimport * as defaultStyles from '@webui-one/styles/ApplicationDefaultStyles';\n\nconst checkBoxLabel = {\n    margin: '0 0.5rem',\n    fontSize: '0.875rem',\n    alignSelf: 'center',\n    color: defaultStyles.color1,\n};\n\nconst CheckboxFilterContainer = ({\n    onShowClearedAlarms,\n    showClearedAlarms,\n}) => (\n    <Checkbox\n        name=\"show cleared\"\n        value={showClearedAlarms}\n        onSetValue={() => onShowClearedAlarms()}\n    >\n        <span style={checkBoxLabel}>show cleared</span>\n    </Checkbox>\n);\n\nCheckboxFilterContainer.propTypes = {\n    onShowClearedAlarms: PropTypes.func,\n    showClearedAlarms: PropTypes.bool,\n};\n\nconst mapStateToProps = state => ({\n    showClearedAlarms: selectShowClearedAlarms(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n    onShowClearedAlarms() {\n        dispatch(showClearedAlarmsAction());\n    },\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(CheckboxFilterContainer);\n\nexport {\n    CheckboxFilterContainer as _CheckboxFilterContainer,\n};\n\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport ComboBox from '@webui-one/components/ConfigRender/ComboBox/ComboBox';\nimport { getDevices } from 'modules/alarms/actions';\nimport {\n    selectDevicesIsLoading,\n    selectDeviceOptions,\n} from 'modules/alarms/selectors';\nimport { withRouter } from '@webui-one/router';\nimport { getLinkWithDevice } from './utils';\n\nconst ComboBoxFilterContainer = ({\n    onLoad,\n    isLoading,\n    options,\n    router,\n    selectedDevice,\n}) => {\n    useEffect(() => {\n        onLoad();\n    }, [onLoad]);\n\n    const handleChange = (device) => {\n        onLoad(device);\n    };\n\n    const handleSelectDevice = (device) => {\n        router.push(getLinkWithDevice(device));\n    };\n\n    return (\n        <ComboBox\n            isLoading={isLoading}\n            options={options}\n            editable\n            value={selectedDevice}\n            onChange={(device) => { handleChange(device); }}\n            onSetValue={(device) => { handleSelectDevice(device); }}\n            placeholder=\"Search by device\"\n            name=\"filter\"\n            styleName=\"round\"\n        />\n    );\n};\n\nComboBoxFilterContainer.propTypes = {\n    isLoading: PropTypes.bool,\n    onLoad: PropTypes.func.isRequired,\n    options: PropTypes.arrayOf(PropTypes.shape({\n        value: PropTypes.string,\n        text: PropTypes.string,\n    })),\n    router: PropTypes.shape(Object),\n    selectedDevice: PropTypes.string,\n};\n\nconst mapStateToProps = state => ({\n    isLoading: selectDevicesIsLoading(state),\n    options: selectDeviceOptions(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n    onLoad(value) {\n        dispatch(getDevices({ searchInput: value }));\n    },\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(withRouter(ComboBoxFilterContainer));\n\nexport {\n    ComboBoxFilterContainer as _ComboBoxFilterContainer,\n};\n\n"],"names":["buttonStyle","backgroundColor","defaultStyles","color1","color","textColor4","fontWeight","lineHeight","border","borderRadius","cursor","margin","padding","fontSize","medium2","AlarmActionBtnContainer","action","onAction","type","style","onClick","propTypes","PropTypes","string","isRequired","func","connect","dispatch","alarmPath","runAlarmActionThunk","state","rows","selectSelectedAlarmRows","actions","BatchActions","AlarmColumnsContainer","onSetColumnVisible","columnsVisibility","columns","ALARM_COLUMNS_SELECTION","forEach","c","index","isVisible","isVisibleColumn","onChange","key","value","ALARM_MANAGER_USER_STORAGE_PATH","styleName","enabled","shape","Object","selectAlarmColumns","path","columnKey","nodesActions","setColumnVisibilityAction","STYLE_NAME","createButtonCellFactory","onExpand","btnStyle","actionIndicatorTimeout","result","rowKey","status","pathOr","undefined","completedAt","isExpanded","list","AlarmListContainer","React","Component","constructor","props","super","this","onSelectAllRows","bind","onSelectRow","onChangeSortOrder","onCometUpdate","handleExpand","onGoToPage","onRunAction","timeout","shouldShowLoading","hasSelectedAll","componentDidMount","onSubscribe","onLoadActionStatusIndicatorTimeout","handleLoad","offset","componentDidUpdate","prevProps","totalNumberOfResults","isLoading","showClearedAlarms","selectedAlarm","selectedDevice","wasLoading","prevShowClearedAlarms","prevSelectedAlarm","prevSelectedDevice","length","Math","max","componentWillUnmount","onUnsubscribe","shouldExpand","find","r","data","expandable","args","onLoad","sortOrder","sortColumn","severity","slice","onSelectRows","setState","map","row","isSelected","newSortorder","newColumnKey","clearTimeout","setTimeout","render","sortOrdering","isDesc","nrOfVisibleColumns","filter","formatter","truncateLongString","ALARM_COLUMNS","title","getDefaultColumn","createCell","createDataCellFactory","CONFIGURATION_EDITOR_NAME","Link","createHeader","createSortableHeaderFactory","unshift","canBeHidden","isSticky","createCheckboxHeaderFactory","createCheckBoxCellFactory","push","ALARM_ACTION_COLUMNS","cell","actionButton","isExpandable","createResultCellFactory","additionalElements","empty","chunkSize","nrOfStaticColumns","shouldRetainColumnsSize","bool","number","arrayOf","selectGlobalSetting","ACTION_STATUS_INDICATOR_TIMEOUT","selectAlarmListIsLoading","selectGlobalSettingsIsLoading","selectResultPending","selectAlarmOffset","selectAlarmRows","selectSelectedAlarm","selectShowClearedAlarms","selectAlarmSortColumn","selectAlarmSortOrder","selectTotalNumberOfAlarms","setAlarmExpandedAction","getAlarms","getGlobalApplicationSetting","setting","rowKeys","selectAlarmRowsAction","handler","subscribeCdbOperAction","alarmsRootPath","unsubscribeCdbOperAction","AlarmManager","routeParams","getDeviceFromUrl","splat","application","additionalComponentsRight","secondHeader","contentWrapper","leftContainer","rightContainer","shadow","scrollingContainer","height","display","flexFlow","backgroundImage","pattern1","overflow","flexGrow","color11","borderTop","justifyContent","maxWidth","alignSelf","marginLeft","alignItems","AlarmSummaryContainer","handleSelectAlarm","alarm","onSelectAlarm","alarmSummary","wrapper","loader","color9","visibility","buildSummary","selectAlarmSummaryResults","selectAlarmSummaryIsLoading","getAlarmSummary","setSelectedAlarmAction","width","position","customContent","alarmButton","flexDirection","color3","alarmSeverity","criticals","color5","majors","color15","minors","checkBoxLabel","CheckboxFilterContainer","onShowClearedAlarms","name","onSetValue","showClearedAlarmsAction","ComboBoxFilterContainer","options","router","useEffect","editable","device","handleChange","getLinkWithDevice","handleSelectDevice","placeholder","text","selectDevicesIsLoading","selectDeviceOptions","getDevices","searchInput","withRouter"],"sourceRoot":""}