{"version":3,"file":"595.c498d43b5f50670c2258.chunk.js","mappings":"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","sources":["webpack://webui/./packages/styles/static/AlarmSymbol.jsx","webpack://webui/./src/Common/Components/DataWidget/DataWidget.jsx","webpack://webui/./src/Common/Components/DataWidget/DataWidgetStyles.js","webpack://webui/./src/Dashboard/AlarmWidgetContainer.jsx","webpack://webui/./src/Dashboard/AlarmWidgetStyles.js","webpack://webui/./src/modules/alarms/actions.js","webpack://webui/./src/modules/alarms/paths.js","webpack://webui/./src/modules/alarms/selectors.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst AlarmSymbol = ({ color }) => (\n    <svg version=\"1.2\" baseProfile=\"tiny\" x=\"0px\" y=\"0px\" viewBox=\"0 0 24 21\" xmlSpace=\"preserve\">\n        <path\n            fill={color}\n            d=\"M12.7,0.5c-0.4-0.7-1.1-0.7-1.5,0L0.2,19.7C-0.2,20.4,0.1,21,0.9,21h22.2\n    c0.8,0,1.2-0.6,0.8-1.3L12.7,0.5z M12.7,17.7C12.5,17.9,12.2,18,12,18c-0.3,0-0.5-0.1-0.7-0.3C11.1,17.5,11,17.2,11,17\n    c0-0.3,0.1-0.5,0.3-0.7c0.4-0.4,1.1-0.4,1.4,0c0.2,0.2,0.3,0.5,0.3,0.7C13,17.2,12.9,17.5,12.7,17.7L12.7,17.7z M13,13.5\n    c0,0.6-0.5,1-1,1s-1-0.5-1-1v-6c0-0.6,0.5-1,1-1s1,0.5,1,1V13.5L13,13.5z\"\n        />\n    </svg>\n);\n\nAlarmSymbol.propTypes = {\n    color: PropTypes.string,\n};\n\nexport default AlarmSymbol;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from '@webui-one/router';\n\nimport Loader from '@webui-one/components/Loading/Loader';\nimport * as defaultStyles from '@webui-one/styles/ApplicationDefaultStyles';\nimport style from './DataWidgetStyles';\n\nconst DataWidget = ({ name, title, symbol, items, isLoading, children }) => {\n    const rows = (items || []).map((item, index) => {\n        if (item.path) {\n            return (\n                <Link\n                    to={item.path}\n                    key={index}\n                    data-handle={`item-${item.name}`}\n                    style={style.itemLink}\n                >\n                    <div style={style.itemName}>{item.name}</div>\n                    <div style={style.itemValue}>{item.value}</div>\n                </Link>\n            );\n        }\n\n        return (\n            <div key={index} data-handle={`item-${item.name}`} style={style.item}>\n                <div style={style.itemName}>{item.name}</div>\n                <div style={style.itemValue}>{item.value}</div>\n            </div>\n        );\n    });\n    return (\n        <div data-handle={`data-widget-${name}`} style={style.widget}>\n            <div style={style.header}>\n                <div style={style.titleContainer}>\n                    <div style={style.symbol}>\n                        {symbol}\n                    </div>\n                    <span style={style.title} data-handle=\"title\">\n                        {title}\n                    </span>\n                </div>\n                { isLoading && (\n                    <div style={style.loader}>\n                        <Loader color={defaultStyles.color3} />\n                    </div>\n                )}\n                <div\n                    style={isLoading ? ({ ...style.value, visibility: 'hidden' }) : style.value}\n                    data-handle=\"value\"\n                >\n                    {children}\n                </div>\n            </div>\n            { rows.length > 0 && (\n                <div data-handle=\"items\" style={style.items}>\n                    {rows}\n                </div>\n            )}\n        </div>\n    );\n};\n\nDataWidget.propTypes = {\n    name: PropTypes.string,\n    symbol: PropTypes.shape({}),\n    title: PropTypes.string,\n    items: PropTypes.arrayOf(Object),\n    isLoading: PropTypes.bool,\n    children: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.object]),\n};\n\nexport default DataWidget;\n","import * as style from '@webui-one/styles/ApplicationDefaultStyles';\n\nconst item = {\n    display: 'flex',\n    flexWrap: 'nowrap',\n    justifyContent: 'space-between',\n    lineHeight: '1.63',\n    fontSize: style.medium3,\n};\n\nexport default {\n    widget: {\n        minWidth: '20rem',\n        margin: '1rem',\n        backgroundColor: style.color3,\n    },\n    header: {\n        backgroundColor: style.color2,\n        paddingTop: '1.625rem',\n        paddingLeft: '1.2rem',\n        paddingBottom: '1rem',\n        ...style.fontCondensed,\n    },\n    item,\n    itemLink: {\n        ...item,\n        textDecoration: 'none',\n        color: 'inherit',\n    },\n    loader: {\n        position: 'absolute',\n        marginTop: '3rem',\n    },\n    itemName: {\n    },\n    itemValue: {\n        paddingLeft: '0.4rem',\n    },\n    value: {\n        color: style.color1,\n        fontSize: style.huge1,\n        marginTop: '1rem',\n    },\n    titleContainer: {\n        display: 'flex',\n    },\n    symbol: {\n        width: '1.4375rem',\n        height: '1.4375rem',\n        alignSelf: 'center',\n        margin: '0 0.625rem',\n    },\n    title: {\n        fontSize: style.medium2,\n        color: style.textColor3,\n        display: 'inline',\n        alignSelf: 'center',\n    },\n    items: {\n        padding: '1rem',\n    },\n    percentageItem: {\n        percentage: {\n            marginLeft: '0.15rem',\n        },\n    },\n\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport AlarmSymbol from '@webui-one/styles/static/AlarmSymbol';\nimport * as defaultStyles from '@webui-one/styles/ApplicationDefaultStyles';\nimport { escapeKey } from '@webui-one/core/utils/path';\nimport { quoteKey } from '@webui-one/core/utils/key';\nimport { getLinkWithPath } from 'ConfigurationEditor/utils';\nimport DataWidget from 'Common/Components/DataWidget/DataWidget';\nimport {\n    getAlarms,\n    getAlarmSummary,\n    setSelectedAlarmAction,\n} from 'modules/alarms/actions';\nimport {\n    selectAlarmListResult,\n    selectAlarmListIsLoading,\n    selectAlarmSummaryIsLoading,\n    selectAlarmSummaryResults,\n    selectSelectedAlarm,\n} from 'modules/alarms/selectors';\nimport {\n    subscribeCdbOperAction,\n    unsubscribeCdbOperAction,\n} from 'modules/comet/actions';\nimport alarmWidgetStyles from './AlarmWidgetStyles';\n\nconst ALARM_ROOT_PATH = getLinkWithPath('/al:alarms/alarm-list/alarm');\n\nconst buildAlarmsOfSeverity = (alarms) => {\n    if (!(Array.isArray(alarms))) {\n        return undefined;\n    }\n\n    return alarms.map((alarm) => {\n        let alarmKeys = `{${quoteKey(alarm.device)} `;\n        alarmKeys += `${quoteKey(alarm.type)} `;\n        alarmKeys += `${quoteKey(alarm['managed-object'])} `;\n        alarmKeys += `${quoteKey(alarm['specific-problem'])}}`;\n        const path = escapeKey(`${ALARM_ROOT_PATH}${alarmKeys}`);\n\n        return { name: alarm.device, value: alarm.type, path };\n    });\n};\n\nconst buildAlarmLink = (\n    alarmSeverity, summary, selectedAlarm, handleSelectAlarm, style, isAlarmSeverityVisible,\n) => {\n    const selected = alarmSeverity === selectedAlarm;\n    const stl = selected ?\n        { ...style.alarmButton, backgroundColor: style[alarmSeverity] } :\n        { ...style.alarmButton, color: style[alarmSeverity] };\n    return (\n        <a\n            style={stl}\n            data-handle={`${alarmSeverity}-number`}\n            role=\"button\"\n            tabIndex={0}\n            onClick={() => { handleSelectAlarm(alarmSeverity); }}\n            key={alarmSeverity}\n        >\n            {summary[alarmSeverity]}\n            <span style={style.alarmSeverity}>\n                {isAlarmSeverityVisible && alarmSeverity}\n            </span>\n        </a>\n    );\n};\n\nexport const buildSummary = (\n    summary, selectedAlarm, handleSelectAlarm, style, isAlarmSeverityVisible,\n) => {\n    if (!summary) return undefined;\n    return (\n        <div style={style.customContent} >\n            {\n                ['criticals', 'majors', 'minors'].map(alarmSeverity =>\n                    buildAlarmLink(\n                    alarmSeverity,\n                    summary,\n                    selectedAlarm,\n                    handleSelectAlarm,\n                    style,\n                    isAlarmSeverityVisible))\n            }\n        </div>\n    );\n};\n\nclass AlarmWidgetContainer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleSelectAlarm = this.handleSelectAlarm.bind(this);\n        this.onCometUpdate = this.onCometUpdate.bind(this);\n        this.timeout = undefined;\n    }\n\n    componentDidMount() {\n        const { onLoad, onSubscribe, selectedAlarm } = this.props;\n        onSubscribe(this.onCometUpdate);\n        onLoad();\n        this.handleGetAlarms(selectedAlarm);\n    }\n\n    componentWillUnmount() {\n        const { onUnsubscribe } = this.props;\n        onUnsubscribe(this.onCometUpdate);\n    }\n\n    handleGetAlarms(value) {\n        const { onGetAlarms } = this.props;\n        const severityValue = value ? value.slice(0, -1) : ['critical', 'major', 'minor'];\n        onGetAlarms(severityValue);\n    }\n\n    handleSelectAlarm(alarm) {\n        const { selectedAlarm, onSelectAlarm } = this.props;\n        const value = (selectedAlarm === alarm) ? '' : alarm;\n        onSelectAlarm(value);\n        this.handleGetAlarms(value);\n    }\n\n    onCometUpdate() {\n        const { onLoad, selectedAlarm } = this.props;\n        clearTimeout(this.timeout);\n        this.timeout = setTimeout(() => {\n            onLoad();\n            this.handleGetAlarms(selectedAlarm);\n        }, 500);\n    }\n\n    render() {\n        const { alarmList, alarmSummary, isLoading, selectedAlarm } = this.props;\n        let items = [];\n        const value = (\n            <div style={{ visibility: isLoading ? 'hidden' : 'visible' }}>\n                {buildSummary(\n                    alarmSummary,\n                    selectedAlarm,\n                    this.handleSelectAlarm,\n                    alarmWidgetStyles,\n                )}\n            </div>\n        );\n        if (!isLoading) {\n            items = buildAlarmsOfSeverity(alarmList);\n        }\n\n        return (\n            <DataWidget\n                symbol={<AlarmSymbol color={defaultStyles.textColor3} />}\n                items={items}\n                name=\"alarms\"\n                title={'ALARMS'}\n                isLoading={isLoading}\n            >\n                {value}\n            </DataWidget>\n        );\n    }\n}\n\nconst alarmSubscriptionPaths = [\n    '/al:alarms/alarm-list/alarm',\n];\n\nconst mapDispatchToProps = dispatch => ({\n    onLoad() {\n        return dispatch(getAlarmSummary());\n    },\n    onSelectAlarm(severity) {\n        dispatch(setSelectedAlarmAction(severity));\n    },\n    onGetAlarms(severity) {\n        return dispatch(getAlarms({ severity, chunkSize: 25 }));\n    },\n    onSubscribe(handler) {\n        dispatch(subscribeCdbOperAction(alarmSubscriptionPaths, handler));\n    },\n    onUnsubscribe(handler) {\n        dispatch(unsubscribeCdbOperAction(alarmSubscriptionPaths, handler));\n    },\n});\n\nAlarmWidgetContainer.defaultProps = {\n    isLoading: true,\n    alarmList: [],\n};\n\nAlarmWidgetContainer.propTypes = {\n    onLoad: PropTypes.func.isRequired,\n    onGetAlarms: PropTypes.func.isRequired,\n    onSubscribe: PropTypes.func.isRequired,\n    onUnsubscribe: PropTypes.func.isRequired,\n    onSelectAlarm: PropTypes.func,\n    selectedAlarm: PropTypes.string,\n    isLoading: PropTypes.bool,\n    alarmList: PropTypes.arrayOf(\n        PropTypes.shape({}),\n    ),\n    alarmSummary: PropTypes.shape(Object),\n};\n\nconst mapStateToProps = state => ({\n    alarmList: selectAlarmListResult(state),\n    alarmSummary: selectAlarmSummaryResults(state),\n    isLoading: selectAlarmListIsLoading(state) || selectAlarmSummaryIsLoading(state),\n    selectedAlarm: selectSelectedAlarm(state),\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(AlarmWidgetContainer);\n\nexport {\n    AlarmWidgetContainer as _AlarmWidgetContainer,\n    mapDispatchToProps as _mapDispatchToProps,\n    mapStateToProps as _mapStateToProps,\n    buildAlarmsOfSeverity as _buildAlarmsOfSeverity,\n    buildSummary as _buildSummary,\n};\n","import * as style from '@webui-one/styles/ApplicationDefaultStyles';\n\nexport default {\n    customContent: {\n        fontSize: style.huge1,\n        display: 'flex',\n        justifyContent: 'space-around',\n        margin: '-0.5rem 0.5rem -0.5rem -0.5rem',\n    },\n    alarmButton: {\n        color: style.color2,\n        borderRadius: '0.5rem',\n        padding: '0.5rem',\n        cursor: 'pointer',\n    },\n    criticals: style.color5,\n    majors: style.color15,\n    minors: style.color1,\n    warnings: style.color1,\n    indeterminates: style.color1,\n};\n","import {\n    query as _query,\n    getValues as _getValues,\n    zipQueryResult,\n} from '@webui-one/core/jsonrpc';\nimport { read } from 'modules/transactions/actions';\nimport {\n    runCustomActionThunk as _runCustomActionThunk,\n} from 'modules/yangActions/actions';\nimport * as actionTypes from './actionTypes';\n\nexport const getAlarmsStartAction = () => ({\n    type: actionTypes.GET_ALARMS_START,\n});\nexport const getAlarmsCompleteAction = (alarmList, selection, columnKey, sortOrder) => {\n    const results = zipQueryResult(selection, alarmList.results);\n    return {\n        type: actionTypes.GET_ALARMS_COMPLETE,\n        alarmList: { ...alarmList, results },\n        columnKey,\n        sortOrder,\n    };\n};\nexport const getAlarmsErrorAction = error => ({\n    type: actionTypes.GET_ALARMS_ERROR,\n    error,\n});\n\nexport const getDevicesStartAction = () => ({\n    type: actionTypes.GET_DEVICES_START,\n});\n\nexport const getDevicesErrorAction = error => ({\n    type: actionTypes.GET_DEVICES_ERROR,\n    error,\n});\n\nexport const getDevicesCompleteAction = devices => ({\n    type: actionTypes.GET_DEVICES_COMPLETE,\n    devices,\n});\n\nexport const getAlarmSummaryStartAction = () => ({\n    type: actionTypes.GET_ALARM_SUMMARY_START,\n});\nexport const getAlarmSummaryCompleteAction = values => ({\n    type: actionTypes.GET_ALARM_SUMMARY_COMPLETE,\n    values,\n});\nexport const getAlarmSummaryErrorAction = error => ({\n    type: actionTypes.GET_ALARM_SUMMARY_ERROR,\n    error,\n});\n\nexport const setAlarmExpandedAction = (path, isExpanded) => ({\n    type: actionTypes.SET_EXPANDED_ROW,\n    path,\n    isExpanded,\n});\n\nexport const selectAlarmRowsAction = (isSelected, alarmNames) => ({\n    type: actionTypes.SELECT_ALARM_ROWS,\n    alarmNames,\n    isSelected,\n});\n\nexport const showClearedAlarmsAction = () => ({\n    type: actionTypes.SHOW_CLEARED_ALARMS,\n});\n\nconst getXpathExpr = (severity, showClearedAlarms, selectedDevice) => {\n    const arr = [];\n    if (severity) {\n        const severities = Array.isArray(severity) ? severity : [severity];\n        const severityXpath = severities.map(sev =>\n            `last-perceived-severity=\"${sev}\"`).join(' or ');\n        arr.push(`(${severityXpath})`);\n    }\n    if (!showClearedAlarms) {\n        arr.push('is-cleared=\"false\"');\n    }\n    if (selectedDevice) {\n        arr.push(`device=\"${selectedDevice}\"`);\n    }\n    if (arr.length !== 0) {\n        const pred = arr.join(' and ');\n        return `alarm[${pred}]`;\n    }\n    return undefined;\n};\n\nexport const setSelectedAlarmAction = severity => ({\n    type: actionTypes.SET_SELECTED_ALARM,\n    severity,\n});\n\nexport const getAlarms = ({\n    chunkSize,\n    offset,\n    columnKey,\n    sortOrder,\n    severity,\n    showClearedAlarms,\n    selectedDevice,\n    funcs: {\n        query = _query,\n        readThunk = read,\n    } = {},\n} = {}) => (\n    async (dispatch, getState) => {\n        const contextNode = '/alarms/alarm-list';\n        const path = '/alarms/alarm-list/alarm';\n        const xpathExpr = getXpathExpr(severity, showClearedAlarms, selectedDevice);\n        const selection = [\n            'device',\n            'type',\n            'managed-object',\n            'last-perceived-severity',\n            'is-cleared',\n            'specific-problem',\n            'last-alarm-text',\n            'alarm-handling[last()]/state',\n            'status-change/event-time',\n            'last-status-change',\n            'count(status-change/event-time)',\n        ];\n        dispatch(getAlarmsStartAction());\n\n        try {\n            const { th } = await readThunk()(dispatch, getState);\n            const alarmList = await query({\n                th,\n                selection,\n                path,\n                sort: columnKey,\n                sortOrder,\n                initialOffset: offset,\n                chunkSize,\n                resultAs: 'string',\n                xpathExpr,\n                contextNode,\n            });\n\n            return dispatch(getAlarmsCompleteAction(\n                alarmList, selection, columnKey, sortOrder,\n            ));\n        } catch (error) {\n            return dispatch(getAlarmsErrorAction(error));\n        }\n    }\n);\n\nexport const getDevices = ({\n    searchInput,\n    funcs: {\n        query = _query,\n        readThunk = read,\n    } = {},\n} = {}) => async (dispatch, getState) => {\n    dispatch(getDevicesStartAction());\n    try {\n        const { th } = await readThunk()(dispatch, getState);\n        const queryResult = await query({\n            th,\n            path: '/ncs:devices/device',\n            selection: ['name'],\n            chunkSize: 20,\n            xpathExpr: searchInput && `device[contains(name, \"${searchInput}\")]`,\n            contextNode: '/ncs:devices',\n        });\n        return dispatch(getDevicesCompleteAction(queryResult.results.flat()));\n    } catch (error) {\n        return dispatch(getDevicesErrorAction(error));\n    }\n};\n\nexport const getAlarmSummary = ({\n    funcs: {\n        getValues = _getValues,\n        readThunk = read,\n    } = {},\n} = {}) => (\n    async (dispatch, getState) => {\n        dispatch(getAlarmSummaryStartAction());\n\n        try {\n            const path = '/alarms/summary/';\n            const leafs = [\n                'criticals',\n                'majors',\n                'minors',\n                'warnings',\n                'indeterminates',\n            ];\n\n            const { th } = await readThunk()(dispatch, getState);\n            const result = await getValues({ th, path, leafs });\n            const alarmSummary = result.values.reduce((acc, cur, idx) => {\n                acc[leafs[idx]] = cur.value;\n                return acc;\n            }, {});\n\n            return dispatch(getAlarmSummaryCompleteAction(alarmSummary));\n        } catch (error) {\n            return dispatch(getAlarmSummaryErrorAction(error));\n        }\n    }\n);\n\nconst getPaths = ({ action, alarmPath }) => {\n    if (action === 'acknowledge') {\n        return {\n            actionPath: `${alarmPath}/${action}`,\n            executePath: `${alarmPath}/handle-alarm`,\n        };\n    }\n\n    if (action === 'purge cleared') {\n        return {\n            actionPath: `${alarmPath}/${action}`,\n            executePath: `${alarmPath}/purge-alarms`,\n        };\n    }\n    return { actionPath: `${alarmPath}/${action}` };\n};\n\nexport const runAlarmActionThunk = ({\n    action,\n    alarmPath,\n    funcs: {\n        runCustomActionThunk = _runCustomActionThunk,\n    } = {},\n}) => {\n    const { actionPath, executePath } = getPaths({ action, alarmPath });\n    return runCustomActionThunk({ action, actionPath, executePath });\n};\n\nexport {\n    getXpathExpr as _getXpathExpr,\n};\n","export const ALARM_MANAGER_USER_STORAGE_PATH = 'ALARM_MANAGER_USER_STORAGE_PATH';\n\nexport const ALARM_COLUMNS = [\n    {\n        key: 'type',\n        title: 'type',\n    },\n    {\n        key: 'device',\n        title: 'device',\n    },\n    {\n        key: 'is-cleared',\n        title: 'is-cleared',\n    },\n    {\n        key: 'alarm-handling[last()]/state',\n        title: 'last-state',\n    },\n    {\n        key: 'last-perceived-severity',\n        title: 'severity',\n    },\n    {\n        key: 'last-alarm-text',\n        title: 'last-message',\n    },\n    {\n        key: 'status-change/event-time',\n        title: 'created',\n    },\n    {\n        key: 'last-status-change',\n        title: 'last-status-change',\n    },\n    {\n        key: 'count(status-change/event-time)',\n        title: 'number-of-status-change',\n    },\n];\n\nexport const ALARM_ACTION_COLUMNS = {\n    key: 'acknowledge',\n    title: 'acknowledge',\n};\n\nexport const ALARM_COLUMNS_SELECTION = [\n    ...ALARM_COLUMNS,\n    ALARM_ACTION_COLUMNS,\n].map(c => ({ ...c, canBeHidden: true }));\n\n","import { createSelector } from 'reselect';\nimport { quoteKey } from '@webui-one/core/utils/key';\nimport { alarmsPath } from '../devices/paths';\nimport {\n    getActionStatus,\n    selectYangActions,\n    getAcknowledgeStatus,\n} from 'modules/yangActions/selectors';\nimport {\n    createColumnsVisibilitySelector,\n} from 'modules/userdata/selectors';\nimport { ALARM_MANAGER_USER_STORAGE_PATH } from './paths';\nimport { timeStampToRelativeTimeString } from '@webui-one/core/utils/time';\n\nconst emptyObject = Object.freeze({});\nconst emptyArray = Object.freeze([]);\n\nconst getAlarmListKeyPath = (alarm) => {\n    let alarmKeys = `{${quoteKey(alarm.device)} `;\n    alarmKeys += `${quoteKey(alarm.type)} `;\n    alarmKeys += `${quoteKey(alarm['managed-object'])} `;\n    alarmKeys += `${quoteKey(alarm['specific-problem'])}}`;\n\n    return `${alarmsPath}${alarmKeys}`;\n};\n\nconst getActionsWithStatus = actions =>\n    Object.keys(actions).reduce((acc, actionKey) => ({\n        ...acc,\n        [actionKey]: {\n            status: getActionStatus(\n                actions,\n                actionKey,\n                getAcknowledgeStatus).actionStatus,\n            yangAction: { ...actions[actionKey] },\n        },\n    }), {});\n\nconst getRelativeTimeString = timeStamp => timeStampToRelativeTimeString(Date.parse(timeStamp));\n\nconst userStorageProps = {\n    path: ALARM_MANAGER_USER_STORAGE_PATH,\n};\nconst alarmColumnSelector = createColumnsVisibilitySelector();\nexport const selectAlarmColumns = state => alarmColumnSelector(state, userStorageProps);\n\nexport const selectAlarmList = state => (state.alarms.alarms || emptyObject);\nexport const selectAlarmListIsLoading = state => selectAlarmList(state).isLoading;\nexport const selectAlarmListResult = createSelector(\n    selectAlarmList,\n    alarmList => (Array.isArray(alarmList.results) ? alarmList.results : emptyArray),\n);\nexport const selectAlarmSummary = state => (state.alarms.summary || emptyObject);\nexport const selectAlarmSummaryIsLoading = state => selectAlarmSummary(state).isLoading;\nexport const selectAlarmSummaryResults = state => selectAlarmSummary(state).summary;\nexport const selectExpandedRows = state => selectAlarmList(state).expandedRows || emptyObject;\nexport const selectAlarmRowsSelection = state => selectAlarmList(state).selectedRows || emptyObject;\nexport const selectAlarmRows = createSelector(\n    selectAlarmListResult,\n    selectYangActions,\n    selectAlarmRowsSelection,\n    selectExpandedRows,\n    (alarmListResult, yangActions, selected, expandedRows) => alarmListResult.map((alarm) => {\n        const rowKey = getAlarmListKeyPath(alarm);\n        const actions = { acknowledge: yangActions[`${rowKey}/acknowledge`] };\n        const actionsWithStatus = getActionsWithStatus(actions);\n        actionsWithStatus.acknowledge.isExpanded = expandedRows[rowKey];\n        const metadata = selected[rowKey] || {};\n        return {\n            rowKey,\n            data: {\n                ...alarm,\n                ...metadata,\n                ...actionsWithStatus,\n                'last-status-change': getRelativeTimeString(alarm['last-status-change']),\n                'status-change/event-time': getRelativeTimeString(alarm['status-change/event-time']),\n                expandable: {\n                    isExpanded: expandedRows[rowKey],\n                    yangAction: {\n                        ...actions.acknowledge,\n                        actionStatus: actionsWithStatus.acknowledge,\n                    },\n                },\n            },\n        };\n    }),\n);\n\nexport const selectDevices = state => (state.alarms.devices || emptyObject);\nexport const selectDevicesIsLoading = state => selectDevices(state).isLoading;\nexport const selectDeviceList = state => selectDevices(state).devices || emptyArray;\nexport const selectDeviceOptions = state =>\n    selectDeviceList(state).map(device => ({ value: device, text: device }));\n\nexport const selectSelectedAlarmRows = createSelector(\n    selectAlarmRows,\n    rows => rows.filter(r => r.data.isSelected),\n);\nexport const selectAlarmOffset = state => selectAlarmList(state).current_position;\nexport const selectAlarmSortColumn = state => selectAlarmList(state).sortColumn;\nexport const selectAlarmSortOrder = state => selectAlarmList(state).sortOrder;\nexport const selectTotalNumberOfAlarms = state => selectAlarmList(state).total_number_of_results;\nexport const selectShowClearedAlarms = state => selectAlarmList(state).showClearedAlarms;\nexport const selectSelectedAlarm = state => selectAlarmList(state).selectedAlarm;\n"],"names":["AlarmSymbol","color","version","baseProfile","x","y","viewBox","xmlSpace","fill","d","propTypes","PropTypes","string","DataWidget","name","title","symbol","items","isLoading","children","rows","map","item","index","path","Link","to","key","style","itemLink","itemName","itemValue","value","widget","header","titleContainer","loader","defaultStyles","color3","visibility","length","shape","arrayOf","Object","bool","oneOfType","number","object","display","flexWrap","justifyContent","lineHeight","fontSize","medium3","minWidth","margin","backgroundColor","color2","paddingTop","paddingLeft","paddingBottom","fontCondensed","textDecoration","position","marginTop","color1","huge1","width","height","alignSelf","medium2","textColor3","padding","percentageItem","percentage","marginLeft","ALARM_ROOT_PATH","getLinkWithPath","buildAlarmsOfSeverity","alarms","Array","isArray","alarm","alarmKeys","quoteKey","device","type","escapeKey","buildSummary","summary","selectedAlarm","handleSelectAlarm","isAlarmSeverityVisible","customContent","alarmSeverity","stl","alarmButton","role","tabIndex","onClick","buildAlarmLink","AlarmWidgetContainer","React","Component","constructor","props","super","this","bind","onCometUpdate","timeout","undefined","componentDidMount","onLoad","onSubscribe","handleGetAlarms","componentWillUnmount","onUnsubscribe","onGetAlarms","slice","onSelectAlarm","clearTimeout","setTimeout","render","alarmList","alarmSummary","alarmWidgetStyles","alarmSubscriptionPaths","mapDispatchToProps","dispatch","getAlarmSummary","severity","setSelectedAlarmAction","getAlarms","chunkSize","handler","subscribeCdbOperAction","unsubscribeCdbOperAction","defaultProps","func","isRequired","mapStateToProps","state","selectAlarmListResult","selectAlarmSummaryResults","selectAlarmListIsLoading","selectAlarmSummaryIsLoading","selectSelectedAlarm","connect","borderRadius","cursor","criticals","color5","majors","color15","minors","warnings","indeterminates","getAlarmsStartAction","actionTypes","GET_ALARMS_START","getAlarmsCompleteAction","selection","columnKey","sortOrder","results","zipQueryResult","GET_ALARMS_COMPLETE","getAlarmsErrorAction","error","GET_ALARMS_ERROR","getDevicesStartAction","GET_DEVICES_START","getDevicesErrorAction","GET_DEVICES_ERROR","getDevicesCompleteAction","devices","GET_DEVICES_COMPLETE","getAlarmSummaryStartAction","GET_ALARM_SUMMARY_START","getAlarmSummaryCompleteAction","values","GET_ALARM_SUMMARY_COMPLETE","getAlarmSummaryErrorAction","GET_ALARM_SUMMARY_ERROR","isExpanded","SET_EXPANDED_ROW","isSelected","alarmNames","SELECT_ALARM_ROWS","SHOW_CLEARED_ALARMS","getXpathExpr","showClearedAlarms","selectedDevice","arr","severityXpath","sev","join","push","SET_SELECTED_ALARM","offset","funcs","query","_query","readThunk","read","async","getState","xpathExpr","th","sort","initialOffset","resultAs","contextNode","searchInput","queryResult","flat","getValues","_getValues","leafs","reduce","acc","cur","idx","action","alarmPath","runCustomActionThunk","_runCustomActionThunk","actionPath","executePath","getPaths","ALARM_COLUMNS","ALARM_ACTION_COLUMNS","ALARM_COLUMNS_SELECTION","c","canBeHidden","emptyObject","freeze","emptyArray","getRelativeTimeString","timeStamp","timeStampToRelativeTimeString","Date","parse","userStorageProps","ALARM_MANAGER_USER_STORAGE_PATH","alarmColumnSelector","createColumnsVisibilitySelector","selectAlarmList","createSelector","selectAlarmSummary","selectExpandedRows","expandedRows","selectAlarmRowsSelection","selectedRows","selectAlarmRows","selectYangActions","alarmListResult","yangActions","selected","rowKey","alarmsPath","getAlarmListKeyPath","actions","acknowledge","actionsWithStatus","keys","actionKey","status","getActionStatus","getAcknowledgeStatus","actionStatus","yangAction","getActionsWithStatus","metadata","data","expandable","selectDevices","selectDeviceList","text","selectSelectedAlarmRows","filter","r","current_position","sortColumn","total_number_of_results"],"sourceRoot":""}