{"version":3,"file":"DeviceManager.c5b5f10a6be16c78c956.chunk.js","mappings":"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","sources":["webpack://webui/./packages/components/ConfigRender/ErrorBoundary.jsx","webpack://webui/./packages/styles/static/AlarmSymbol.jsx","webpack://webui/./packages/styles/static/WarningSymbol.jsx","webpack://webui/./src/Common/Components/ManagerItems/ManagerItems.jsx","webpack://webui/./src/Common/Components/ManagerItems/ManagerItemsStyles.js","webpack://webui/./src/Common/Components/Summary/Summary.jsx","webpack://webui/./src/Common/Components/Summary/SummaryStyle.js","webpack://webui/./src/DeviceManager/AddDevicesContainer.jsx","webpack://webui/./src/DeviceManager/AddListItemButtonStyles.js","webpack://webui/./src/DeviceManager/AlarmCell.jsx","webpack://webui/./src/DeviceManager/AlarmCellStyles.js","webpack://webui/./src/DeviceManager/DeviceBatchActions.jsx","webpack://webui/./src/DeviceManager/DeviceColumnsContainer.jsx","webpack://webui/./src/DeviceManager/DeviceCounterContainer.jsx","webpack://webui/./src/DeviceManager/DeviceListContainer.jsx","webpack://webui/./src/DeviceManager/DeviceManager.jsx","webpack://webui/./src/DeviceManager/DeviceManagerStyles.js","webpack://webui/./src/DeviceManager/DeviceSummaryContainer.jsx","webpack://webui/./src/DeviceManager/LabelFilter.jsx","webpack://webui/./src/DeviceManager/LabelFilterContainer.jsx","webpack://webui/./src/DeviceManager/LabelFilterStyles.js","webpack://webui/./src/DeviceManager/LabelsMenu.jsx","webpack://webui/./src/DeviceManager/LabelsMenuContainer.jsx","webpack://webui/./src/DeviceManager/RemoveDevicesButton.jsx","webpack://webui/./src/DeviceManager/RemoveDevicesContainer.jsx","webpack://webui/./src/DeviceManager/static/DeleteSymbol.jsx","webpack://webui/./src/DeviceManager/static/LabelSymbol.jsx","webpack://webui/./src/modules/comet/configeditor.js","webpack://webui/./src/modules/devices/actions.js","webpack://webui/./src/DeviceManager/LabelFilterStyles.css?e18b"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ErrorBox from './ErrorBox';\n\nexport default class ErrorBoundary extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: null,\n            errorInfo: null,\n        };\n    }\n\n    componentDidCatch(error, errorInfo) {\n        this.setState({\n            error,\n            errorInfo,\n        });\n    }\n\n    render() {\n        const { children } = this.props;\n        const { error } = this.state;\n        if (error) {\n            return (\n                <ErrorBox error={error} />\n            );\n        }\n        return children;\n    }\n}\n\nErrorBoundary.propTypes = {\n    children: PropTypes.oneOfType([\n        PropTypes.arrayOf(PropTypes.node),\n        PropTypes.node,\n    ]),\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst AlarmSymbol = ({ color }) => (\n    <svg version=\"1.2\" baseProfile=\"tiny\" x=\"0px\" y=\"0px\" viewBox=\"0 0 24 21\" xmlSpace=\"preserve\">\n        <path\n            fill={color}\n            d=\"M12.7,0.5c-0.4-0.7-1.1-0.7-1.5,0L0.2,19.7C-0.2,20.4,0.1,21,0.9,21h22.2\n    c0.8,0,1.2-0.6,0.8-1.3L12.7,0.5z M12.7,17.7C12.5,17.9,12.2,18,12,18c-0.3,0-0.5-0.1-0.7-0.3C11.1,17.5,11,17.2,11,17\n    c0-0.3,0.1-0.5,0.3-0.7c0.4-0.4,1.1-0.4,1.4,0c0.2,0.2,0.3,0.5,0.3,0.7C13,17.2,12.9,17.5,12.7,17.7L12.7,17.7z M13,13.5\n    c0,0.6-0.5,1-1,1s-1-0.5-1-1v-6c0-0.6,0.5-1,1-1s1,0.5,1,1V13.5L13,13.5z\"\n        />\n    </svg>\n);\n\nAlarmSymbol.propTypes = {\n    color: PropTypes.string,\n};\n\nexport default AlarmSymbol;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst WarningSymbol = ({ color }) => (\n    <svg\n        version=\"1.2\"\n        baseProfile=\"tiny\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        x=\"0px\"\n        y=\"0px\"\n        viewBox=\"0 0 24 24\"\n        xmlSpace=\"preserve\"\n    >\n        <path\n            fill={color}\n            d=\"M12,0C5.4,0,0,5.4,0,12s5.4,12,12,12s12-5.4,12-12S18.6,0,12,0L12,0z M12,18c-0.6,0-1-0.5-1-1\ns0.4-1,1-1c0.5,0,1,0.5,1,1S12.5,18,12,18L12,18z M13,12.5c0,0.5-0.5,1-1,1c-0.6,0-1-0.5-1-1V7c0-0.6,0.4-1,1-1c0.5,0,1,0.4,1,1\nV12.5L13,12.5z\"\n        />\n    </svg>\n);\n\nWarningSymbol.propTypes = {\n    color: PropTypes.string,\n};\n\nexport default WarningSymbol;\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from '@webui-one/router';\nimport * as defaultStyles from '@webui-one/styles/ApplicationDefaultStyles';\nimport Loader from '@webui-one/components/Loading/Loader';\nimport styles from './ManagerItemsStyles';\n\n\nconst ItemLinks = ({ items }) => items.map(item => (\n    <Link\n        title={item.name}\n        key={item.path}\n        style={styles.itemsLink}\n        to={`/webui-one/ConfigurationEditor${item.path}`}\n    >\n        {item.name}\n    </Link>\n));\n\nconst ItemGroupList = ({ itemGroups }) => itemGroups.map(itemGroup => (\n    <div data-handle=\"manager-items-group\" style={styles.group} key={itemGroup.path}>\n        <h2 style={styles.groupTitle}>{itemGroup.name}</h2>\n        <ItemLinks items={itemGroup.children} />\n    </div>\n));\n\nexport default function ManagerItems({ path, onQueryData, rows, isLoading }) {\n    useEffect(() => {\n        onQueryData(path);\n    }, [onQueryData, path]);\n\n    return (\n        <div style={styles.container}>\n            {isLoading && (\n                <div style={styles.loaderContainer}>\n                    <Loader color={defaultStyles.color2} />\n                </div>\n            )}\n            { rows.length === 0 && !isLoading &&\n                <p>No items</p>\n            }\n\n            <ItemGroupList itemGroups={rows} />\n        </div>\n    );\n}\n\nManagerItems.propTypes = {\n    path: PropTypes.string.isRequired,\n    onQueryData: PropTypes.func,\n    isLoading: PropTypes.bool,\n    rows: PropTypes.arrayOf(Object),\n};\n\nManagerItems.defaultProps = {\n    isLoading: false,\n    rows: [],\n};\n","import * as defaultStyles from '@webui-one/styles/ApplicationDefaultStyles';\n\nconst container = {\n    width: '100%',\n    padding: '0 1rem 1rem 1rem',\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'center',\n};\n\nconst group = {\n    margin: '1rem 1rem 0 1rem',\n    textOverflow: 'ellipsis',\n    overflow: 'hidden',\n    maxWidth: '75ch',\n    lineHeight: '1.6',\n};\n\nconst groupTitle = {\n    margin: '0',\n    fontSize: defaultStyles.large2,\n    color: defaultStyles.color2,\n};\n\nconst itemsLink = {\n    display: 'block',\n    margin: '0 0 0 0rem',\n    fontSize: defaultStyles.medium3,\n    textDecoration: 'none',\n    color: defaultStyles.color2,\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n};\n\nconst loaderContainer = {\n    flexBasis: '100%',\n    display: 'flex',\n    justifyContent: 'center',\n};\n\nexport default {\n    container,\n    group,\n    groupTitle,\n    itemsLink,\n    loaderContainer,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { labelTypes } from 'modules/devices/selectors';\nimport style from './SummaryStyle';\n\nconst getDeviceGroupLogicsString = (values) => {\n    const include = values.filter(\n        value => value.type === labelTypes.LBL_INCLUDE).map(item => `\"${item.name}\"`);\n    const oneOf = values.filter(\n        value => value.type === labelTypes.LBL_ONE_OF).map(item => item.name);\n    const exclude = values.filter(\n        value => value.type === labelTypes.LBL_EXCLUDE).map(item => item.name);\n\n    let returnString = '';\n    const includeString = include.join(' AND ');\n    if (includeString) returnString += ` ${includeString}`;\n    const oneOfString = oneOf.join(', ');\n    if (oneOfString) {\n        returnString += returnString ? ' AND' : '';\n        returnString += (oneOf.length > 1) ? ' ONE OF' : '';\n        returnString += ` \"${oneOfString}\"`;\n    }\n    const excludeString = exclude.join(', ');\n    if (excludeString) {\n        returnString += returnString ? ' AND' : '';\n        returnString += (exclude.length > 1) ? ' NOT ANY OF' : ' NOT';\n        returnString += ` \"${excludeString}\"`;\n    }\n    return returnString;\n};\n\nconst getString = (unit, keyword, values) => {\n    const theLogics = getDeviceGroupLogicsString(values);\n    let summary = unit;\n    if (keyword) {\n        summary += ` including \"${keyword}\"`;\n        if (theLogics) summary += ', AND';\n    } else if (theLogics) summary += ' where';\n    if (theLogics) summary += ` group is${theLogics}`;\n    return summary;\n};\n\nconst Summary = ({ unit, labels, keyword }) => (\n    <div style={style} data-handle=\"summary\">\n        {getString(unit, keyword, Object.values(labels))}\n    </div>\n);\n\nSummary.propTypes = {\n    labels: PropTypes.shape(Object),\n    keyword: PropTypes.string,\n    unit: PropTypes.string,\n};\n\nSummary.defaultProps = {\n    labels: {\n    },\n    keyword: '',\n    unit: '',\n};\n\nexport default Summary;\n\nexport {\n    getString as _getString,\n};\n","import * as defaultStyles from '@webui-one/styles/ApplicationDefaultStyles';\n\nexport default {\n    fontSize: defaultStyles.medium1,\n    maxWidth: '1600px',\n    margin: '0.75rem auto 0.75rem auto',\n    padding: '0 1rem',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport ToolTip from '@webui-one/components/ToolTip/ToolTip';\nimport AddSymbol from '@webui-one/styles/static/AddSymbol';\nimport style from './AddListItemButtonStyles';\nimport ModalSchemaInputContainer from 'Common/Components/Modal/ModalSchemaInputContainer';\nimport {\n    selectDeviceOffset,\n    selectDeviceSortColumn,\n    selectDeviceSortOrder,\n    selectDeviceXpathExpression,\n} from 'modules/devices/selectors';\nimport { addDevice } from 'modules/devices/actions';\nimport { deviceListPath, DEVICE_CHUNK_SIZE } from 'modules/devices/paths';\n\nconst ModalSchemaPaths = [deviceListPath];\n\nclass AddDevicesContainer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.showTooltip = this.showTooltip.bind(this);\n        this.hideTooltip = this.hideTooltip.bind(this);\n        this.showAddDeviceModal = this.showAddDeviceModal.bind(this);\n        this.onConfirm = this.onConfirm.bind(this);\n        this.onClose = this.onClose.bind(this);\n        this.setTooltipRef = this.setTooltipRef.bind(this);\n        this.state = {\n            showAddDeviceModal: false,\n            errorOnCreate: undefined,\n            isLoading: false,\n        };\n    }\n\n    onConfirm(createPath) {\n        const {\n            offset,\n            onAddDevice,\n            sortColumn,\n            sortOrder,\n            xpathExpression,\n        } = this.props;\n        this.setState({ isLoading: true });\n        return onAddDevice(\n            createPath,\n            offset,\n            sortColumn,\n            sortOrder,\n            xpathExpression,\n        ).then((result) => {\n            this.setState({ isLoading: false });\n            if (result.error) {\n                this.setState({ errorOnCreate: result.error });\n            } else {\n                this.onClose();\n            }\n        });\n    }\n\n    onClose() {\n        this.setState({ showAddDeviceModal: false, errorOnCreate: undefined });\n    }\n\n    setTooltipRef(tt) {\n        this.tooltip = tt;\n    }\n\n    showAddDeviceModal() {\n        this.setState({ showAddDeviceModal: true });\n    }\n\n    showTooltip() {\n        this.tooltip.show();\n    }\n\n    hideTooltip() {\n        this.tooltip.hide();\n    }\n\n    render() {\n        const { showAddDeviceModal, isLoading, errorOnCreate } = this.state;\n        return (\n            <div>\n                <ToolTip\n                    direction=\"right\"\n                    toolTipText=\"add device\"\n                    ref={this.setTooltipRef}\n                />\n                <button\n                    type=\"button\"\n                    data-handle=\"add-list-item-button\"\n                    style={style.enabled}\n                    onClick={this.showAddDeviceModal}\n                    onMouseDown={this.showTooltip}\n                    onMouseUp={this.hideTooltip}\n                    onMouseEnter={this.showTooltip}\n                    onMouseLeave={this.hideTooltip}\n                >\n                    <AddSymbol />\n                </button>\n                {showAddDeviceModal && (\n                    <ModalSchemaInputContainer\n                        title=\"Add device\"\n                        isLoading={isLoading}\n                        paths={ModalSchemaPaths}\n                        onConfirm={this.onConfirm}\n                        onClose={this.onClose}\n                        closeOnConfirm={false}\n                        error={errorOnCreate}\n                    />\n                )}\n            </div>\n        );\n    }\n}\n\nAddDevicesContainer.propTypes = {\n    offset: PropTypes.number,\n    onAddDevice: PropTypes.func,\n    sortColumn: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.arrayOf(PropTypes.string),\n    ]),\n    sortOrder: PropTypes.string,\n    xpathExpression: PropTypes.string,\n};\n\nconst mapStateToProps = state => ({\n    offset: selectDeviceOffset(state),\n    sortColumn: selectDeviceSortColumn(state),\n    sortOrder: selectDeviceSortOrder(state),\n    xpathExpression: selectDeviceXpathExpression(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n    onAddDevice(\n        createPath,\n        offset,\n        columnKey,\n        sortorder,\n        xpathExpression,\n    ) {\n        return dispatch(\n            addDevice({\n                createPath,\n                chunkSize: DEVICE_CHUNK_SIZE,\n                offset,\n                columnKey,\n                sortorder,\n                xpathExpression,\n            }),\n        );\n    },\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(AddDevicesContainer);\n\nexport {\n    AddDevicesContainer as _AddDevicesContainer,\n};\n","const style = {\n    width: '1.5rem',\n    height: '1.5rem',\n    borderRadius: '1.5rem',\n    display: 'block',\n    padding: '0',\n    border: 'none',\n    background: 'none',\n};\n\nexport default {\n    enabled: {\n        cursor: 'pointer',\n        ...style,\n    },\n    disabled: {\n        ...style,\n    },\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport AlarmSymbol from '@webui-one/styles/static/AlarmSymbol';\nimport WarningSymbol from '@webui-one/styles/static/WarningSymbol';\nimport { ALARM_STATUS } from 'modules/devices/paths';\n\nimport style from './AlarmCellStyles';\n\n\nexport const Symbol = ({ severity }) => {\n    const color = (style[severity] || style.cleared).color;\n    if ([ALARM_STATUS.MAJORS, ALARM_STATUS.CRITICALS, ALARM_STATUS.MINORS].includes(severity)) {\n        return <AlarmSymbol color={color} />;\n    }\n    if ([ALARM_STATUS.WARNINGS, ALARM_STATUS.INDETERMINATES].includes(severity)) {\n        return <WarningSymbol color={color} />;\n    }\n    return null;\n};\n\nSymbol.propTypes = {\n    severity: PropTypes.string,\n};\n\nconst AlarmCell = ({ severity }) => (\n    <div data-handle={`alarm-${severity}`} style={style.wrapper}>\n        <Symbol severity={severity} />\n    </div>\n);\n\nAlarmCell.propTypes = {\n    severity: PropTypes.string,\n};\n\nexport default AlarmCell;\n\n","import * as defaultStyles from '@webui-one/styles/ApplicationDefaultStyles';\n\nexport default {\n    criticals: {\n        color: defaultStyles.color5,\n    },\n    majors: {\n        color: defaultStyles.color17,\n    },\n    minors: {\n        color: defaultStyles.color15,\n    },\n    warnings: {\n        color: defaultStyles.color4,\n    },\n    indeterminates: {\n        color: defaultStyles.color6,\n    },\n    cleared: {\n        color: defaultStyles.color15,\n    },\n    wrapper: {\n        width: '1.2rem',\n        alignSelf: 'center',\n        justifySelf: 'center',\n        lineHeight: 0,\n    },\n};\n\n","import { connect } from 'react-redux';\nimport {\n    selectedDeviceRowsSelector,\n    selectDeviceActions,\n} from 'modules/devices/selectors';\nimport {\n    runCustomActionThunk,\n} from 'modules/yangActions/actions';\nimport BatchActions from 'Common/Components/BatchActions/BatchActions';\n\n\nconst mapStateToProps = state => ({\n    rows: selectedDeviceRowsSelector(state),\n    actions: selectDeviceActions(state),\n});\n\nconst mapDispatchToProps = (\n    dispatch,\n    {\n        funcs: {\n            runCustomAction = runCustomActionThunk,\n        } = {},\n    } = {},\n) => ({\n    onAction(action, path) {\n        return dispatch(runCustomAction({ actionPath: `${path}/${action}` }));\n    },\n});\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(BatchActions);\n\nexport {\n    mapDispatchToProps as _mapDispatchToProps,\n    mapStateToProps as _mapStateToProps,\n};\n","import * as nodesActions from 'modules/nodes/actions';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport SelectMenu from '@webui-one/components/ConfigRender/List/SelectMenu';\nimport {\n    DEVICE_MANAGER_USER_STORAGE_PATH,\n    DEVICE_COLUMNS,\n} from 'modules/devices/paths';\nimport { connect } from 'react-redux';\nimport { isVisibleColumn } from '@webui-one/core/utils/list';\nimport { selectDeviceColumns } from 'modules/devices/selectors';\n\nconst DeviceColumnsContainer = ({\n    onSetColumnVisible,\n    columnsVisibility,\n}) => {\n    const columns = [...DEVICE_COLUMNS];\n    columns.forEach((c, index) => {\n        columns[index].isVisible = isVisibleColumn(columnsVisibility, c);\n    });\n\n    return (\n        <div data-handle=\"device-column-select\">\n            <SelectMenu\n                onChange={(key, value) =>\n                    onSetColumnVisible(DEVICE_MANAGER_USER_STORAGE_PATH, key, value)\n                }\n                columns={columns.filter(c => c.canBeHidden)}\n                enabled\n            />\n        </div>\n    );\n};\n\nDeviceColumnsContainer.propTypes = {\n    onSetColumnVisible: PropTypes.func.isRequired,\n    columnsVisibility: PropTypes.shape(Object),\n};\n\nconst mapStateToProps = state => ({\n    columnsVisibility: selectDeviceColumns(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n    onSetColumnVisible(path, columnKey, value) {\n        return dispatch(nodesActions.setColumnVisibilityAction(path, columnKey, value));\n    },\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(DeviceColumnsContainer);\n\nexport {\n    DeviceColumnsContainer as _DeviceColumnsContainer,\n    mapDispatchToProps as _mapDispatchToProps,\n    mapStateToProps as _mapStateToProps,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport ToolTip from '@webui-one/components/ToolTip/ToolTip';\nimport {\n    selectTotalNumberOfDevices,\n    selectedDeviceCountSelector,\n} from 'modules/devices/selectors';\nimport { DeviceCounter as style } from './DeviceManagerStyles';\n\nclass DeviceCounter extends React.Component {\n    constructor(props) {\n        super(props);\n        this.showTooltip = this.showTooltip.bind(this);\n        this.hideTooltip = this.hideTooltip.bind(this);\n    }\n\n    showTooltip() {\n        this.tooltip.show();\n    }\n\n    hideTooltip() {\n        this.tooltip.hide();\n    }\n\n    render() {\n        const { selected, total } = this.props;\n        return (\n            <div style={style.wrapper}>\n                <ToolTip\n                    direction=\"left\"\n                    toolTipText=\"selected devices / devices in list\"\n                    ref={(tt) => { this.tooltip = tt; }}\n                />\n                <div\n                    data-handle=\"device-counter\"\n                    role=\"tooltip\"\n                    style={style.text}\n                    onMouseDown={this.showTooltip}\n                    onMouseUp={this.hideTooltip}\n                    onMouseEnter={this.showTooltip}\n                    onMouseLeave={this.hideTooltip}\n                >\n                    {`${selected} / ${total}`}\n                </div>\n            </div>\n        );\n    }\n}\n\nDeviceCounter.propTypes = {\n    total: PropTypes.number,\n    selected: PropTypes.number,\n};\n\nconst mapStateToProps = state => ({\n    selected: selectedDeviceCountSelector(state),\n    total: selectTotalNumberOfDevices(state),\n});\n\n\nexport default connect(\n    mapStateToProps,\n    null,\n)(DeviceCounter);\n\nexport {\n    DeviceCounter as _DeviceCounter,\n    mapStateToProps as _mapStateToProps,\n};\n\n","import ActionButton from 'modules/yangActions/ActionButton';\nimport List from '@webui-one/components/ConfigRender/List/List';\nimport React from 'react';\nimport Pagination from '@webui-one/components/ConfigRender/List/Pagination';\nimport PropTypes from 'prop-types';\nimport styles from '@webui-one/components/ConfigRender/List/ListStyles';\nimport ManagerItems from 'Common/Components/ManagerItems/ManagerItems';\nimport { connect } from 'react-redux';\nimport { CONFIGURATION_EDITOR_NAME } from 'ConfigurationEditor/defines';\nimport { getLinkWithPath } from 'ConfigurationEditor/utils';\nimport { Link } from '@webui-one/router';\nimport { translate } from 'modules/intl';\nimport { createResultCellFactory } from 'modules/yangActions/ActionResult';\nimport { isEqual } from '@webui-one/core/utils/array';\nimport { pathOr } from '@webui-one/core/utils/object';\nimport {\n    runCustomActionThunk,\n} from 'modules/yangActions/actions';\nimport {\n    getGlobalApplicationSetting,\n    ACTION_STATUS_INDICATOR_TIMEOUT,\n} from 'modules/globalSettings/actions';\nimport {\n    getDevices,\n    selectDeviceAction,\n    setDeviceExpandedAction,\n} from 'modules/devices/actions';\nimport {\n    selectGlobalSetting,\n} from 'modules/globalSettings/selectors';\nimport {\n    createCheckBoxCellFactory,\n    createCheckboxHeaderFactory,\n    createHeaderFactory,\n    createDataCellFactory,\n    createSortableHeaderFactory,\n    getDefaultColumn,\n    createDirtyCellFactory,\n    createEmptyHeaderFactory,\n    createServieExpandableButtonCellFactory,\n} from '@webui-one/components/ConfigRender/List/ListCells';\nimport {\n    deviceRowAndChangesSelector,\n    selectDeviceColumns,\n    selectDeviceGroupChangeIsPending,\n    selectDeviceOffset,\n    selectDeviceSortColumn,\n    selectDeviceSortOrder,\n    selectHasActiveLabels,\n    selectDeviceXpathExpression,\n    selectLastDeleteDeviceTimestamp,\n    selectTotalNumberOfDevices,\n    selectDeviceAlarms,\n    selectDeviceManagerIsLoading,\n} from 'modules/devices/selectors';\nimport {\n    ALARM_PRECEDENCE,\n    COLUMNS_ACTION,\n    COLUMNS_SELECTION,\n    DEVICE_COLUMNS,\n    QUERY_SELECTION,\n    alarmsPath,\n    deviceListPath,\n    DEVICE_CHUNK_SIZE } from 'modules/devices/paths';\nimport {\n    subscribeCdbOperAction,\n    subscribeChangesAction,\n    unsubscribeCdbOperAction,\n    unsubscribeChangesAction,\n} from 'modules/comet/actions';\nimport {\n    deleteAction,\n    deleteNodeAndChildrenAction,\n    getValueAction,\n    modifiedNodesAction,\n    createAction,\n    query,\n} from 'modules/nodes/actions';\nimport { updateConfig } from 'modules/comet/configeditor';\nimport { COLUMN_VISIBILITY } from 'modules/userdata/selectors';\n\nimport {\n    isVisibleColumn,\n} from '@webui-one/core/utils/list';\nimport {\n    truncateLongString,\n} from '@webui-one/core/utils/string';\n\nimport AlarmCell from './AlarmCell';\nimport { getLinkWithDevice } from 'AlarmManager';\n\n\nconst STYLE_NAME = 'deviceList';\n\nconst isAlarm = sortColumn => Array.isArray(sortColumn) && sortColumn.includes(ALARM_PRECEDENCE[0]);\n\nconst style = styles(STYLE_NAME).list;\n\nconst createAlarmCell = (severity, _, __, deviceData) => {\n    if (severity === 'cleared') return <AlarmCell severity={severity} />;\n    const device = deviceData.data.name;\n    const path = getLinkWithDevice(device);\n    return (\n        <div style={styles('defaultStyle').list.row.alarm}>\n            <Link to={path} >\n                <AlarmCell severity={severity} />\n            </Link>\n        </div>\n    );\n};\n\nconst configurationCellFactory = (name, key, rowKey) => {\n    const toConfig = getLinkWithPath(`${rowKey}/config`);\n    const configKey = `config-${key}`;\n    return (\n        <div key={configKey} style={style.cell.buttonWrapper}>\n            <Link to={toConfig} style={style.cell.link}>\n                {translate('devicemanager.config_button')}\n            </Link>\n        </div>\n    );\n};\n\nconst createButtonCellFactory = (action, onAction, onExpand, btnStyle, actionIndicatorTimeout) => (\n    (result, key, rowKey, row) => {\n        const completedAt = pathOr(\n            0,\n            ['yangAction', 'completedAt'],\n            result,\n        );\n        const status = pathOr(undefined, ['yangAction', 'status'], result);\n        return (\n            <ActionButton\n                isDisabled={row && row.data && row.data.disableActions}\n                style={btnStyle}\n                result={(result || {}).status}\n                status={status}\n                path={rowKey}\n                action={action}\n                onAction={onAction}\n                onExpand={onExpand}\n                isExpanded={(result || {}).isExpanded}\n                actionIndicatorTimeout={actionIndicatorTimeout}\n                completedAt={completedAt}\n            />\n        );\n    }\n);\n\nconst createExpandableCellFactory = onQueryData =>\n    (...props) => {\n        const [columnData, , rowKey, rowData] = props;\n        if (columnData.isExpanded && columnData.column === 'services') {\n            const path = `${rowKey}/service-list`;\n            const data = rowData.data.serviceItemsData;\n\n            return (\n                <ManagerItems\n                    onQueryData={onQueryData}\n                    isLoading={data.isLoading}\n                    rows={data.rows}\n                    path={path}\n                />\n            );\n        }\n\n        return createResultCellFactory()(...props);\n    };\n\nconst getDeviceColumn = key => ({\n    ...getDefaultColumn(),\n    ...DEVICE_COLUMNS.find(c => c.key === key),\n});\n\nclass DeviceListContainer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onSelectAllRows = this.onSelectAllRows.bind(this);\n        this.onSelectRow = this.onSelectRow.bind(this);\n        this.onChangeSortOrder = this.onChangeSortOrder.bind(this);\n        this.onCometUpdate = this.onCometUpdate.bind(this);\n        this.onGoToPage = this.onGoToPage.bind(this);\n        this.onRunAction = this.onRunAction.bind(this);\n        this.handleExpand = this.handleExpand.bind(this);\n        this.state = {\n            hasSelectedAll: false,\n        };\n        this.actions = {\n            ping: {},\n            connect: {},\n        };\n    }\n\n    componentDidMount() {\n        const {\n            onLoad,\n            onLoadActionStatusIndicatorTimeout,\n            onSubscribe,\n            selection,\n            sortColumn,\n            sortOrder,\n            xpathExpression,\n        } = this.props;\n        onLoad(1, sortColumn, sortOrder, xpathExpression, selection);\n        onSubscribe(this.onCometUpdate);\n        onLoadActionStatusIndicatorTimeout();\n    }\n\n    componentDidUpdate(prevProps) {\n        const {\n            alarms,\n            deviceGroupChangeIsPending,\n            hasActiveLabels,\n            lastDeleteDeviceTimestamp,\n            onLoad,\n            offset,\n            selection,\n            sortColumn,\n            sortOrder,\n            rows,\n            totalNumberOfResults,\n            xpathExpression,\n        } = prevProps;\n        const {\n            xpathExpression: newXpathExpression,\n            deviceGroupChangeIsPending: newDeviceGroupChangeIsPending,\n            alarms: newAlarms,\n            selection: newSelection,\n            lastDeleteDeviceTimestamp: newLastDeleteDeviceTimestamp,\n            isLoading,\n        } = this.props;\n\n        if (isLoading) return;\n\n        if (xpathExpression !== newXpathExpression ||\n            !isEqual(selection, newSelection) ||\n            (hasActiveLabels && deviceGroupChangeIsPending && !newDeviceGroupChangeIsPending) ||\n            (alarms !== newAlarms)\n        ) {\n            const newOffset = alarms !== newAlarms ? offset : 1;\n            onLoad(newOffset, sortColumn, sortOrder, newXpathExpression, newSelection);\n        }\n\n        if (lastDeleteDeviceTimestamp !== newLastDeleteDeviceTimestamp && rows.length > 0) {\n            this.onGoToPage(offset);\n        }\n\n        if (rows && rows.length === 0 && totalNumberOfResults > 0) {\n            this.onGoToPage(Math.max(1, offset - DEVICE_CHUNK_SIZE));\n        }\n    }\n\n    componentWillUnmount() {\n        const { onUnsubscribe } = this.props;\n        onUnsubscribe(this.onCometUpdate);\n    }\n\n    handleExpand(rowKey, newColumn) {\n        const { onExpand, rows } = this.props;\n        const row = rows.find(r => r.rowKey === rowKey);\n        const { isExpanded, column } = row.data.expandable;\n        const shouldExpand = (!isExpanded || newColumn !== column);\n        onExpand(rowKey, newColumn, shouldExpand);\n    }\n\n    onSelectAllRows(hasSelectedAll) {\n        const { rows, onSelectRows } = this.props;\n        this.setState({ hasSelectedAll });\n        const rowKeys = rows.map(row => row.rowKey);\n        onSelectRows(hasSelectedAll, rowKeys);\n    }\n\n    onSelectRow(isSelected, rowKey) {\n        const { onSelectRows } = this.props;\n        onSelectRows(isSelected, [rowKey]);\n    }\n\n    onChangeSortOrder(columnKey) {\n        const {\n            onLoad,\n            selection,\n            sortOrder,\n            sortColumn,\n            isLoading,\n            xpathExpression,\n        } = this.props;\n\n        if (!isLoading) {\n            const sortColumnToCheck = isAlarm(sortColumn) ? 'alarm' : sortColumn;\n            const isDesc = columnKey === sortColumnToCheck && sortOrder !== 'descending';\n            const isNone = columnKey === sortColumnToCheck && sortOrder === 'descending';\n            let newSortorder = 'ascending';\n            let newColumnKey = columnKey;\n            if (isDesc) newSortorder = 'descending';\n            if (isNone) {\n                newSortorder = undefined;\n                newColumnKey = undefined;\n            }\n            const offset = 1;\n            if (newColumnKey === 'alarm') newColumnKey = ALARM_PRECEDENCE;\n            onLoad(offset, newColumnKey, newSortorder, xpathExpression, selection);\n        }\n    }\n\n    onCometUpdate(notifications, subscription) {\n        const {\n            onCreate,\n            onDelete,\n            onModifiedNodes,\n            onUpdateLeaf,\n        } = this.props;\n        updateConfig(\n            notifications,\n            subscription.params.path,\n            {\n                onCreate,\n                onDelete,\n                onModifiedNodes,\n                onUpdateLeaf,\n            },\n        );\n    }\n\n    onGoToPage(offset) {\n        const {\n            isLoading,\n            onLoad,\n            selection,\n            sortOrder,\n            sortColumn,\n            xpathExpression,\n        } = this.props;\n\n        if (!isLoading) {\n            onLoad(offset, sortColumn, sortOrder, xpathExpression, selection);\n        }\n    }\n\n    onRunAction(action, path) {\n        const { onAction } = this.props;\n        return onAction(action, path);\n    }\n\n    render() {\n        const {\n            columnsVisibility,\n            isLoading,\n            offset,\n            onQueryServiceItems,\n            rows,\n            sortColumn,\n            sortOrder: sortOrdering,\n            totalNumberOfResults,\n            actionIndicatorTimeout,\n        } = this.props;\n        const { hasSelectedAll } = this.state;\n        const nrOfStaticColumns = 2;\n        const columnKeys = [...COLUMNS_SELECTION];\n        const serviceColumnKeyIndex = columnKeys.findIndex(c => c.title === 'services');\n        const serviceColumn = columnKeys.splice(serviceColumnKeyIndex)[0];\n        const nrOfVisibleColumns = DEVICE_COLUMNS\n            .filter(c => isVisibleColumn(columnsVisibility, c) && c.canBeHidden).length;\n        const formatter = value => truncateLongString(value, 180, 40, nrOfVisibleColumns);\n        const sortOrder = {\n            columnKey: isAlarm(sortColumn) ? 'alarm' : sortColumn,\n            isDesc: sortOrdering === 'descending',\n        };\n        let columns = columnKeys.map(({ title, key }) => ({\n            ...getDefaultColumn(),\n            createHeader: createSortableHeaderFactory(\n                this.onChangeSortOrder,\n                sortOrder,\n            ),\n            createCell: createDataCellFactory(\n                CONFIGURATION_EDITOR_NAME,\n                Link,\n                formatter,\n            ),\n            title,\n            key,\n        }));\n\n        columns.unshift({\n            ...getDefaultColumn(),\n            key: 'isSelected',\n            canBeHidden: false,\n            isSticky: true,\n            title: 'is selected',\n            createHeader: createCheckboxHeaderFactory(\n                hasSelectedAll,\n                this.onSelectAllRows,\n                STYLE_NAME,\n            ),\n            createCell: createCheckBoxCellFactory(this.onSelectRow, STYLE_NAME),\n        });\n\n        columns.unshift({\n            ...getDefaultColumn(),\n            key: 'isDirty',\n            canBeHidden: false,\n            isSticky: true,\n            title: 'is dirty',\n            createHeader: createEmptyHeaderFactory(STYLE_NAME),\n            createCell: createDirtyCellFactory(STYLE_NAME),\n        });\n\n        columns.push({\n            ...getDeviceColumn('services'),\n            title: serviceColumn.title,\n            key: serviceColumn.key,\n            createHeader: createHeaderFactory(\n                'defaultStyle',\n                style.header.found,\n            ),\n            createCell: createServieExpandableButtonCellFactory({\n                expandName: 'services',\n                onExpand: this.handleExpand,\n            }),\n        });\n\n        COLUMNS_ACTION.forEach(({ key }) => columns.push({\n            ...getDeviceColumn(key),\n            createHeader: createHeaderFactory(\n                'defaultStyle',\n                style.header.found,\n            ),\n            createCell: createButtonCellFactory(\n                key,\n                this.onRunAction,\n                this.handleExpand,\n                style.cell.actionButton,\n                actionIndicatorTimeout),\n        }));\n\n        columns.push({\n            ...getDeviceColumn('alarm'),\n            createCell: createAlarmCell,\n            createHeader: createSortableHeaderFactory(\n                () => this.onChangeSortOrder('alarm'),\n                sortOrder,\n            ),\n        });\n\n        columns.push({\n            ...getDeviceColumn('config'),\n            createCell: configurationCellFactory,\n        });\n\n        columns = columns.filter(c => isVisibleColumn(columnsVisibility, c));\n\n        if (columns.length === nrOfStaticColumns) {\n            const filluppColumn = {\n                ...getDefaultColumn('empty'),\n                title: '',\n            };\n            columns.push(filluppColumn);\n        }\n\n        columns.push({\n            ...getDeviceColumn('expandable'),\n            createCell: createExpandableCellFactory(onQueryServiceItems),\n        });\n\n        const additionalElements = [\n            totalNumberOfResults === 0 && (\n                <div\n                    key=\"empty\"\n                    style={style.empty}\n                >\n                    No devices in list\n                </div>\n            ),\n            <Pagination\n                chunkSize={DEVICE_CHUNK_SIZE}\n                key=\"pagination\"\n                offset={offset}\n                onGoToPage={this.onGoToPage}\n                totalNumberOfResults={totalNumberOfResults}\n            />,\n        ];\n\n        return (\n            <div data-handle=\"list-wrapper\">\n                <List\n                    additionalElements={additionalElements}\n                    chunkSize={DEVICE_CHUNK_SIZE}\n                    columns={columns}\n                    isLoading={isLoading}\n                    LinkComponent={Link}\n                    offset={offset}\n                    rows={rows}\n                    shouldPadRows={false}\n                    styleName=\"deviceList\"\n                    totalNumberOfResults={totalNumberOfResults}\n                    shouldRetainColumnsSize={false}\n                    nrOfStaticColumns={nrOfStaticColumns}\n                />\n            </div>\n        );\n    }\n}\n\nDeviceListContainer.propTypes = {\n    alarms: PropTypes.shape({}),\n    columnsVisibility: PropTypes.shape(Object),\n    deviceGroupChangeIsPending: PropTypes.bool,\n    hasActiveLabels: PropTypes.bool,\n    actionIndicatorTimeout: PropTypes.string,\n    isLoading: PropTypes.oneOfType([\n        PropTypes.bool,\n        PropTypes.shape({}),\n    ]),\n    lastDeleteDeviceTimestamp: PropTypes.number,\n    offset: PropTypes.number,\n    onAction: PropTypes.func.isRequired,\n    onCreate: PropTypes.func,\n    onDelete: PropTypes.func,\n    onExpand: PropTypes.func,\n    onLoad: PropTypes.func.isRequired,\n    onLoadActionStatusIndicatorTimeout: PropTypes.func,\n    onModifiedNodes: PropTypes.func,\n    onSelectRows: PropTypes.func.isRequired,\n    onSubscribe: PropTypes.func.isRequired,\n    onUnsubscribe: PropTypes.func.isRequired,\n    onUpdateLeaf: PropTypes.func,\n    onQueryServiceItems: PropTypes.func,\n    rows: PropTypes.arrayOf(Object),\n    selection: PropTypes.arrayOf(PropTypes.string),\n    sortColumn: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.arrayOf(PropTypes.string),\n    ]),\n    sortOrder: PropTypes.string,\n    totalNumberOfResults: PropTypes.number,\n    xpathExpression: PropTypes.string,\n};\n\nDeviceListContainer.defaultProps = {\n    columns: [],\n    rows: [],\n    selection: [],\n};\n\nconst mapStateToProps = (state) => {\n    const isLoading = selectDeviceManagerIsLoading(state);\n    const columnsVisibility = selectDeviceColumns(state);\n\n    const keys = Object.keys(columnsVisibility);\n    const selection = QUERY_SELECTION.filter(c => (\n        !keys.includes(c)\n        || columnsVisibility[c] !== COLUMN_VISIBILITY.HIDDEN_USER\n    ));\n    const rows = deviceRowAndChangesSelector(state);\n\n    return {\n        alarms: selectDeviceAlarms(state),\n        columnsVisibility,\n        deviceGroupChangeIsPending: selectDeviceGroupChangeIsPending(state),\n        hasActiveLabels: selectHasActiveLabels(state),\n        isLoading,\n        lastDeleteDeviceTimestamp: selectLastDeleteDeviceTimestamp(state),\n        offset: selectDeviceOffset(state),\n        rows,\n        selection,\n        sortColumn: selectDeviceSortColumn(state),\n        sortOrder: selectDeviceSortOrder(state),\n        totalNumberOfResults: selectTotalNumberOfDevices(state),\n        xpathExpression: selectDeviceXpathExpression(state),\n        actionIndicatorTimeout: selectGlobalSetting(\n            state,\n            ACTION_STATUS_INDICATOR_TIMEOUT,\n        ),\n    };\n};\n\nconst mapDispatchToProps = (\n    dispatch,\n    {\n        funcs: {\n            runCustomAction = runCustomActionThunk,\n        } = {},\n    } = {},\n) => ({\n    onAction(action, path) {\n        return dispatch(runCustomAction({ actionPath: `${path}/${action}` }));\n    },\n    onLoad(offset, columnKey, sortorder, xpathExpression, selection) {\n        return dispatch(getDevices({\n            chunkSize: DEVICE_CHUNK_SIZE,\n            offset,\n            columnKey,\n            selection,\n            sortorder,\n            xpathExpression,\n        }));\n    },\n    onLoadActionStatusIndicatorTimeout() {\n        dispatch(getGlobalApplicationSetting({\n            setting: ACTION_STATUS_INDICATOR_TIMEOUT,\n        }));\n    },\n    onSelectRows(isSelected, rowKeys) {\n        dispatch(selectDeviceAction(isSelected, rowKeys));\n    },\n    onExpand(path, column, isExpanded) {\n        return dispatch(setDeviceExpandedAction(path, column, isExpanded));\n    },\n    onSubscribe(handler) {\n        dispatch(subscribeCdbOperAction([alarmsPath], handler));\n        dispatch(subscribeChangesAction([deviceListPath], handler));\n    },\n    onUnsubscribe(handler) {\n        dispatch(unsubscribeCdbOperAction([alarmsPath], handler));\n        dispatch(unsubscribeChangesAction([deviceListPath], handler));\n    },\n    onModifiedNodes(paths) {\n        dispatch(modifiedNodesAction(paths));\n    },\n    onUpdateLeaf(path, value) {\n        dispatch(getValueAction(path, value));\n    },\n    onDelete(path, deleteChildren = false) {\n        if (deleteChildren !== true) {\n            dispatch(deleteAction(path));\n        } else {\n            dispatch(deleteNodeAndChildrenAction(path));\n        }\n    },\n    onCreate(path) {\n        dispatch(createAction(path));\n    },\n    onQueryServiceItems(path) {\n        dispatch(query({ path }));\n    },\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(DeviceListContainer);\n\nexport {\n    DeviceListContainer as _DeviceListContainer,\n    mapDispatchToProps as _mapDispatchToProps,\n    mapStateToProps as _mapStateToProps,\n    configurationCellFactory as _configurationCellFactory,\n    createButtonCellFactory as _createButtonCellFactory,\n    createAlarmCell as _createAlarmCell,\n};\n","import HeaderContainer from 'Common/Components/Header/HeaderContainer';\nimport FooterContainer from 'Common/Components/Footer/FooterContainer';\nimport React from 'react';\nimport ErrorBoundary from '@webui-one/components/ConfigRender/ErrorBoundary';\n\nimport * as defaultStyles from '@webui-one/styles/ApplicationDefaultStyles';\nimport DeviceCounterContainer from './DeviceCounterContainer';\nimport DeviceColumnsContainer from './DeviceColumnsContainer';\nimport AddDevicesContainer from './AddDevicesContainer';\nimport RemoveDevicesContainer from './RemoveDevicesContainer';\nimport DeviceListContainer from './DeviceListContainer';\nimport LabelsMenuContainer from './LabelsMenuContainer';\nimport LabelFilterContainer from './LabelFilterContainer';\nimport style from './DeviceManagerStyles';\nimport DeviceBatchActions from './DeviceBatchActions';\nimport DeviceSummaryContainer from './DeviceSummaryContainer';\n\nconst DeviceManager = () => (\n    <div style={style.application}>\n        <HeaderContainer\n            additionalComponentsRight={[\n                <DeviceBatchActions />,\n                <LabelsMenuContainer />,\n            ]}\n        >\n            <div style={style.secondHeader}>\n                <div style={style.contentWrapper}>\n                    <div style={style.container}>\n                        <AddDevicesContainer />\n                    </div>\n                    <div style={style.container}>\n                        <RemoveDevicesContainer />\n                    </div>\n                    <div style={style.container}>\n                        <DeviceColumnsContainer />\n                    </div>\n                    <DeviceCounterContainer />\n                    <LabelFilterContainer />\n                </div>\n            </div>\n            <div style={defaultStyles.shadow} />\n        </HeaderContainer>\n        <div style={style.scrollingContainer}>\n            <DeviceSummaryContainer />\n            <ErrorBoundary>\n                <DeviceListContainer />\n            </ErrorBoundary>\n        </div>\n        <FooterContainer />\n    </div>\n);\n\nexport default DeviceManager;\n","import * as defaultStyles from '@webui-one/styles/ApplicationDefaultStyles';\n\nconst rowStyle = {};\n\nconst image = {\n    verticalAlign: 'middle',\n    height: '1rem',\n};\n\nconst container = {\n    alignSelf: 'center',\n    marginRight: '0.5rem',\n    position: 'relative',\n};\n\nexport default {\n    application: {\n        ...defaultStyles.application,\n        height: '100vh',\n        display: 'flex',\n        flexFlow: 'column',\n        backgroundImage: defaultStyles.pattern1,\n    },\n    scrollingContainer: {\n        overflow: 'auto',\n        flexGrow: '1',\n    },\n    secondHeader: {\n        backgroundColor: defaultStyles.color11,\n        borderTop: '1px solid #cccccc',\n        height: '50px',\n        justifyContent: 'flex-end',\n    },\n    contentWrapper: {\n        display: 'flex',\n        maxWidth: defaultStyles.maxWidth,\n        margin: '0 auto',\n        height: '100%',\n        padding: '0 1rem',\n    },\n    container: {\n        ...container,\n    },\n    image: {\n        ...image,\n        height: '1.5rem',\n    },\n};\n\nconst menuArrow = {\n    width: '1.2rem',\n    height: '1.2rem',\n    left: '5.6rem',\n    transform: 'translate(-50%, -50%)rotate(45deg)',\n    backgroundColor: defaultStyles.color3,\n    position: 'absolute',\n};\n\nconst labelsMenu = {\n    container,\n    wrapper: {\n        position: 'absolute',\n        width: '9.2rem',\n        backgroundColor: defaultStyles.color3,\n        padding: '1rem',\n        boxShadow: 'rgb(136, 136, 136) 0px 0px 3px 0px',\n        color: defaultStyles.textColor2,\n        ...defaultStyles.fontCondensed,\n    },\n    overlay: {\n        position: 'fixed',\n        backgroundColor: 'transparent',\n        top: '0',\n        left: '0',\n        width: '100%',\n        height: '100%',\n    },\n    pop: {\n        position: 'absolute',\n        left: '-4.5rem',\n        top: '2.55rem',\n        zIndex: '1',\n    },\n    menuArrow,\n    menuArrowShadow: {\n        ...menuArrow,\n        boxShadow: 'rgb(136, 136, 136) 0px 0px 3px 0px',\n    },\n    header: {\n        marginBottom: '1rem',\n    },\n    labelImage: {\n        height: '0.8rem',\n        verticalAlign: 'middle',\n    },\n    labelContainer: {\n        display: 'flex',\n        marginTop: '1px',\n        marginBottom: '1px',\n    },\n    labelsContainer: {\n        maxHeight: '40vh',\n        overflow: 'auto',\n    },\n    label: {\n        alignSelf: 'center',\n        fontSize: defaultStyles.medium2,\n        wordBreak: 'break-all',\n        marginRight: '0.5rem',\n    },\n    deleteLabel: {\n        marginLeft: 'auto',\n        flexShrink: '0',\n        padding: '0',\n        backgroundColor: 'transparent',\n        border: 'none',\n        cursor: 'pointer',\n        color: defaultStyles.color1,\n        fontSize: defaultStyles.large1,\n        lineHeight: '1',\n    },\n    createContainer: {\n        display: 'flex',\n        marginTop: '0.5rem',\n    },\n    input: {\n        width: '7rem',\n        padding: '0.25rem',\n        border: `1px solid ${defaultStyles.color6}`,\n    },\n    button: {\n        cursor: 'pointer',\n        border: 'none',\n        display: 'flex',\n        backgroundColor: 'transparent',\n    },\n    symbol: {\n        width: '1.1rem',\n    },\n    arrow: {\n        width: '0.5rem',\n        marginLeft: '0.5rem',\n        alignSelf: 'center',\n    },\n};\n\nconst DeviceCounter = {\n    wrapper: {\n        position: 'relative',\n        display: 'flex',\n        alignSelf: 'center',\n        marginLeft: '1rem',\n    },\n    text: {\n        fontSize: '1rem',\n        color: defaultStyles.textColor2,\n        whiteSpace: 'nowrap',\n    },\n};\n\nexport {\n    DeviceCounter,\n    labelsMenu,\n    rowStyle,\n};\n","import { connect } from 'react-redux';\nimport {\n    selectLabels,\n    selectDeviceSearch,\n    selectHasActiveLabels,\n} from 'modules/devices/selectors';\nimport Summary from 'Common/Components/Summary/Summary';\n\nconst mapStateToProps = state => ({\n    labels: selectLabels(state),\n    keyword: selectDeviceSearch(state),\n    unit: (selectHasActiveLabels(state) || selectDeviceSearch(state)) ? 'devices' : '',\n});\n\nexport default connect(\n    mapStateToProps,\n)(Summary);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { labelTypes } from 'modules/devices/selectors';\nimport style from './LabelFilterStyles';\nimport cssStyles from './LabelFilterStyles.css';\nimport DeleteSymbol from './static/DeleteSymbol';\n\n\nexport const getLabelTypeColor = (label) => {\n    switch (label.type) {\n    case labelTypes.LBL_ONE_OF:\n        return '#d0c994';\n    case labelTypes.LBL_INCLUDE:\n        return '#7faa85';\n    case labelTypes.LBL_EXCLUDE:\n        return '#e5a5a5';\n    case labelTypes.SEARCH:\n        return '';\n    default:\n        throw Error(`Unknown label type: '${label.type}'`);\n    }\n};\n\nexport const getLabelTypeText = (label) => {\n    switch (label.type) {\n    case labelTypes.LBL_ONE_OF:\n        return '∪';\n    case labelTypes.LBL_INCLUDE:\n        return '∩';\n    case labelTypes.LBL_EXCLUDE:\n        return '¬';\n    case labelTypes.SEARCH:\n        return 'include:';\n    default:\n        throw Error(`Unknown label type: '${label.type}'`);\n    }\n};\n\nexport const getLabelTextNode = label => (\n    <span>\n        <span style={{ color: getLabelTypeColor(label) }}>{getLabelTypeText(label)}</span>\n        {` ${label.name}`}\n    </span>\n);\n\nconst LabelFilter = ({\n    autoCompleteIsVisible,\n    filteredDeviceGroups,\n    labels,\n    onBlur,\n    onChange,\n    onFilterMenuRef,\n    onFocus,\n    onInitHide,\n    onKeyDown,\n    onLabelRemove,\n    onResetHide,\n    value,\n}) => {\n    const content = Object.values(labels).map((label, index) => (\n        <div\n            style={{\n                ...style.wrapper,\n            }}\n            key={index}\n            data-handle={`filter-${label.name}-${label.type}`}\n        >\n            <div style={style.label}>{getLabelTextNode(label)}</div>\n            <button\n                type=\"button\"\n                style={style.button}\n                onClick={() => { onLabelRemove(label); }}\n                key={`btn${index}`}\n            >\n                <DeleteSymbol color=\"inherit\" />\n            </button>\n        </div>\n    ));\n\n    return (\n        <div style={style.labelFilter} data-handle=\"labelFilter\">\n            {content}\n            <div style={style.wrapper}>\n                <input\n                    className={cssStyles.input}\n                    onKeyDown={onKeyDown}\n                    data-handle=\"labelInput\"\n                    onFocus={onFocus}\n                    onBlur={onBlur}\n                    onChange={e => onChange(e.target.value)}\n                    placeholder=\"+Add filter\"\n                    value={value}\n                />\n                <span\n                    style={style.button}\n                    key=\"add\"\n                />\n                {autoCompleteIsVisible && filteredDeviceGroups.length > 0 && (\n                    <div style={style.popDownMenu.pop}>\n                        <div style={style.popDownMenu.menuArrowShadow} />\n                        <div\n                            data-handle=\"add-filter-menu\"\n                            style={style.popDownMenu.wrapper}\n                            onMouseEnter={onResetHide}\n                            onMouseLeave={onInitHide}\n                            onBlur={onBlur}\n                            ref={onFilterMenuRef}\n                        >\n                            <div>\n                                {filteredDeviceGroups}\n                            </div>\n                        </div>\n                        <div style={style.popDownMenu.menuArrow} />\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nLabelFilter.propTypes = {\n    autoCompleteIsVisible: PropTypes.bool,\n    filteredDeviceGroups: PropTypes.arrayOf(PropTypes.shape(Object)),\n    labels: PropTypes.shape(Object),\n    onBlur: PropTypes.func,\n    onChange: PropTypes.func,\n    onFocus: PropTypes.func,\n    onFilterMenuRef: PropTypes.func,\n    onInitHide: PropTypes.func,\n    onKeyDown: PropTypes.func,\n    onLabelRemove: PropTypes.func,\n    onResetHide: PropTypes.func,\n    value: PropTypes.string,\n};\n\nexport default LabelFilter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n    labelAddAction,\n    labelRemoveAction,\n    loadDeviceGroups,\n} from 'modules/devices/actions';\nimport {\n    labelTypes,\n    selectDeviceGroupsWithDevices,\n    selectLabels,\n} from 'modules/devices/selectors';\nimport LabelFilter, {\n    getLabelTextNode,\n} from './LabelFilter';\nimport style from './LabelFilterStyles';\n\nclass LabelFilterContainer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.getFilteredLabels = this.getFilteredLabels.bind(this);\n        this.labelAdd = this.labelAdd.bind(this);\n        this.onBlur = this.onBlur.bind(this);\n        this.onChange = this.onChange.bind(this);\n        this.onFilterMenuRef = this.onFilterMenuRef.bind(this);\n        this.onFocus = this.onFocus.bind(this);\n        this.onKeyDown = this.onKeyDown.bind(this);\n        this.isElementInVisibleInList = this.isElementInVisibleInList.bind(this);\n        this.state = {\n            autoCompleteIsVisible: false,\n            dropDownIndex: 0,\n            inputValue: '',\n            inputLabels: [],\n        };\n    }\n\n    componentDidMount() {\n        const { onLoadDeviceGroups } = this.props;\n        onLoadDeviceGroups();\n    }\n\n    componentDidUpdate() {\n        if (this.deviceGroupsOption && this.deviceGroups && !this.isElementInVisibleInList()) {\n            this.deviceGroups.scrollTop = this.deviceGroupsOption.offsetTop;\n        }\n    }\n\n    onFocus() {\n        const inputLabels = this.getFilteredLabels('');\n        this.setState({ autoCompleteIsVisible: true, dropDownIndex: 0, inputLabels });\n    }\n\n    onBlur() {\n        this.setState({ autoCompleteIsVisible: false, inputValue: '' });\n    }\n\n    onChange(inputValue) {\n        const inputLabels = this.getFilteredLabels(inputValue);\n        this.setState({ dropDownIndex: 0, inputValue, inputLabels });\n    }\n\n    onKeyDown(e) {\n        const { autoCompleteIsVisible, dropDownIndex, inputLabels } = this.state;\n\n        if (e.key === 'Enter' && autoCompleteIsVisible) {\n            const label = inputLabels[dropDownIndex];\n            if (label) this.labelAdd();\n        }\n        if (e.key === 'Escape') {\n            this.setState({ autoCompleteIsVisible: false, inputValue: '' });\n        }\n        if ((e.key === 'ArrowUp' || e.key === 'ArrowDown') && autoCompleteIsVisible) {\n            const numLabels = inputLabels.length;\n            const diff = e.key === 'ArrowUp' ? -1 : 1;\n            this.setState({ dropDownIndex: (dropDownIndex + diff + numLabels) % numLabels });\n            e.preventDefault();\n        }\n    }\n\n    onFilterMenuRef(dg) {\n        this.deviceGroups = dg;\n    }\n\n    getFilteredLabels(inputValue) {\n        const { deviceGroups, labels } = this.props;\n        const labelTypesCopy = { ...labelTypes };\n        delete labelTypesCopy[labelTypes.SEARCH];\n\n        const nonEmpty = deviceGroups.filter((group) => {\n            if (Object.values(labels).map(l => l.name).indexOf(group) >= 0) return false;\n            return true;\n        });\n        const beginsWith = nonEmpty.filter((group) => {\n            if (group.startsWith(inputValue)) return true;\n            return false;\n        });\n        const includes = nonEmpty.filter((group) => {\n            if (!group.includes(inputValue) ||\n            group.startsWith(inputValue)) return false;\n            return true;\n        });\n        const filteredLabels = beginsWith.concat(includes).reduce((acc, name) => [\n            ...acc,\n            ...Object.values(labelTypesCopy).map(type => ({ name, type })),\n        ], []);\n\n        if (inputValue) {\n            return [\n                { name: inputValue, type: labelTypes.SEARCH },\n                ...filteredLabels,\n            ];\n        }\n        return filteredLabels;\n    }\n\n    getFilteredGroupsComponents() {\n        const { autoCompleteIsVisible, dropDownIndex, inputLabels } = this.state;\n        if (!autoCompleteIsVisible) return [];\n        return inputLabels.map((val, ix) => (\n            <a\n                className=\"deviceGroups\"\n                role=\"button\"\n                tabIndex={0}\n                onMouseDown={() => (this.labelAdd(val))}\n                data-handle={`label-add-${val.name}-${val.type}`}\n                style={dropDownIndex === ix\n                    ? style.deviceGroupsOptionsActive : style.deviceGroupsOptions\n                }\n                ref={ix === dropDownIndex && ((r) => { this.deviceGroupsOption = r; })}\n                key={`info${ix}`}\n            >\n                {getLabelTextNode(val)}\n            </a>\n        ));\n    }\n\n    labelAdd(label) {\n        const { dropDownIndex, inputLabels } = this.state;\n        const { onLabelAdd } = this.props;\n        const labelToAdd = inputLabels[dropDownIndex];\n        if (!label && !labelToAdd) return;\n\n        onLabelAdd(label || labelToAdd);\n        this.setState({ inputValue: '' });\n    }\n\n    isElementInVisibleInList() {\n        const { deviceGroups } = this.props;\n\n        if (deviceGroups.length === 0) return false;\n        const rect = this.deviceGroupsOption.getBoundingClientRect();\n\n        return rect.bottom > this.deviceGroups.bottom &&\n            rect.top < this.deviceGroups.top;\n    }\n\n    render() {\n        const { labels, onLabelRemove } = this.props;\n        const { autoCompleteIsVisible, inputValue } = this.state;\n        const filteredDeviceGroups = this.getFilteredGroupsComponents();\n\n        return (\n            <LabelFilter\n                autoCompleteIsVisible={autoCompleteIsVisible}\n                filteredDeviceGroups={filteredDeviceGroups}\n                labels={labels}\n                onBlur={this.onBlur}\n                onChange={this.onChange}\n                onFilterMenuRef={this.onFilterMenuRef}\n                onFocus={this.onFocus}\n                onKeyDown={this.onKeyDown}\n                onLabelRemove={onLabelRemove}\n                value={inputValue}\n            />\n        );\n    }\n}\n\nLabelFilterContainer.propTypes = {\n    deviceGroups: PropTypes.arrayOf(PropTypes.string),\n    labels: PropTypes.shape(Object),\n    onLabelAdd: PropTypes.func.isRequired,\n    onLabelRemove: PropTypes.func.isRequired,\n    onLoadDeviceGroups: PropTypes.func.isRequired,\n};\nLabelFilterContainer.defaultProps = {\n    labels: {},\n    onLoadDeviceGroups: () => undefined,\n};\n\nconst mapDispatchToProps = dispatch => ({\n    onLabelAdd(label) {\n        dispatch(labelAddAction(label));\n    },\n    onLabelRemove(label) {\n        dispatch(labelRemoveAction(label));\n    },\n    onLoadDeviceGroups() {\n        dispatch(loadDeviceGroups());\n    },\n});\n\nconst mapStateToProps = state => ({\n    deviceGroups: selectDeviceGroupsWithDevices(state),\n    labels: selectLabels(state),\n\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(LabelFilterContainer);\n\nexport {\n    LabelFilterContainer as _LabelFilterContainer,\n    mapDispatchToProps as _mapDispatchToProps,\n    mapStateToProps as _mapStateToProps,\n};\n","import * as defaultStyles from '@webui-one/styles/ApplicationDefaultStyles';\n\nconst menuArrow = {\n    width: '1.2rem',\n    height: '1.2rem',\n    top: '-0.5rem',\n    left: '8.5rem',\n    transform: 'rotate(43deg)',\n    backgroundColor: defaultStyles.color3,\n    position: 'absolute',\n};\nconst popDownMenu = {\n    pop: {\n        position: 'absolute',\n        right: '13rem',\n        top: '2.25rem',\n        zIndex: '1',\n    },\n    menuArrow,\n    menuArrowShadow: {\n        ...menuArrow,\n        boxShadow: 'rgb(136, 136, 136) 0px 0px 3px 0px',\n    },\n    wrapper: {\n        position: 'absolute',\n        right: '-14rem',\n        width: '9.2rem',\n        backgroundColor: defaultStyles.color3,\n        padding: '0.75rem 0',\n        boxShadow: 'rgb(136, 136, 136) 0px 0px 3px 0px',\n        color: defaultStyles.color9,\n        maxHeight: '40vh',\n        overflow: 'auto',\n    },\n    header: {\n        marginBottom: '1rem',\n    },\n};\n\n\nconst wrapper = {\n    margin: '0 0.25rem',\n    padding: '0.1875rem 0.5rem',\n    display: 'flex',\n    alignItems: 'center',\n    border: `solid 1px ${defaultStyles.color9}`,\n    borderRadius: '0.81rem',\n    backgroundColor: defaultStyles.backgroundColor1,\n    position: 'relative',\n    fontSize: defaultStyles.small3,\n    color: defaultStyles.color9,\n};\n\nconst symbol = {\n    width: '0.7rem',\n    padding: '0.25rem',\n    cursor: 'pointer',\n};\n\nconst deviceGroupsOptions = {\n    display: 'flex',\n    color: 'grey',\n    cursor: 'pointer',\n    padding: '0.25rem 0.5rem',\n};\n\nexport default {\n    popDownMenu,\n    labelFilter: {\n        display: 'flex',\n        alignSelf: 'center',\n        fontSize: '0.6rem',\n        padding: '0.1rem 0',\n        flexGrow: 2,\n        justifyContent: 'flex-end',\n    },\n    wrapper,\n    label: {\n        alignSelf: 'center',\n        color: '#000',\n        display: 'inline',\n        padding: '0 0.5rem',\n        whiteSpace: 'nowrap',\n    },\n    tip: {\n        height: '1.2rem',\n    },\n    delete: {\n        ...symbol,\n    },\n    add: {\n        ...symbol,\n        color: defaultStyles.color1,\n    },\n    button: {\n        position: 'relative',\n        padding: '0',\n        margin: '0',\n        color: defaultStyles.color1,\n        display: 'inline-block',\n        border: 'none',\n        backgroundColor: 'transparent',\n        lineHeight: '1em',\n        cursor: 'pointer',\n        ':focus': {\n            outline: 'none',\n        },\n    },\n    deviceGroupsOptions,\n    deviceGroupsOptionsActive: {\n        ...deviceGroupsOptions,\n        backgroundColor: defaultStyles.backgroundColor3,\n    },\n    notFound: {\n        width: '100%',\n        color: 'grey',\n        padding: '0.25rem 0.5rem',\n        textAlign: 'center',\n        boxSizing: 'border-box',\n    },\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ToolTip from '@webui-one/components/ToolTip/ToolTip';\nimport Downarrow from '@webui-one/styles/static/Downarrow';\nimport * as defaultStyles from '@webui-one/styles/ApplicationDefaultStyles';\nimport { labelsMenu as style } from './DeviceManagerStyles';\nimport LabelSymbol from './static/LabelSymbol';\n\nclass LabelsMenu extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onAddDevicesToGroup = this.onAddDevicesToGroup.bind(this);\n        this.onRemoveDevicesFromGroup = this.onRemoveDevicesFromGroup.bind(this);\n        this.onKeyDown = this.onKeyDown.bind(this);\n        this.showTooltip = this.showTooltip.bind(this);\n        this.hideTooltip = this.hideTooltip.bind(this);\n    }\n\n    componentDidUpdate(prevProps) {\n        const { enabled, onHideMenu } = this.props;\n        const { enabled: wasEnabled } = prevProps;\n        if (!enabled && wasEnabled) onHideMenu();\n        if (this.newLabelInput) this.newLabelInput.focus();\n    }\n\n    onKeyDown(e) {\n        const { onHideMenu } = this.props;\n        if (e.keyCode === 13) this.onAddDevicesToGroup();\n        if (e.keyCode === 27) onHideMenu();\n    }\n\n    onAddDevicesToGroup() {\n        this.newLabelInput.focus();\n        const { devices, onAddDevicesToGroup } = this.props;\n        if (this.newLabelInput.value && devices.length) {\n            onAddDevicesToGroup(devices, this.newLabelInput.value);\n            this.newLabelInput.value = '';\n        }\n    }\n\n    onRemoveDevicesFromGroup(group) {\n        const { devices, onRemoveDevicesFromGroup } = this.props;\n        onRemoveDevicesFromGroup(devices, group);\n    }\n\n    showTooltip() {\n        this.tooltip.show();\n    }\n\n    hideTooltip() {\n        this.tooltip.hide();\n    }\n\n    render() {\n        const { deviceGroups, enabled, menuOpen, onHideMenu, onShowMenu } = this.props;\n\n        const labels = deviceGroups.map(lbl => (\n            <div\n                data-handle={`menu-item-${lbl}`}\n                key={`menu-item-${lbl}`}\n                style={style.labelContainer}\n            >\n                <div style={style.label}>{lbl}</div>\n                <button\n                    type=\"button\"\n                    style={style.deleteLabel}\n                    onClick={() => this.onRemoveDevicesFromGroup(lbl)}\n                >\n                    ×\n                </button>\n            </div>\n        ));\n        const menuColor = enabled ? defaultStyles.color1 : defaultStyles.color6;\n        return (\n            <div\n                style={style.container}\n                data-handle=\"label-menu\"\n            >\n                <ToolTip\n                    direction=\"left\"\n                    toolTipText=\"add/remove groups\"\n                    ref={(tt) => { this.tooltip = tt; }}\n                />\n                <button\n                    type=\"button\"\n                    style={style.button}\n                    onClick={onShowMenu}\n                    onMouseDown={this.showTooltip}\n                    onMouseUp={this.hideTooltip}\n                    onMouseEnter={this.showTooltip}\n                    onMouseLeave={this.hideTooltip}\n                    disabled={false /* can not disable. ToolTip wont work */}\n                >\n                    <div style={style.symbol}><LabelSymbol color={menuColor} /></div>\n                    <div style={style.arrow}><Downarrow color={menuColor} /></div>\n                </button>\n                {menuOpen && (\n                    <div style={style.pop}>\n                        <button\n                            type=\"button\"\n                            data-handle=\"overlay\"\n                            onClick={() => onHideMenu()}\n                            style={style.overlay}\n                        />\n                        <div style={style.menuArrowShadow} />\n                        <div style={style.wrapper}>\n                            <div style={style.header}>Groups in selection:</div>\n                            <div data-handle=\"device-labels-container\" style={style.labelsContainer}>\n                                { labels }\n                            </div>\n                            <div data-handle=\"add-label\" style={style.createContainer}>\n                                <input\n                                    style={style.input}\n                                    placeholder=\"add label\"\n                                    ref={(input) => {\n                                        this.newLabelInput = input;\n                                        return this.newLabelInput;\n                                    }}\n                                    onKeyDown={this.onKeyDown}\n                                />\n                                <button\n                                    type=\"button\"\n                                    style={style.deleteLabel}\n                                    onClick={this.onAddDevicesToGroup}\n                                >\n                                    +\n                                </button>\n                            </div>\n                        </div>\n                        <div style={style.menuArrow} />\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nLabelsMenu.propTypes = {\n    devices: PropTypes.arrayOf(PropTypes.string),\n    deviceGroups: PropTypes.arrayOf(PropTypes.string),\n    enabled: PropTypes.bool,\n    menuOpen: PropTypes.bool,\n    onAddDevicesToGroup: PropTypes.func,\n    onHideMenu: PropTypes.func,\n    onRemoveDevicesFromGroup: PropTypes.func,\n    onShowMenu: PropTypes.func,\n};\n\nLabelsMenu.defaultProps = {\n    deviceGroups: [],\n    devices: [],\n    onGetDeviceGroupsForSelectedDevices: () => (null),\n};\n\n\nexport default LabelsMenu;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { isNonEmptyArray } from '@webui-one/core/utils/array';\nimport {\n    selectedDeviceRowsSelector,\n    selectDeviceGroupsForDevices,\n} from 'modules/devices/selectors';\nimport {\n    addDevicesToGroup,\n    loadDeviceGroups,\n    loadDeviceGroupsForDevices,\n    removeDevicesFromGroup,\n} from 'modules/devices/actions';\nimport LabelsMenu from './LabelsMenu';\n\nclass LabelsMenuContainer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onShowMenu = this.onShowMenu.bind(this);\n        this.onHideMenu = this.onHideMenu.bind(this);\n        this.onAddDevices = this.onAddDevices.bind(this);\n        this.onRemoveDevices = this.onRemoveDevices.bind(this);\n        this.state = {\n            menuOpen: false,\n            addedOrRemoved: false,\n        };\n    }\n\n    onAddDevices(devices, group) {\n        const { onAddDevicesToGroup } = this.props;\n        onAddDevicesToGroup(devices, group);\n        this.setState({ addedOrRemoved: true });\n    }\n\n    onRemoveDevices(devices, group) {\n        const { onRemoveDevicesFromGroup } = this.props;\n        onRemoveDevicesFromGroup(devices, group);\n        this.setState({ addedOrRemoved: true });\n    }\n\n    onHideMenu() {\n        const { onLoadDeviceGroups } = this.props;\n        const { addedOrRemoved } = this.state;\n        if (addedOrRemoved) {\n            onLoadDeviceGroups();\n        }\n        this.setState({ menuOpen: false, addedOrRemoved: false });\n    }\n\n    onShowMenu() {\n        const {\n            devices,\n            onGetDeviceGroupsForSelectedDevices,\n        } = this.props;\n        if (isNonEmptyArray(devices)) {\n            this.setState({ menuOpen: true });\n            onGetDeviceGroupsForSelectedDevices();\n        }\n    }\n\n    render() {\n        const {\n            devices,\n            deviceGroups,\n        } = this.props;\n        const { menuOpen } = this.state;\n\n        return (\n            <LabelsMenu\n                deviceGroups={deviceGroups}\n                devices={devices.map(d => d.data.name)}\n                menuOpen={menuOpen}\n                onAddDevicesToGroup={this.onAddDevices}\n                onRemoveDevicesFromGroup={this.onRemoveDevices}\n                onShowMenu={this.onShowMenu}\n                onHideMenu={this.onHideMenu}\n                enabled={isNonEmptyArray(devices)}\n            />\n        );\n    }\n}\n\nLabelsMenuContainer.propTypes = {\n    devices: PropTypes.arrayOf(Object),\n    deviceGroups: PropTypes.arrayOf(PropTypes.string),\n    onAddDevicesToGroup: PropTypes.func,\n    onGetDeviceGroupsForSelectedDevices: PropTypes.func,\n    onLoadDeviceGroups: PropTypes.func,\n    onRemoveDevicesFromGroup: PropTypes.func,\n};\n\nLabelsMenuContainer.defaultProps = {\n    deviceGroups: [],\n    devices: [],\n    onAddDevicesToGroup: () => undefined,\n    onGetDeviceGroupsForSelectedDevices: () => (null),\n    onLoadDeviceGroups: () => undefined,\n    onRemoveDevicesFromGroup: () => undefined,\n};\n\nconst mapDispatchToProps = dispatch => ({\n    onGetDeviceGroupsForSelectedDevices() {\n        dispatch(loadDeviceGroupsForDevices());\n    },\n    onLoadDeviceGroups() {\n        dispatch(loadDeviceGroups());\n    },\n    onRemoveDevicesFromGroup(devices, group) {\n        dispatch(removeDevicesFromGroup(devices, group));\n    },\n    onAddDevicesToGroup(devices, group) {\n        dispatch(addDevicesToGroup(devices, group));\n    },\n});\n\nconst mapStateToProps = state =>\n    ({\n        devices: selectedDeviceRowsSelector(state),\n        deviceGroups: selectDeviceGroupsForDevices(state),\n    });\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(LabelsMenuContainer);\n\nexport {\n    LabelsMenuContainer as _LabelsMenuContainer,\n    mapDispatchToProps as _mapDispatchToProps,\n    mapStateToProps as _mapStateToProps,\n};\n","import React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport RemoveSymbol from '@webui-one/styles/static/RemoveSymbol';\nimport * as defaultStyles from '@webui-one/styles/ApplicationDefaultStyles';\nimport ToolTip from '@webui-one/components/ToolTip/ToolTip';\nimport style from './AddListItemButtonStyles';\n\nfunction RemoveDevicesButton(props) {\n    const toolTipRef = useRef();\n\n    function showTooltip() {\n        toolTipRef.current.show();\n    }\n\n    function hideTooltip() {\n        toolTipRef.current.hide();\n    }\n\n    const { disabled, onRemoveDevices } = props;\n\n    const onClick = !disabled ? onRemoveDevices : () => null;\n\n    return (\n        <div>\n            <button\n                type=\"button\"\n                data-handle=\"remove-list-item-button\"\n                style={disabled ? style.disabled : style.enabled}\n                onClick={onClick}\n                disabled={disabled}\n                onMouseDown={showTooltip}\n                onMouseUp={hideTooltip}\n                onMouseEnter={showTooltip}\n                onMouseLeave={hideTooltip}\n            >\n                { !disabled ?\n                (<RemoveSymbol />) :\n                (\n                    <RemoveSymbol\n                        symbolColor={defaultStyles.color6}\n                        borderColor={defaultStyles.color6}\n                        bgColor={defaultStyles.color3}\n                    />\n                )}\n            </button>\n            <ToolTip\n                direction=\"right\"\n                toolTipText=\"remove device\"\n                ref={(tt) => { toolTipRef.current = tt; }}\n            />\n        </div>\n    );\n}\n\nRemoveDevicesButton.propTypes = {\n    disabled: PropTypes.bool,\n    onRemoveDevices: PropTypes.func,\n};\n\nexport default RemoveDevicesButton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n    deleteNodesThunk,\n} from 'modules/nodes/thunks';\nimport {\n    selectedDeviceRowsSelector,\n    selectDeviceManagerIsLoading,\n} from 'modules/devices/selectors';\nimport RemoveDevicesButton from './RemoveDevicesButton';\nimport { deviceListPath } from 'modules/devices/paths';\n\nclass RemoveDevicesContainer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.deleteSelected = this.deleteSelected.bind(this);\n    }\n    deleteSelected() {\n        const { devices, onDelete } = this.props;\n        const paths = devices.map(device => device.rowKey);\n        return onDelete(paths, deviceListPath);\n    }\n\n    render() {\n        const { devices, isLoading } = this.props;\n        const disabled = isLoading || devices.length === 0;\n\n        return (\n            <RemoveDevicesButton\n                disabled={disabled}\n                onRemoveDevices={this.deleteSelected}\n            />\n        );\n    }\n}\n\nRemoveDevicesContainer.propTypes = {\n    devices: PropTypes.arrayOf(Object),\n    onDelete: PropTypes.func,\n    isLoading: PropTypes.bool,\n};\n\nconst mapStateToProps = state => ({\n    devices: selectedDeviceRowsSelector(state),\n    isLoading: selectDeviceManagerIsLoading(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n    onDelete(paths, loadingPath) {\n        return dispatch(deleteNodesThunk({ paths, loadingPath }));\n    },\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(RemoveDevicesContainer);\n\nexport {\n    RemoveDevicesContainer as _RemoveDevicesContainer,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst DeleteSymbol = ({ color }) =>\n    (<span style={{ color }}>×</span>);\n\nDeleteSymbol.propTypes = {\n    color: PropTypes.string,\n};\n\nDeleteSymbol.defaultProps = {\n    color: 'red',\n};\n\nexport default DeleteSymbol;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst LabelSymbol = ({ color }) => (\n    <svg\n        version=\"1.2\"\n        baseProfile=\"tiny\"\n        x=\"0px\"\n        y=\"0px\"\n        viewBox=\"0 0 23 24\"\n    >\n        <path\n            fill={color}\n            d=\"M23,8l-1-8l-8.3,0L0,16.1L9.3,24L23,8z M17.8,2.3c0.5-0.6,1.5-0.7,2.2-0.2c0.6,0.5,0.7,1.5,0.2,2.2S18.6,5,18,4.4\nc0,0,0,0,0,0l0,0C17.4,3.9,17.3,2.9,17.8,2.3z\"\n        />\n    </svg>\n);\n\nLabelSymbol.propTypes = {\n    color: PropTypes.string,\n};\n\nLabelSymbol.defaultProps = {\n    color: 'red',\n};\n\nexport default LabelSymbol;\n","import { getListPath } from '@webui-one/core/keypath/kp-parser';\nimport { isNonEmptyString } from '@webui-one/core/utils/string';\nimport { uniq } from '@webui-one/core/utils/array';\n\nconst setValue = (change, nodes) => {\n    const value = change.value;\n    const { updateNode } = nodes;\n    updateNode[change.keypath] = value;\n};\n\nconst updateConfig = (\n    notifications,\n    subscriptionPath,\n    {\n        onDelete,\n        onUpdateLeaf,\n        onCreate,\n        onModifiedNodes,\n    }) => {\n    const changes = notifications.changes || [];\n    const removeList = [];\n    const addNode = {};\n    const updateNode = {};\n    const modifiedNodes = [];\n    changes.forEach((change) => {\n        const listPath = getListPath(change.keypath, subscriptionPath);\n        if (isNonEmptyString(listPath)) {\n            modifiedNodes.push(listPath);\n            return;\n        }\n        if (change.op === 'deleted') {\n            removeList.push([change.keypath, true]);\n        }\n        if (change.op === 'created') {\n            addNode[change.keypath] = true;\n        }\n        if (change.op === 'default_set') {\n            removeList.push([change.keypath, false]);\n        }\n        if (change.op === 'value_set') {\n            setValue(change, { updateNode });\n        }\n    });\n    removeList.forEach(([path, deleteChildren]) => {\n        onDelete(path, deleteChildren);\n    });\n    Object.keys(addNode).forEach((nodePath) => {\n        onCreate(nodePath);\n    });\n    Object.keys(updateNode).forEach((node) => {\n        onUpdateLeaf(node, updateNode[node]);\n    });\n    if (modifiedNodes.length > 0) {\n        onModifiedNodes(uniq(modifiedNodes));\n    }\n};\n\nexport default updateConfig;\n\nexport {\n    updateConfig,\n    setValue as _setValue,\n};\n","import {\n    createAllowExists as _createAllowExists,\n    query as jsonrpcQuery,\n    jsonrpcBatch as _jsonrpcBatch,\n} from '@webui-one/core/jsonrpc';\nimport {\n    difference,\n    flatten,\n    intersect,\n    isEmpty,\n    isNonEmptyArray,\n    uniq,\n} from '@webui-one/core/utils/array';\nimport {\n    getSchema as _getSchema,\n} from 'modules/schemas/actions';\nimport {\n    query as _query,\n} from 'modules/nodes/actions';\nimport {\n    createDisallowExistsThunk as _createDisallowExistsThunk,\n} from 'modules/nodes/thunks';\nimport { read, write } from 'modules/transactions/actions';\nimport * as actionTypes from './actionTypes';\nimport {\n    QUERY_SELECTION,\n    deviceListPath,\n    devicesRootPath,\n    getDeviceGroupDeviceListDevicePath,\n    getDeviceGroupDeviceListPath,\n} from './paths';\nimport {\n    selectedDeviceRowsSelector,\n} from './selectors';\n\nexport const selectDeviceAction = (isSelected, deviceNames) => ({\n    type: actionTypes.DEVICES_SELECT,\n    deviceNames,\n    isSelected,\n});\n\nexport const addDevicesToGroupStartAction = group => ({\n    type: actionTypes.ADD_DEVICES_TO_GROUP_START,\n    group,\n});\n\nexport const addDevicesToGroupCompleteAction = (group, value) => ({\n    type: actionTypes.ADD_DEVICES_TO_GROUP_COMPLETE,\n    group,\n    value,\n});\n\nexport const addDevicesToGroupErrorAction = (group, error) => ({\n    type: actionTypes.ADD_DEVICES_TO_GROUP_ERROR,\n    group,\n    error,\n});\n\nexport const labelAddAction = label => ({\n    type: actionTypes.LABEL_ADD,\n    label,\n});\n\nexport const labelRemoveAction = label => ({\n    type: actionTypes.LABEL_REMOVE,\n    label,\n});\n\nexport const loadDeviceGroupsStartAction = () => ({\n    type: actionTypes.LOAD_DEVICE_GROUPS_START,\n});\n\nexport const loadDeviceGroupsCompleteAction = groups => ({\n    type: actionTypes.LOAD_DEVICE_GROUPS_COMPLETE,\n    groups,\n});\n\nexport const loadDeviceGroupsErrorAction = error => ({\n    type: actionTypes.LOAD_DEVICE_GROUPS_ERROR,\n    error,\n});\n\nexport const loadModulesStartAction = path => ({\n    type: actionTypes.LOAD_MODULES_START,\n    path,\n});\n\nexport const loadModulesCompleteAction = (path, result) => ({\n    type: actionTypes.LOAD_MODULES_COMPLETE,\n    path,\n    result,\n});\n\nexport const loadModulesErrorAction = (path, error) => ({\n    type: actionTypes.LOAD_MODULES_ERROR,\n    path,\n    error,\n});\n\nexport const removeDevicesFromGroupCompleteAction = (group, devices) => ({\n    type: actionTypes.REMOVE_DEVICES_FROM_GROUP_COMPLETE,\n    devices,\n    group,\n});\n\nexport const removeDevicesFromGroupErrorAction = (group, error) => ({\n    type: actionTypes.REMOVE_DEVICES_FROM_GROUP_ERROR,\n    group,\n    error,\n});\n\nexport const removeDevicesFromGroupStartAction = (group, error) => ({\n    type: actionTypes.REMOVE_DEVICES_FROM_GROUP_START,\n    group,\n    error,\n});\n\nexport const gettingDevicesStart = () => ({\n    type: actionTypes.GETTING_DEVICES_START,\n});\nexport const gettingDevicesComplete = () => ({\n    type: actionTypes.GETTING_DEVICES_COMPLETE,\n});\n\nexport const loadDeviceGroupsForDevicesCompleteAction = groups => ({\n    type: actionTypes.LOAD_DEVICE_GROUPS_FOR_DEVICES_COMPLETE,\n    groups,\n});\nexport const loadDeviceGroupsForDevicesErrorAction = error => ({\n    type: actionTypes.LOAD_DEVICE_GROUPS_FOR_DEVICES_ERROR,\n    error,\n});\nexport const loadDeviceGroupsForDevicesStartAction = () => ({\n    type: actionTypes.LOAD_DEVICE_GROUPS_FOR_DEVICES_START,\n});\nexport const setDeviceExpandedAction = (path, column, isExpanded) => ({\n    type: actionTypes.SET_EXPANDED_ROW,\n    path,\n    column,\n    isExpanded,\n});\n\nexport const getDevices = ({\n    chunkSize,\n    offset,\n    columnKey,\n    sortorder,\n    xpathExpression,\n    selection = QUERY_SELECTION,\n    funcs: {\n        getSchema = _getSchema,\n        query = _query,\n    } = {},\n} = {}) => async (dispatch) => {\n    await dispatch(gettingDevicesStart());\n    await dispatch(getSchema({\n        path: devicesRootPath,\n        params: {\n            levels: -1,\n            stop_on_list: true,\n        },\n        reload: true,\n    }));\n\n    const querySelection = uniq([\n        'name',\n        ...selection,\n    ]);\n    const queryResult = await dispatch(query({\n        selection: querySelection,\n        path: deviceListPath,\n        sort: columnKey,\n        sortOrder: sortorder,\n        initialOffset: offset,\n        chunkSize,\n        result_as: 'string',\n        xpathExpr: xpathExpression,\n        contextNode: devicesRootPath,\n    }));\n\n    await dispatch(gettingDevicesComplete());\n    return queryResult;\n};\n\nexport const loadDeviceGroups = ({\n    funcs: {\n        query = jsonrpcQuery,\n        readThunk = read,\n    } = {},\n} = {}) => (\n    async (dispatch) => {\n        dispatch(loadDeviceGroupsStartAction());\n        try {\n            const { th } = await dispatch(readThunk());\n            const xpathExpr = 'device-group[count(device-name) > 0]';\n            const result = await query({\n                th,\n                selection: ['name'],\n                contextNode: '/ncs:devices',\n                xpathExpr,\n            });\n            const groups = flatten(result.results);\n            return dispatch(loadDeviceGroupsCompleteAction(groups));\n        } catch (error) {\n            return dispatch(loadDeviceGroupsErrorAction(error));\n        }\n    }\n);\n\nconst groupsForDevicesRequestMapper = th => xpathExpr => ({\n    method: 'query',\n    params: {\n        th,\n        selection: ['name'],\n        context_node: '/ncs:devices',\n        xpath_expr: xpathExpr,\n    },\n});\nexport const loadDeviceGroupsForDevices = ({\n    funcs: {\n        jsonrpcBatch = _jsonrpcBatch,\n        readThunk = read,\n        selectedDeviceRows = selectedDeviceRowsSelector,\n    } = {},\n} = {}) => (\n    async (dispatch, getState) => {\n        dispatch(loadDeviceGroupsForDevicesStartAction());\n        try {\n            const selectedDevices = selectedDeviceRows(getState())\n                .reduce((deviceNames, device) => {\n                    if (device.data.isSelected) {\n                        deviceNames.push(device.data.name);\n                    }\n                    return deviceNames;\n                }, []);\n            if (!isNonEmptyArray(selectedDevices)) {\n                return dispatch(loadDeviceGroupsForDevicesCompleteAction([]));\n            }\n            const { th } = await dispatch(readThunk());\n            const xpathExprList = selectedDevices.map(deviceName => (\n                `device-group[device-name=\"${deviceName}\"]`\n            ));\n            const requests = xpathExprList.map(groupsForDevicesRequestMapper(th));\n            const responses = await jsonrpcBatch({ requests });\n            const groups = uniq(flatten(responses.map(r => r.result.results)));\n            return dispatch(loadDeviceGroupsForDevicesCompleteAction(groups));\n        } catch (error) {\n            return dispatch(loadDeviceGroupsForDevicesErrorAction(error));\n        }\n    }\n);\n\nexport const getValueFromResult = (result) => {\n    if (!result || !result.results) return [];\n    return result.results.reduce((acc, obj) => [...acc, ...Object.values(obj)], []);\n};\n\nconst addValuesRequestMapper = (group, th) => deviceName => ({\n    method: 'create',\n    params: {\n        path: getDeviceGroupDeviceListDevicePath(group, deviceName),\n        th,\n    },\n});\n\nconst addValues = async (group, valuesToAdd, th, {\n    funcs: {\n        jsonrpcBatch = _jsonrpcBatch,\n        query = jsonrpcQuery,\n    } = {},\n} = {}) => {\n    const path = getDeviceGroupDeviceListPath(group);\n    const result = await query({ selection: undefined, path, th });\n    const value = getValueFromResult(result);\n    const minValuesToAdd = difference(valuesToAdd, value);\n    if (isEmpty(minValuesToAdd)) return value;\n    const requests = minValuesToAdd.map(addValuesRequestMapper(group, th));\n    return jsonrpcBatch({ requests });\n};\n\nexport const addDevicesToGroup = (devices, group, {\n    funcs: {\n        addValuesFunc = addValues,\n        createAllowExists = _createAllowExists,\n        loadDeviceGroupsFunc = loadDeviceGroupsForDevices,\n        writeThunk = write,\n    } = {},\n} = {}) => (\n    async (dispatch) => {\n        dispatch(addDevicesToGroupStartAction(group));\n        const groupPath = getDeviceGroupDeviceListPath(group);\n\n        try {\n            const { th } = await dispatch(writeThunk());\n            await createAllowExists({ path: groupPath, th });\n            const createResult = await addValuesFunc(group, devices, th);\n            if (isNonEmptyArray(createResult) && createResult[0].error) {\n                throw createResult[0].error;\n            }\n            await dispatch(loadDeviceGroupsFunc());\n            return dispatch(addDevicesToGroupCompleteAction(group));\n        } catch (error) {\n            return dispatch(addDevicesToGroupErrorAction(group, error));\n        }\n    }\n);\n\nconst deleteRequestMapper = (path, th) => deviceName => ({\n    method: 'delete',\n    params: {\n        th,\n        path: `${path}{${deviceName}}`,\n    },\n});\nexport const removeDevicesFromGroup = (devices, group, {\n    funcs: {\n        loadDeviceGroupsFunc = loadDeviceGroupsForDevices,\n        query = jsonrpcQuery,\n        jsonrpcBatch = _jsonrpcBatch,\n        writeThunk = write,\n    } = {},\n} = {}) => (\n    async (dispatch) => {\n        dispatch(removeDevicesFromGroupStartAction(group));\n        try {\n            const { th } = await dispatch(writeThunk());\n            const path = getDeviceGroupDeviceListPath(group);\n            const result = await query({\n                path,\n                th,\n            });\n            const queryValue = getValueFromResult(result);\n            const valuesToRm = intersect(queryValue, devices);\n            if (!isNonEmptyArray(valuesToRm)) {\n                // Skip deleting if the devices do not belong\n                // to the device-group\n                return dispatch(\n                    removeDevicesFromGroupCompleteAction(group, []),\n                );\n            }\n            const requests = valuesToRm.map(deleteRequestMapper(path, th));\n            const deleteResult = await jsonrpcBatch({ requests });\n            if (isNonEmptyArray(deleteResult) && deleteResult[0].error) {\n                throw deleteResult[0].error;\n            }\n            await dispatch(loadDeviceGroupsFunc());\n            return dispatch(removeDevicesFromGroupCompleteAction(group, valuesToRm));\n        } catch (error) {\n            return dispatch(removeDevicesFromGroupErrorAction(group, error));\n        }\n    }\n);\n\nconst deviceRE = /^(\\/ncs:devices\\/device\\{([^}]+)\\}).*/;\n\nexport const loadModules = (configPath, {\n    funcs: {\n        readThunk = read,\n        query = jsonrpcQuery,\n    } = {},\n} = {}) => (\n    (dispatch) => {\n        const match = deviceRE.exec(configPath);\n        if (!match) return Promise.resolve();\n        const path = `${match[1]}/module`;\n        dispatch(loadModulesStartAction(path));\n\n        return dispatch(readThunk()).then(({ th }) => (\n            query({ th, selection: ['name'], path })\n        )).then(result => (\n            dispatch(loadModulesCompleteAction(\n                path,\n                // NOTE(dbildstr): return array of strings instead of array of array of strings\n                result.results.map(module => module[0]),\n            ))\n        )).catch(error => (\n            dispatch(loadModulesErrorAction(path, error))\n        ));\n    }\n);\n\nexport const addDevice = ({\n    createPath,\n    chunkSize,\n    offset,\n    columnKey,\n    sortorder,\n    xpathExpression,\n    funcs: {\n        createDisallowExistsThunk = _createDisallowExistsThunk,\n        getDevicesThunk = getDevices,\n    } = {},\n}) => (\n    dispatch => dispatch(createDisallowExistsThunk({ path: createPath })).then((result) => {\n        if (result.error) return result;\n        return dispatch(\n            getDevicesThunk({\n                chunkSize,\n                offset,\n                columnKey,\n                sortorder,\n                xpathExpression,\n            }),\n        );\n    })\n);\n\nexport {\n    addValues as _addValues,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"ZsjiB5_O8cUNXw0z30Oa\"};"],"names":["ErrorBoundary","React","Component","constructor","props","super","this","state","error","errorInfo","componentDidCatch","setState","render","children","propTypes","PropTypes","oneOfType","arrayOf","node","AlarmSymbol","color","version","baseProfile","x","y","viewBox","xmlSpace","fill","d","string","WarningSymbol","xmlns","ItemLinks","items","map","item","Link","title","name","key","path","style","styles","itemsLink","to","ItemGroupList","itemGroups","itemGroup","group","groupTitle","ManagerItems","onQueryData","rows","isLoading","useEffect","container","loaderContainer","defaultStyles","color2","length","isRequired","func","bool","Object","defaultProps","width","padding","display","flexWrap","justifyContent","margin","textOverflow","overflow","maxWidth","lineHeight","fontSize","large2","medium3","textDecoration","flexBasis","getString","unit","keyword","values","theLogics","include","filter","value","type","labelTypes","LBL_INCLUDE","oneOf","LBL_ONE_OF","exclude","LBL_EXCLUDE","returnString","includeString","join","oneOfString","excludeString","getDeviceGroupLogicsString","summary","Summary","labels","shape","medium1","ModalSchemaPaths","deviceListPath","AddDevicesContainer","showTooltip","bind","hideTooltip","showAddDeviceModal","onConfirm","onClose","setTooltipRef","errorOnCreate","undefined","createPath","offset","onAddDevice","sortColumn","sortOrder","xpathExpression","then","result","tt","tooltip","show","hide","direction","toolTipText","ref","enabled","onClick","onMouseDown","onMouseUp","onMouseEnter","onMouseLeave","paths","closeOnConfirm","number","connect","selectDeviceOffset","selectDeviceSortColumn","selectDeviceSortOrder","selectDeviceXpathExpression","dispatch","columnKey","sortorder","addDevice","chunkSize","DEVICE_CHUNK_SIZE","height","borderRadius","border","background","cursor","disabled","Symbol","severity","cleared","ALARM_STATUS","MAJORS","CRITICALS","MINORS","includes","WARNINGS","INDETERMINATES","AlarmCell","wrapper","criticals","color5","majors","color17","minors","color15","warnings","color4","indeterminates","color6","alignSelf","justifySelf","mapStateToProps","selectedDeviceRowsSelector","actions","selectDeviceActions","mapDispatchToProps","funcs","runCustomAction","runCustomActionThunk","onAction","action","actionPath","BatchActions","DeviceColumnsContainer","onSetColumnVisible","columnsVisibility","columns","DEVICE_COLUMNS","forEach","c","index","isVisible","isVisibleColumn","onChange","DEVICE_MANAGER_USER_STORAGE_PATH","canBeHidden","selectDeviceColumns","nodesActions","setColumnVisibilityAction","DeviceCounter","selected","total","role","text","selectedDeviceCountSelector","selectTotalNumberOfDevices","STYLE_NAME","isAlarm","Array","isArray","ALARM_PRECEDENCE","list","createAlarmCell","_","__","deviceData","device","data","getLinkWithDevice","row","alarm","configurationCellFactory","rowKey","toConfig","getLinkWithPath","configKey","cell","buttonWrapper","link","translate","createButtonCellFactory","onExpand","btnStyle","actionIndicatorTimeout","completedAt","pathOr","status","isDisabled","disableActions","isExpanded","getDeviceColumn","getDefaultColumn","find","DeviceListContainer","onSelectAllRows","onSelectRow","onChangeSortOrder","onCometUpdate","onGoToPage","onRunAction","handleExpand","hasSelectedAll","ping","componentDidMount","onLoad","onLoadActionStatusIndicatorTimeout","onSubscribe","selection","componentDidUpdate","prevProps","alarms","deviceGroupChangeIsPending","hasActiveLabels","lastDeleteDeviceTimestamp","totalNumberOfResults","newXpathExpression","newDeviceGroupChangeIsPending","newAlarms","newSelection","newLastDeleteDeviceTimestamp","isEqual","Math","max","componentWillUnmount","onUnsubscribe","newColumn","r","expandable","column","onSelectRows","isSelected","sortColumnToCheck","newSortorder","newColumnKey","notifications","subscription","onCreate","onDelete","onModifiedNodes","onUpdateLeaf","updateConfig","params","onQueryServiceItems","sortOrdering","columnKeys","COLUMNS_SELECTION","serviceColumnKeyIndex","findIndex","serviceColumn","splice","nrOfVisibleColumns","formatter","truncateLongString","isDesc","createHeader","createSortableHeaderFactory","createCell","createDataCellFactory","CONFIGURATION_EDITOR_NAME","unshift","isSticky","createCheckboxHeaderFactory","createCheckBoxCellFactory","createEmptyHeaderFactory","createDirtyCellFactory","push","createHeaderFactory","header","found","createServieExpandableButtonCellFactory","expandName","COLUMNS_ACTION","actionButton","filluppColumn","columnData","rowData","serviceItemsData","createResultCellFactory","additionalElements","empty","LinkComponent","shouldPadRows","styleName","shouldRetainColumnsSize","nrOfStaticColumns","selectDeviceManagerIsLoading","keys","QUERY_SELECTION","COLUMN_VISIBILITY","HIDDEN_USER","deviceRowAndChangesSelector","selectDeviceAlarms","selectDeviceGroupChangeIsPending","selectHasActiveLabels","selectLastDeleteDeviceTimestamp","selectGlobalSetting","ACTION_STATUS_INDICATOR_TIMEOUT","getDevices","getGlobalApplicationSetting","setting","rowKeys","selectDeviceAction","setDeviceExpandedAction","handler","subscribeCdbOperAction","alarmsPath","subscribeChangesAction","unsubscribeCdbOperAction","unsubscribeChangesAction","modifiedNodesAction","getValueAction","deleteAction","deleteNodeAndChildrenAction","createAction","query","application","additionalComponentsRight","secondHeader","contentWrapper","shadow","scrollingContainer","marginRight","position","flexFlow","backgroundImage","pattern1","flexGrow","backgroundColor","color11","borderTop","image","verticalAlign","menuArrow","left","transform","color3","labelsMenu","boxShadow","textColor2","fontCondensed","overlay","top","pop","zIndex","menuArrowShadow","marginBottom","labelImage","labelContainer","marginTop","labelsContainer","maxHeight","label","medium2","wordBreak","deleteLabel","marginLeft","flexShrink","color1","large1","createContainer","input","button","symbol","arrow","whiteSpace","selectLabels","selectDeviceSearch","getLabelTypeColor","SEARCH","Error","getLabelTypeText","getLabelTextNode","LabelFilter","autoCompleteIsVisible","filteredDeviceGroups","onBlur","onFilterMenuRef","onFocus","onInitHide","onKeyDown","onLabelRemove","onResetHide","content","labelFilter","className","cssStyles","e","target","placeholder","popDownMenu","LabelFilterContainer","getFilteredLabels","labelAdd","isElementInVisibleInList","dropDownIndex","inputValue","inputLabels","onLoadDeviceGroups","deviceGroupsOption","deviceGroups","scrollTop","offsetTop","numLabels","diff","preventDefault","dg","labelTypesCopy","nonEmpty","l","indexOf","beginsWith","startsWith","filteredLabels","concat","reduce","acc","getFilteredGroupsComponents","val","ix","tabIndex","deviceGroupsOptionsActive","deviceGroupsOptions","onLabelAdd","labelToAdd","rect","getBoundingClientRect","bottom","labelAddAction","labelRemoveAction","loadDeviceGroups","selectDeviceGroupsWithDevices","right","color9","alignItems","backgroundColor1","small3","tip","delete","add","outline","backgroundColor3","notFound","textAlign","boxSizing","LabelsMenu","onAddDevicesToGroup","onRemoveDevicesFromGroup","onHideMenu","wasEnabled","newLabelInput","focus","keyCode","devices","menuOpen","onShowMenu","lbl","menuColor","onGetDeviceGroupsForSelectedDevices","LabelsMenuContainer","onAddDevices","onRemoveDevices","addedOrRemoved","isNonEmptyArray","loadDeviceGroupsForDevices","removeDevicesFromGroup","addDevicesToGroup","selectDeviceGroupsForDevices","RemoveDevicesButton","toolTipRef","useRef","current","symbolColor","borderColor","bgColor","RemoveDevicesContainer","deleteSelected","loadingPath","deleteNodesThunk","DeleteSymbol","LabelSymbol","setValue","change","nodes","updateNode","keypath","subscriptionPath","changes","removeList","addNode","modifiedNodes","listPath","getListPath","isNonEmptyString","op","deleteChildren","nodePath","uniq","deviceNames","actionTypes","DEVICES_SELECT","addDevicesToGroupStartAction","ADD_DEVICES_TO_GROUP_START","addDevicesToGroupCompleteAction","ADD_DEVICES_TO_GROUP_COMPLETE","addDevicesToGroupErrorAction","ADD_DEVICES_TO_GROUP_ERROR","LABEL_ADD","LABEL_REMOVE","loadDeviceGroupsStartAction","LOAD_DEVICE_GROUPS_START","loadDeviceGroupsCompleteAction","groups","LOAD_DEVICE_GROUPS_COMPLETE","loadDeviceGroupsErrorAction","LOAD_DEVICE_GROUPS_ERROR","loadModulesStartAction","LOAD_MODULES_START","loadModulesCompleteAction","LOAD_MODULES_COMPLETE","loadModulesErrorAction","LOAD_MODULES_ERROR","removeDevicesFromGroupCompleteAction","REMOVE_DEVICES_FROM_GROUP_COMPLETE","removeDevicesFromGroupErrorAction","REMOVE_DEVICES_FROM_GROUP_ERROR","removeDevicesFromGroupStartAction","REMOVE_DEVICES_FROM_GROUP_START","gettingDevicesStart","GETTING_DEVICES_START","gettingDevicesComplete","GETTING_DEVICES_COMPLETE","loadDeviceGroupsForDevicesCompleteAction","LOAD_DEVICE_GROUPS_FOR_DEVICES_COMPLETE","loadDeviceGroupsForDevicesErrorAction","LOAD_DEVICE_GROUPS_FOR_DEVICES_ERROR","loadDeviceGroupsForDevicesStartAction","LOAD_DEVICE_GROUPS_FOR_DEVICES_START","SET_EXPANDED_ROW","getSchema","_getSchema","_query","async","devicesRootPath","levels","stop_on_list","reload","querySelection","queryResult","sort","initialOffset","result_as","xpathExpr","contextNode","jsonrpcQuery","readThunk","read","th","flatten","results","groupsForDevicesRequestMapper","method","context_node","xpath_expr","jsonrpcBatch","_jsonrpcBatch","selectedDeviceRows","getState","selectedDevices","requests","deviceName","responses","getValueFromResult","obj","addValuesRequestMapper","getDeviceGroupDeviceListDevicePath","addValues","valuesToAdd","getDeviceGroupDeviceListPath","minValuesToAdd","difference","isEmpty","addValuesFunc","createAllowExists","_createAllowExists","loadDeviceGroupsFunc","writeThunk","write","groupPath","createResult","deleteRequestMapper","queryValue","valuesToRm","intersect","deleteResult","deviceRE","configPath","match","exec","Promise","resolve","module","catch","createDisallowExistsThunk","_createDisallowExistsThunk","getDevicesThunk"],"sourceRoot":""}