{"version":3,"file":"507.ebe491b47a1faf264486.chunk.js","mappings":"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","sources":["webpack://webui/./src/modules/services/actions.js","webpack://webui/./src/modules/services/paths.js","webpack://webui/./src/modules/services/selectors.js"],"sourcesContent":["import * as S from '@webui-one/core/schema';\nimport * as actionTypes from 'modules/services/actionTypes';\nimport jsonrpcSimple, {\n    getSchemas as _getSchemas,\n    jsonrpcBatch,\n    zipQueryResult,\n} from '@webui-one/core/jsonrpc';\nimport {\n    ensureArray,\n    flatten,\n    isNonEmptyArray,\n} from '@webui-one/core/utils/array';\nimport { toNumber } from '@webui-one/core/utils/number';\nimport { isNonEmptyString } from '@webui-one/core/utils/string';\nimport { isObject, omitKeys } from '@webui-one/core/utils/object';\nimport { query as _query } from 'modules/nodes/actions';\nimport {\n    read,\n} from 'modules/transactions/actions';\nimport {\n    MODES,\n} from '@webui-one/core/jsonrpc/constants';\nimport { getSchema } from 'modules/schemas/actions';\nimport {\n    selectSchema,\n} from 'modules/schemas/selectors';\nimport {\n    selectIsLoaded,\n} from 'modules/schemas2/selectors';\nimport {\n    selectServiceInstanceCountIsLoading,\n    selectServiceSearch,\n} from './selectors';\nimport {\n    runCustomActionThunk as _runCustomActionThunk,\n} from 'modules/yangActions/actions';\nimport {\n    getGlobalApplicationSetting,\n    ACTION_STATUS_INDICATOR_TIMEOUT,\n} from 'modules/globalSettings/actions';\n\nexport const getServicesStartAction = () => ({\n    type: actionTypes.SERVICES_GET_START,\n});\n\nexport const getServicesCompleteAction = () => ({\n    type: actionTypes.SERVICES_GET_COMPLETE,\n});\n\nexport const getServicesErrorAction = error => ({\n    type: actionTypes.SERVICES_GET_ERROR,\n    error,\n});\n\n\nexport const selectServiceAction = (isSelected, names) => ({\n    type: actionTypes.SERVICES_SELECT,\n    names,\n    isSelected,\n});\n\nexport const getServiceDeploymentsAction = deployments => ({\n    type: actionTypes.SERVICE_DEPLOYMENTS_GET,\n    deployments,\n});\n\nexport const getServiceDeploymentsStartAction = () => ({\n    type: actionTypes.SERVICE_DEPLOYMENTS_GET_START,\n});\n\nexport const getServiceDeploymentsErrorAction = () => ({\n    type: actionTypes.SERVICE_DEPLOYMENTS_GET_ERROR,\n});\n\nexport const getServiceInstanceCountStartAction = () => ({\n    type: actionTypes.SERVICE_INSTANCE_COUNT_GET_START,\n});\n\nexport const getServiceInstanceCountAction = count => ({\n    type: actionTypes.SERVICE_INSTANCE_COUNT_GET,\n    count,\n});\n\nexport const getServiceInstanceCountErrorAction = error => ({\n    type: actionTypes.SERVICE_INSTANCE_COUNT_GET_ERROR,\n    error,\n});\n\nexport const getServicePointsAction = action => ({\n    type: actionTypes.SERVICE_POINTS_GET,\n    ...action,\n});\n\nexport const getServicePointSchemasCompleteAction = (schemas2, types) => ({\n    type: actionTypes.GET_SERVICE_POINT_SCHEMAS_COMPLETE,\n    schemas2,\n    types,\n});\n\nexport const setServiceExpandedAction = (path, column, isExpanded) => ({\n    type: actionTypes.SET_EXPANDED_ROW,\n    path,\n    column,\n    isExpanded,\n});\n\nexport const setSearchAction = value => ({\n    type: actionTypes.SET_SEARCH,\n    value,\n});\n\nexport const getServicePoints = ({\n    funcs: {\n        jsonrpc = jsonrpcSimple,\n    } = {},\n} = {}) => (\n    jsonrpc('get_service_points', {})\n        .then(\n            ({ service_points: servicePoints }) => servicePoints,\n            // NOTE(dbildstr): we should only get errors if the session\n            // is invalid or we are navigating somewhere, so it should\n            // be safe to just return an empty servicePoints object here\n            () => ({}),\n        )\n);\n\nconst mapSchema = schema => ({\n    keys: S.getKeys(schema),\n    schema,\n    name: S.name(schema),\n    path: S.keypath(schema),\n    base: S.keypath(schema),\n});\n\nconst getServicePointsSchemas = (\n    servicePoints, {\n        funcs: {\n            getSchemas = _getSchemas,\n            readThunk = read,\n        } = {},\n    } = {},\n) => (\n    async (dispatch) => {\n        const paths = isObject(servicePoints)\n            ? Object.keys(servicePoints)\n            : [];\n\n        if (paths.length === 0) {\n            return [];\n        }\n\n        const { th } = await dispatch(readThunk());\n        const schemas = await getSchemas({ th, paths });\n\n        return schemas\n            .reduce((acc, schema) => {\n                if (schema && schema.result) {\n                    acc.push(mapSchema(schema.result));\n                }\n                return acc;\n            }, []);\n    }\n);\n\nconst getServiceList =\n    (result, offset, chunkSize, sortColumn, sortOrder, {\n        funcs: {\n            query = _query,\n        } = {},\n    } = {}) =>\n        (dispatch, getState) => {\n            const searchString = selectServiceSearch(getState());\n            const { keys } = result;\n            const keyContainsString = k => `contains(${k}, \"${searchString}\")`;\n            const predicates = searchString && isNonEmptyArray(keys)\n                ? `[${result.keys.map(keyContainsString).join(' or ')}]`\n                : '';\n            const xpathExpr = `${result.base}${predicates}`;\n            return dispatch(\n                query({\n                    selection: [\n                        ...result.keys,\n                        'count(modified/devices)',\n                        'plan-location',\n                        'modified',\n                    ],\n                    path: result.base,\n                    sort: sortColumn,\n                    sortOrder,\n                    initialOffset: offset,\n                    chunkSize,\n                    result_as: 'keypath-value',\n                    xpathExpr,\n                    contextNode: undefined,\n                }),\n            );\n        };\n\n\nexport const getServicePointsAndSchemas = ({\n    funcs: {\n        getServicePointsFunc = getServicePoints,\n        getServicePointsSchemasFunc = getServicePointsSchemas,\n    } = {},\n} = {}) =>\n    async (dispatch) => {\n        const servicePoints = await getServicePointsFunc();\n\n        const schemas = await dispatch(getServicePointsSchemasFunc(servicePoints));\n        const filteredSchemas = schemas.filter(s => !S.isAccessDenied(s.schema));\n        const filteredServicePoints = filteredSchemas.reduce((acc, s) =>\n            ({\n                ...acc,\n                [s.path]: omitKeys(s, ['schema']),\n            }),\n        {});\n        dispatch(getServicePointsAction({ service_points: filteredServicePoints }));\n        return filteredSchemas;\n    };\n\nexport const getServices = ({\n    servicePoint,\n    offset,\n    chunkSize,\n    sortColumn,\n    sortOrder,\n    funcs: {\n        getServiceListFunc = getServiceList,\n        getGlobalApplicationSettingFunc = getGlobalApplicationSetting,\n        getSchemaFunc = getSchema,\n    } = {},\n} = {}) => async (dispatch, getState) => {\n    dispatch(getServicesStartAction());\n    try {\n        if (isNonEmptyString(servicePoint)) {\n            await dispatch(getGlobalApplicationSettingFunc({\n                setting: ACTION_STATUS_INDICATOR_TIMEOUT,\n            }));\n            const result = selectIsLoaded(getState(), { path: servicePoint })\n                ? { schema: selectSchema(getState(), servicePoint) }\n                : await dispatch(getSchemaFunc({ path: servicePoint }));\n            await dispatch(getServiceListFunc(\n                mapSchema(result.schema),\n                offset,\n                chunkSize,\n                sortColumn,\n                sortOrder,\n            ));\n        }\n        dispatch(getServicesCompleteAction());\n    } catch (e) {\n        dispatch(getServicesErrorAction(e));\n    }\n};\n\nconst parseDeploymentTriggers = triggers => triggers.reduce((acc, tr) => {\n    if (tr.status === 'violated') {\n        acc.violated += 1;\n    } else if (tr.status === 'jeopardized') {\n        acc.jeopardized += 1;\n    } else if (tr.status === 'running') {\n        acc.running += 1;\n    } else if (tr.status === 'successful') {\n        acc.successful += 1;\n    }\n    return acc;\n}, { running: 0, successful: 0, violated: 0, jeopardized: 0 });\n\nconst selection = [\n    'jeopardy-result', 'violation-result', 'status',\n];\n\nexport const getServiceDeployments = ({\n    funcs: {\n        readThunk = read,\n        jsonrpc = jsonrpcSimple,\n    } = {},\n} = {}) => (dispatch) => {\n    dispatch(getServiceDeploymentsStartAction());\n    return dispatch(readThunk()).then(({ th }) => jsonrpc('query', {\n        th,\n        selection,\n        xpath_expr: '//service-progress-monitoring/trigger-status',\n    }).then(results => dispatch(\n        getServiceDeploymentsAction(\n            parseDeploymentTriggers(\n                zipQueryResult(selection, results.results),\n            ),\n        )),\n    )).catch(() => dispatch(getServiceDeploymentsErrorAction()));\n};\n\nconst constructCountListServicesRequest = (path, th) => ({\n    method: 'query',\n    params: {\n        path,\n        th,\n        selection: [`count(${path})`],\n        initial_offset: 0,\n        chunk_size: 1,\n        result_as: 'string',\n    },\n});\n\nconst getCount = res => (\n    toNumber(flatten(ensureArray(res && res.result.results)).shift())\n);\n\nconst resultToInstanceCount = results => res => res.reduce((acc, r, idx) => ({\n    ...acc,\n    [results[idx].path]: {\n        count: getCount(r),\n        name: results[idx].name,\n        servicePoint: results[idx].path,\n    },\n}), {});\n\nconst requestServiceCounts = (results, th) => results.map(result => (\n    constructCountListServicesRequest(result.path, th)\n));\n\nconst countServices = (\n    dispatch,\n    th,\n    {\n        funcs: {\n            batch = jsonrpcBatch,\n        } = {},\n    } = {},\n) => async (results) => {\n    let res = {};\n    // NOTE(dbildstr): only get service count when we have service-points\n    const filteredResults = results.filter(result => !S.isAccessDenied(result.schema));\n    if (isNonEmptyArray(filteredResults)) {\n        const requests = requestServiceCounts(filteredResults, th);\n        const batchResults = await batch({ requests });\n        res = await resultToInstanceCount(filteredResults)(batchResults);\n    }\n    await dispatch(getServiceInstanceCountAction(res));\n};\n\nexport const getServiceInstanceCount = ({\n    funcs: {\n        getServicePointsAndSchemasFunc = getServicePointsAndSchemas,\n        readThunk = read,\n        serviceCounter = countServices,\n    } = {},\n} = {}) =>\n    async (dispatch, getState) => {\n        if (selectServiceInstanceCountIsLoading(getState())) {\n            return Promise.resolve();\n        }\n\n        try {\n            dispatch(getServiceInstanceCountStartAction());\n            const { th } = await dispatch(readThunk({ mode: MODES.READ }));\n\n            const res = await dispatch(getServicePointsAndSchemasFunc());\n            return await serviceCounter(dispatch, th)(res);\n        } catch (err) {\n            return dispatch(getServiceInstanceCountErrorAction(err));\n        }\n    };\n\nconst getPaths = ({ action, servicePath }) => {\n    if (action === 're-deploy dry-run') {\n        return {\n            actionPath: `${servicePath}/${action}`,\n            executePath: `${servicePath}/re-deploy`,\n        };\n    }\n    return { actionPath: `${servicePath}/${action}` };\n};\n\nexport const runServiceActionThunk = ({\n    action,\n    servicePath,\n    funcs: {\n        runCustomActionThunk = _runCustomActionThunk,\n    } = {},\n}) => {\n    const { actionPath, executePath } = getPaths({ action, servicePath });\n    return runCustomActionThunk({ action, actionPath, executePath });\n};\n\n\nexport {\n    parseDeploymentTriggers as _parseDeploymentTriggers,\n    getServicePointsSchemas as _getServicePointsSchemas,\n    countServices as _countServices,\n    requestServiceCounts as _requestServiceCounts,\n    resultToInstanceCount as _resultToInstanceCount,\n    getServiceList as _getServiceList,\n};\n","export const SERVICE_ACTIONS = [\n    'check-sync',\n    're-deploy',\n    're-deploy dry-run',\n];\n\nexport const COLUMNS_ACTION = SERVICE_ACTIONS.map(k => ({\n    key: k,\n    title: k,\n}));\n\nexport const SERVICE_MANAGER_USER_STORAGE_PATH = 'SERVICE_MANAGER_USER_STORAGE_PATH';\n\nexport const SERVICE_COLUMNS = [\n    {\n        key: 'devices',\n        title: 'devices',\n        canBeHidden: true,\n    },\n    {\n        key: 'check-sync',\n        title: 'check-sync',\n        canBeHidden: true,\n    },\n    {\n        key: 're-deploy',\n        title: 're-deploy',\n        canBeHidden: true,\n    },\n    {\n        key: 're-deploy dry-run',\n        title: 're-deploy dry-run',\n        canBeHidden: true,\n    },\n    {\n        key: 'plan',\n        title: 'plan',\n        canBeHidden: true,\n    },\n];\n","import {\n    createSelector,\n} from 'reselect';\nimport * as S from '@webui-one/core/schema';\nimport { ensureNumber } from '@webui-one/core/utils/number';\nimport { isNonEmptyString } from '@webui-one/core/utils/string';\nimport { pathOr } from '@webui-one/core/utils/object';\nimport {\n    getActionStatus,\n    selectYangActions,\n    getCheckInSyncStatus,\n    getRedeployStatus,\n    getRedeployDryRunStatus,\n} from 'modules/yangActions/selectors';\nimport {\n    selectNodes,\n} from 'modules/nodes/selectors';\nimport {\n    pathIsDirty,\n    selectDirtyPaths,\n} from 'modules/transactions/selectors';\nimport {\n    quoteKey,\n} from '@webui-one/core/utils/key';\nimport {\n    selectSchema as _selectSchema,\n} from 'modules/schemas/selectors';\nimport { getLinkWithPath } from 'ConfigurationEditor/utils';\nimport {\n    SERVICE_ACTIONS,\n    SERVICE_MANAGER_USER_STORAGE_PATH,\n} from './paths';\nimport {\n    createColumnsVisibilitySelector,\n} from 'modules/userdata/selectors';\nimport { pathToObjects } from '@webui-one/core/keypath/kp-parser';\n\nconst EMPTY_OBJECT = Object.freeze({});\nexport const servicesSelector = state => state.services || EMPTY_OBJECT;\nexport const selectServicesMetaData = state => servicesSelector(state).services || EMPTY_OBJECT;\nexport const servicePointsSelector = state => servicesSelector(state).servicePoints || EMPTY_OBJECT;\nexport const selectServicePoints = state => servicesSelector(state).servicePoints || undefined;\n\nexport const selectServicePointsKeypaths = state => (\n    Object.keys(servicePointsSelector(state))\n);\n\nexport const selectServicePoint = (_, ownPath) => {\n    const { path } = ownPath || {};\n    return path || '';\n};\n\nconst isValidServicePoint = (servicePointPath, servicePoint, nodes) => (\n    (servicePointPath === servicePoint || !isNonEmptyString(servicePoint))\n    && nodes[servicePointPath]\n);\n\nexport const selectServiceNodes = createSelector(\n    servicePointsSelector,\n    selectNodes,\n    selectServicePoint,\n    (servicePoints, nodes, servicePoint) =>\n        Object.values(servicePoints)\n            .reduce((acc, { path }) => (\n                isValidServicePoint(path, servicePoint, nodes)\n                    ? {\n                        ...acc,\n                        [path]: nodes[path],\n                    }\n                    : acc\n            ), {}),\n);\n\nexport const selectAllServiceNodes = createSelector(\n    servicePointsSelector,\n    selectNodes,\n    (servicePoints, nodes) => (\n        Object.values(servicePoints)\n            .reduce((acc, { path }) => ({\n                ...acc,\n                [path]: nodes[path],\n            }), {})\n    ),\n);\n\nexport const selectServiceSchemas = createSelector(\n    servicePointsSelector,\n    state => state,\n    (_, props) => props,\n    (\n        servicePoints,\n        state,\n        {\n            funcs: { selectSchema = _selectSchema } = {},\n        } = {},\n    ) => (\n        Object.values(servicePoints).reduce((acc, { path }) => (\n            { ...acc, [path]: selectSchema(state, path) }\n        ), {})\n    ),\n);\n\nexport const selectCurrentServiceNode = (state, props) => {\n    const currentServicePath = selectServicePoint(state, props);\n    const nodes = selectServiceNodes(state, props);\n    return nodes[currentServicePath] || EMPTY_OBJECT;\n};\n\nexport const selectExpandedRows = state => servicesSelector(state).expandedRows || EMPTY_OBJECT;\nexport const selectExpandedRow = (state, path) =>\n    selectExpandedRows(state)[path] || EMPTY_OBJECT;\nexport const isExpanded = expandState => !!(expandState || {}).isExpanded;\nexport const getExpandedColumnName = expandState => (expandState || {}).column;\n\nexport const selectServiceOffset = (state, props) => (\n    selectCurrentServiceNode(state, props).offset || 1\n);\n\nexport const selectServiceSortColumn = (state, props) => (\n    selectCurrentServiceNode(state, props).sort\n);\n\nexport const selectServiceSortOrder = (state, props) => (\n    selectCurrentServiceNode(state, props).sortOrder\n);\n\nexport const selectTotalNumberOfServices = (state, props) => (\n    selectCurrentServiceNode(state, props).totalNumberOfResults || 0\n);\n\nexport const buildYangActions = (key, yangActions) => SERVICE_ACTIONS.reduce((accAct, action) => ({\n    ...accAct,\n    [action]: yangActions[`${key}/${action}`],\n}), {});\n\nconst actionHandlers = {\n    're-deploy': getRedeployStatus,\n    'check-sync': getCheckInSyncStatus,\n    're-deploy dry-run': getRedeployDryRunStatus,\n};\n\nconst getActionResultHandler = actionKey => actionHandlers[actionKey] || getCheckInSyncStatus;\n\nconst getActionsWithStatus = actions =>\n    Object.keys(actions).reduce((acc, actionKey) => ({\n        ...acc,\n        [actionKey]: {\n            status: getActionStatus(\n                actions,\n                actionKey,\n                getActionResultHandler(actionKey)).actionStatus,\n            yangAction: { ...actions[actionKey], actionStatus: {} },\n        },\n    }), {});\n\nconst noData = (rows, keys) => (\n    rows.reduce((missing, row) => (\n        row.isLoading || keys.reduce((allKeys, key) => (key in row ? allKeys : true), false)\n    ), true)\n);\n\nexport const selectServiceIncludesPlan = createSelector(\n    selectServiceNodes,\n    selectServiceSchemas,\n    (serviceNodes, schemas) => {\n        const serviceKeys = Object.keys(serviceNodes);\n        if (serviceKeys.length === 0) return false;\n        const schema = schemas[serviceKeys[0]];\n        return !!(schema &&\n            schema.children &&\n            schema.children.find(c => c.name === 'plan'));\n    },\n);\n\nexport const getDeviceItems = (node) => {\n    if (!('rows' in node)) return node;\n\n    const rootPath = '/ncs:devices/device';\n    const children = node.rows.map(row => ({\n        name: row[0],\n        path: `${rootPath}{${quoteKey(row[0])}}`,\n    }));\n\n    return {\n        ...node,\n        rows: [\n            {\n                name: 'Devices',\n                path: rootPath,\n                children,\n            },\n        ],\n    };\n};\n\nconst selectZombieServices = (state) => {\n    const zombies = state.nodes['/ncs:zombies/service'];\n    return zombies || EMPTY_OBJECT;\n};\n\nexport const selectZombiesIsLoading = (state) => {\n    const zombies = state.nodes['/ncs:zombies/service'];\n    return zombies && zombies.isLoading ? zombies.isLoading : false;\n};\n\nexport const selectZombieServiceRows = createSelector(\n    selectZombieServices,\n    selectExpandedRows,\n    selectServicePoint,\n    (zombies, expandedRows, servicePoint) => {\n        const zombieRows = zombies && zombies.rows ? zombies.rows : [];\n        if (!servicePoint) return [];\n        const service = servicePoint.split(':')[0];\n        const filteredZombieRows = zombieRows.filter(row => !!row['service-path'].startsWith(service));\n\n        return filteredZombieRows.map((row) => {\n            const servicePath = row['service-path'];\n            const keypath = `/ncs:zombies/service{\"${servicePath}\"}`;\n            const isColumnExpanded = isExpanded(expandedRows[keypath]);\n            const columnExpanded = getExpandedColumnName(expandedRows[keypath]);\n\n            return {\n                rowKey: keypath,\n                data: {\n                    ...row,\n                    expandable: {\n                        isExpanded: isColumnExpanded,\n                        column: columnExpanded || '',\n                    },\n                },\n            };\n        });\n    });\n\nexport const isNotKeypathValueResult = (isContainer, rows, keys) =>\n    !isContainer && !rows[0][keys[0]].keypath;\n\nexport const findKeyPath = (row) => {\n    const keyValue = Object.entries(row).find(([, v]) => !!v.keypath);\n    if (keyValue) return keyValue[1].keypath.slice(0, -(keyValue[0].length + 1));\n    return undefined;\n};\n\nexport const selectDynamicColumns = createSelector(\n    selectServiceNodes,\n    selectServiceSchemas,\n    (serviceNodes, schemas) => {\n        const serviceNodeKeys = Object.keys(serviceNodes);\n\n        if (serviceNodeKeys.length > 0) {\n            const schema = schemas[serviceNodeKeys[0]];\n            const keys = S.getKeys(schema);\n            const isContainer = S.isContainer(schema);\n\n            if (isContainer) {\n                return [{\n                    key: 'name',\n                    title: 'name',\n                    canBeHidden: true,\n                }];\n            }\n            return keys.map(key => ({\n                key,\n                title: key,\n                canBeHidden: true,\n            }));\n        }\n\n        return [];\n    },\n);\n\nconst getParentPathObjects = (rowKey) => {\n    try {\n        const pathObjects = pathToObjects(rowKey);\n        const keyPathObjects = pathObjects.filter(po => po.type === 'key' && po.listEntry);\n        if (pathObjects[pathObjects.length - 1].type === 'name') {\n            return keyPathObjects;\n        }\n        return keyPathObjects.slice(0, -1);\n    } catch {\n        return [];\n    }\n};\n\nexport const selectServiceRows = createSelector(\n    selectNodes,\n    selectServiceNodes,\n    selectServiceSchemas,\n    selectServicesMetaData,\n    selectYangActions,\n    selectExpandedRows,\n    selectDirtyPaths,\n    (nodes, serviceNodes, schemas, metadata, yangActions, expandedRows, dirtyPaths) =>\n        // eslint-disable-next-line sonarjs/cognitive-complexity\n        Object.keys(serviceNodes).reduce((acc, k) => {\n            const serviceNode = serviceNodes[k];\n            const rows = Array.isArray(serviceNode.rows) ? serviceNode.rows : [];\n            const schema = schemas[k];\n            const keys = S.getKeys(schema);\n            const isContainer = S.isContainer(schema);\n\n            if (schema === undefined\n                || noData(rows, keys)\n                || isNotKeypathValueResult(isContainer, rows, keys)) {\n                return acc;\n            }\n\n            return [...acc, ...rows.map((row) => {\n                const keypath = isContainer\n                    ? (findKeyPath(row) || S.keypath(schema))\n                    : findKeyPath(row);\n                const meta = metadata[keypath] || EMPTY_OBJECT;\n                const actions = buildYangActions(keypath, yangActions);\n                const expandedColumn = getExpandedColumnName(expandedRows[keypath]);\n                const actionsWithStatus = getActionsWithStatus(actions);\n                const isDirty = pathIsDirty(keypath, dirtyPaths);\n                if (expandedColumn && actionsWithStatus[expandedColumn]) {\n                    actionsWithStatus[expandedColumn].isExpanded =\n                        isExpanded(expandedRows[keypath]);\n                }\n                const node = nodes[`${keypath}/modified/devices`];\n                const deviceItemsData = expandedColumn === 'devices' && node ?\n                    getDeviceItems(node) :\n                    {};\n                const keyObjects = isContainer\n                    ? { name: S.qname(schema) }\n                    : keys.reduce((prevValue, key) =>\n                        ({ ...prevValue, [key]: row[key].value }), {});\n\n                const keyNames = Object.keys(keyObjects).map(kn => kn);\n                const parentListPaths = getParentPathObjects(keypath);\n\n                return ({\n                    rowKey: keypath,\n                    data: {\n                        ...meta,\n                        ...actionsWithStatus,\n                        ...keyObjects,\n                        keys: keyNames,\n                        parentListPaths,\n                        devices: row['count(modified/devices)'].value,\n                        planLocation: (row['plan-location'] || {}).value,\n                        expandable: {\n                            isExpanded: isExpanded(expandedRows[keypath]),\n                            column: expandedColumn,\n                            yangAction: { ...(actions || {})[expandedColumn],\n                                actionStatus: actionsWithStatus[expandedColumn] },\n                        },\n                        type: S.name(schema),\n                        to: getLinkWithPath(keypath),\n                        isDirty,\n                        deviceItemsData,\n                    },\n                });\n            })];\n        }, []),\n);\n\nexport const selectServiceCount = createSelector(\n    selectServiceRows,\n    rows => rows.length,\n);\n\nexport const selectSelectedServiceRows = createSelector(\n    selectServiceRows,\n    rows => rows.filter(r => r.data.isSelected),\n);\n\nexport const selectSelectedServiceCount = createSelector(\n    selectSelectedServiceRows,\n    rows => rows.length,\n);\n\nexport const selectServiceIsLoading = state =>\n    !!servicesSelector(state).isLoading;\n\nexport const selectServiceListIsLoading = (state, path) =>\n    !!(state.nodes[path] && state.nodes[path].isLoading);\n\nexport const selectServiceInstanceCount = state =>\n    servicesSelector(state).instanceCount || {};\n\nexport const selectServiceCountByType = (state) => {\n    const instances = selectServiceInstanceCount(state);\n    const keys = Object.keys(instances);\n    return keys\n        .reduce((acc, key) => {\n            const inst = instances[key];\n            if (inst.count > 0) {\n                acc.push({\n                    name: inst.name,\n                    value: inst.count,\n                    servicePoint: inst.servicePoint,\n                });\n            }\n            return acc;\n        }, [])\n        .sort((a, b) => a.name.localeCompare(b.name));\n};\n\nexport const selectServiceCountTotal = (state) => {\n    const instances = selectServiceInstanceCount(state);\n    const keys = Object.keys(instances);\n    return keys.reduce((acc, key) => acc + instances[key].count, 0);\n};\n\nexport const selectServiceInstanceCountIsLoading = state => (\n    servicesSelector(state).instanceCountIsLoading === true\n);\n\nconst defaultDeployments = Object.freeze({\n    running: 0,\n    successful: 0,\n    jeopardized: 0,\n    violated: 0,\n});\nexport const selectServiceDeployments = (state) => {\n    const services = servicesSelector(state);\n    return services.deployments || defaultDeployments;\n};\n\nexport const selectServiceDeploymentCount = (state) => {\n    const deployments = selectServiceDeployments(state);\n    return ensureNumber(deployments.jeopardized) +\n        ensureNumber(deployments.successful) +\n        ensureNumber(deployments.running) +\n        ensureNumber(deployments.violated);\n};\n\nexport const selectServiceDeploymentsIsLoading = (state) => {\n    const services = servicesSelector(state);\n    return !!services.deploymentsIsLoading;\n};\n\nexport const selectServiceSearch = state => pathOr('', ['services', 'search', 'value'], state);\nconst userStorageProps = {\n    path: SERVICE_MANAGER_USER_STORAGE_PATH,\n};\n\nconst serviceColumnSelector = createColumnsVisibilitySelector();\nexport const selectServiceColumns = state => serviceColumnSelector(state, userStorageProps);\n\nexport {\n    EMPTY_OBJECT as _EMPTY_OBJECT,\n    getParentPathObjects as _getParentPathObjects,\n};\n"],"names":["getServicesStartAction","type","actionTypes","SERVICES_GET_START","getServicesCompleteAction","SERVICES_GET_COMPLETE","getServicesErrorAction","error","SERVICES_GET_ERROR","isSelected","names","SERVICES_SELECT","getServiceDeploymentsAction","deployments","SERVICE_DEPLOYMENTS_GET","getServiceDeploymentsStartAction","SERVICE_DEPLOYMENTS_GET_START","getServiceDeploymentsErrorAction","SERVICE_DEPLOYMENTS_GET_ERROR","getServiceInstanceCountStartAction","SERVICE_INSTANCE_COUNT_GET_START","getServiceInstanceCountAction","count","SERVICE_INSTANCE_COUNT_GET","getServiceInstanceCountErrorAction","SERVICE_INSTANCE_COUNT_GET_ERROR","getServicePointsAction","action","SERVICE_POINTS_GET","schemas2","types","GET_SERVICE_POINT_SCHEMAS_COMPLETE","path","column","isExpanded","SET_EXPANDED_ROW","value","SET_SEARCH","getServicePoints","funcs","jsonrpc","jsonrpcSimple","then","service_points","mapSchema","schema","keys","S","getKeys","name","keypath","base","getServicePointsSchemas","servicePoints","getSchemas","_getSchemas","readThunk","read","async","paths","isObject","Object","length","th","dispatch","reduce","acc","result","push","getServiceList","offset","chunkSize","sortColumn","sortOrder","query","_query","getState","searchString","selectServiceSearch","predicates","isNonEmptyArray","map","k","join","xpathExpr","selection","sort","initialOffset","result_as","contextNode","undefined","getServicePointsAndSchemas","getServicePointsFunc","getServicePointsSchemasFunc","filteredSchemas","filter","s","isAccessDenied","filteredServicePoints","omitKeys","servicePoint","getServiceListFunc","getGlobalApplicationSettingFunc","getGlobalApplicationSetting","getSchemaFunc","getSchema","isNonEmptyString","setting","ACTION_STATUS_INDICATOR_TIMEOUT","selectIsLoaded","selectSchema","e","parseDeploymentTriggers","triggers","tr","status","violated","jeopardized","running","successful","xpath_expr","results","zipQueryResult","catch","getCount","res","toNumber","flatten","ensureArray","shift","resultToInstanceCount","r","idx","requestServiceCounts","method","params","initial_offset","chunk_size","constructCountListServicesRequest","countServices","batch","jsonrpcBatch","filteredResults","requests","batchResults","getServicePointsAndSchemasFunc","serviceCounter","selectServiceInstanceCountIsLoading","Promise","resolve","mode","MODES","READ","err","servicePath","runCustomActionThunk","_runCustomActionThunk","actionPath","executePath","getPaths","SERVICE_ACTIONS","COLUMNS_ACTION","key","title","canBeHidden","EMPTY_OBJECT","freeze","servicesSelector","state","services","selectServicesMetaData","servicePointsSelector","selectServicePoint","_","ownPath","selectServiceNodes","createSelector","selectNodes","nodes","values","servicePointPath","isValidServicePoint","selectAllServiceNodes","selectServiceSchemas","props","_selectSchema","selectCurrentServiceNode","currentServicePath","selectExpandedRows","expandedRows","expandState","getExpandedColumnName","totalNumberOfResults","buildYangActions","yangActions","accAct","actionHandlers","getRedeployStatus","getCheckInSyncStatus","getRedeployDryRunStatus","getActionResultHandler","actionKey","selectServiceIncludesPlan","serviceNodes","schemas","serviceKeys","children","find","c","getDeviceItems","node","rootPath","rows","row","quoteKey","zombies","isLoading","selectZombieServiceRows","zombieRows","service","split","startsWith","isColumnExpanded","columnExpanded","rowKey","data","expandable","isNotKeypathValueResult","isContainer","findKeyPath","keyValue","entries","slice","selectDynamicColumns","serviceNodeKeys","getParentPathObjects","pathObjects","pathToObjects","keyPathObjects","po","listEntry","selectServiceRows","selectYangActions","selectDirtyPaths","metadata","dirtyPaths","serviceNode","Array","isArray","missing","allKeys","noData","meta","actions","expandedColumn","actionsWithStatus","getActionStatus","actionStatus","yangAction","getActionsWithStatus","isDirty","pathIsDirty","deviceItemsData","keyObjects","qname","prevValue","keyNames","kn","parentListPaths","devices","planLocation","to","getLinkWithPath","selectServiceCount","selectSelectedServiceRows","selectSelectedServiceCount","selectServiceInstanceCount","instanceCount","instances","inst","a","b","localeCompare","instanceCountIsLoading","defaultDeployments","selectServiceDeployments","ensureNumber","deploymentsIsLoading","pathOr","userStorageProps","SERVICE_MANAGER_USER_STORAGE_PATH","serviceColumnSelector","createColumnsVisibilitySelector"],"sourceRoot":""}